export default {
  "node_modules/as-bignum/assembly/fixed/fp128.ts": "aW1wb3J0IHsgaTEyOCB9IGZyb20gJy4uL2ludGVnZXIvaTEyOCc7CmltcG9ydCB7IHUxMjggfSBmcm9tICcuLi9pbnRlZ2VyL3UxMjgnOwoKLy8gU3VwcG9ydCBvbmx5IHRoaXMgZnJhY3Rpb25zOgovLyBmcDEyODx1OD4gICA9PiAgIDggYml0cyAofiAyICBkZWNpbWFsIGRpZ2l0cykKLy8gZnAxMjg8dTE2PiAgPT4gIDE2IGJpdHMgKH4gNCAgZGVjaW1hbCBkaWdpdHMpCi8vIGZwMTI4PHUyND4gID0+ICAyNCBiaXRzICh+IDcgIGRlY2ltYWwgZGlnaXRzKQovLyBmcDEyODx1MzI+ICA9PiAgMzIgYml0cyAofiA5ICBkZWNpbWFsIGRpZ2l0cykKLy8gZnAxMjg8dTQwPiAgPT4gIDQwIGJpdHMgKH4gMTIgZGVjaW1hbCBkaWdpdHMpCi8vIGZwMTI4PHU0OD4gID0+ICA0OCBiaXRzICh+IDE0IGRlY2ltYWwgZGlnaXRzKQovLyBmcDEyODx1NTY+ICA9PiAgNTYgYml0cyAofiAxNiBkZWNpbWFsIGRpZ2l0cykKLy8gZnAxMjg8dTY0PiAgPT4gIDY0IGJpdHMgKH4gMTkgZGVjaW1hbCBkaWdpdHMpCi8vIGZwMTI4PHU3Mj4gID0+ICA3MiBiaXRzICh+IDIxIGRlY2ltYWwgZGlnaXRzKQovLyBmcDEyODx1ODA+ICA9PiAgODAgYml0cyAofiAyNCBkZWNpbWFsIGRpZ2l0cykKLy8gZnAxMjg8dTg4PiAgPT4gIDg4IGJpdHMgKH4gMjYgZGVjaW1hbCBkaWdpdHMpCi8vIGZwMTI4PHU5Nj4gID0+ICA5NiBiaXRzICh+IDI4IGRlY2ltYWwgZGlnaXRzKQovLyBmcDEyODx1MTA0PiA9PiAxMDQgYml0cyAofiAzMSBkZWNpbWFsIGRpZ2l0cykKLy8gZnAxMjg8dTExMj4gPT4gMTEyIGJpdHMgKH4gMzMgZGVjaW1hbCBkaWdpdHMpCi8vIGZwMTI4PHUxMjA+ID0+IDEyMCBiaXRzICh+IDM2IGRlY2ltYWwgZGlnaXRzKQoKZXhwb3J0IGNsYXNzIGZwMTI4PFE+IHsKCiAgc3RhdGljIHJlYWRvbmx5IFplcm86IGZwMTI4PFE+ID0gbmV3IGZwMTI4PFE+KDApOwogIHN0YXRpYyByZWFkb25seSBPbmU6ICBmcDEyODxRPiA9IG5ldyBmcDEyODxRPigxKTsKCiAgcHJvdGVjdGVkIHZhbHVlOiBpMTI4ID0gaTEyOC5aZXJvOwoKICBjb25zdHJ1Y3RvcihsbzogdTY0ID0gMCwgaGk6IGk2NCA9IDApIHsKICAgIHRoaXMudmFsdWUubG8gPSBsbzsKICAgIHRoaXMudmFsdWUuaGkgPSBoaTsKICB9CgogIEBpbmxpbmUKICBnZXQgaW50Qml0cygpOiBpMzIgewogICAgcmV0dXJuIDEyOCAtIHRoaXMuZnJhY3RCaXRzOwogIH0KCiAgQGlubGluZQogIGdldCBmcmFjdEJpdHMoKTogaTMyIHsKICAgIGlmIChpc1JlZmVyZW5jZTxRPigpKSB7CiAgICAgIHJldHVybiA4ICogb2Zmc2V0b2Y8UT4oKTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiA4ICogc2l6ZW9mPFE+KCk7CiAgICB9CiAgfQoKICBAaW5saW5lCiAgZ2V0IGludCgpOiBpMTI4IHsKICAgIHJldHVybiB0aGlzLnZhbHVlID4+PiB0aGlzLmZyYWN0Qml0czsKICB9CgogIEBpbmxpbmUKICBnZXQgZnJhY3QoKTogdTEyOCB7CiAgICByZXR1cm4gKGNoYWdldHlwZTx1MTI4Pih0aGlzLnZhbHVlKSkgPDwgdGhpcy5pbnRCaXRzOwogIH0KCiAgLy8gVE9ETwp9Cg==",
  "node_modules/as-bignum/assembly/fixed/fp256.ts": "aW1wb3J0IHsgaTI1NiB9IGZyb20gJy4uL2ludGVnZXIvaTI1Nic7CgpleHBvcnQgY2xhc3MgZnAyNTY8UT4gewoKICBjb25zdHJ1Y3RvcihwdWJsaWMgdmFsdWU6IGkyNTYgPSBpMjU2Llplcm8pIHt9CgogIC8vIFRPRE8KfQo=",
  "node_modules/as-bignum/assembly/fixed/index.ts": "aW1wb3J0IHsgdTEyOCAgfSBmcm9tICIuLi9pbnRlZ2VyL3UxMjgiOwppbXBvcnQgeyBmcDEyOCB9IGZyb20gIi4vZnAxMjgiOwppbXBvcnQgeyBmcDI1NiB9IGZyb20gIi4vZnAyNTYiOwppbXBvcnQgewogIHUyNCwgdTQwLCB1NDgsIHU1NiwgdTcyLCB1ODAsIHU4OCwgdTk2LAogIHUxMDQsIHUxMTIsIHUxMjAsIHUxMzYsIHUxNDQsIHUxNTIsIHUxNjAsCn0gZnJvbSAnLi90eXBlcyc7CgpleHBvcnQgdHlwZSBmcDEyOHg4ICA9IGZwMTI4PHU4PjsKZXhwb3J0IHR5cGUgZnAxMjh4MTYgPSBmcDEyODx1MTY+OwpleHBvcnQgdHlwZSBmcDEyOHgyNCA9IGZwMTI4PHUyND47CmV4cG9ydCB0eXBlIGZwMTI4eDMyID0gZnAxMjg8dTMyPjsKZXhwb3J0IHR5cGUgZnAxMjh4NDAgPSBmcDEyODx1NDA+OwpleHBvcnQgdHlwZSBmcDEyOHg0OCA9IGZwMTI4PHU0OD47CmV4cG9ydCB0eXBlIGZwMTI4eDU2ID0gZnAxMjg8dTU2PjsKZXhwb3J0IHR5cGUgZnAxMjh4NjQgPSBmcDEyODx1NjQ+OwpleHBvcnQgdHlwZSBmcDEyOHg3MiA9IGZwMTI4PHU3Mj47CmV4cG9ydCB0eXBlIGZwMTI4eDgwID0gZnAxMjg8dTgwPjsKCmV4cG9ydCB0eXBlIGZwMjU2eDggICA9IGZwMjU2PHU4PjsKZXhwb3J0IHR5cGUgZnAyNTZ4MTYgID0gZnAyNTY8dTE2PjsKZXhwb3J0IHR5cGUgZnAyNTZ4MjQgID0gZnAyNTY8dTI0PjsKZXhwb3J0IHR5cGUgZnAyNTZ4MzIgID0gZnAyNTY8dTMyPjsKZXhwb3J0IHR5cGUgZnAyNTZ4NDAgID0gZnAyNTY8dTQwPjsKZXhwb3J0IHR5cGUgZnAyNTZ4NDggID0gZnAyNTY8dTQ4PjsKZXhwb3J0IHR5cGUgZnAyNTZ4NTYgID0gZnAyNTY8dTU2PjsKZXhwb3J0IHR5cGUgZnAyNTZ4NjQgID0gZnAyNTY8dTY0PjsKZXhwb3J0IHR5cGUgZnAyNTZ4NzIgID0gZnAyNTY8dTcyPjsKZXhwb3J0IHR5cGUgZnAyNTZ4ODAgID0gZnAyNTY8dTgwPjsKZXhwb3J0IHR5cGUgZnAyNTZ4ODggID0gZnAyNTY8dTg4PjsKZXhwb3J0IHR5cGUgZnAyNTZ4OTYgID0gZnAyNTY8dTk2PjsKZXhwb3J0IHR5cGUgZnAyNTZ4MTA0ID0gZnAyNTY8dTEwND47CmV4cG9ydCB0eXBlIGZwMjU2eDExMiA9IGZwMjU2PHUxMTI+OwpleHBvcnQgdHlwZSBmcDI1NngxMjAgPSBmcDI1Njx1MTIwPjsKZXhwb3J0IHR5cGUgZnAyNTZ4MTI4ID0gZnAyNTY8dTEyOD47CmV4cG9ydCB0eXBlIGZwMjU2eDEzNiA9IGZwMjU2PHUxMzY+OwpleHBvcnQgdHlwZSBmcDI1NngxNDQgPSBmcDI1Njx1MTQ0PjsKZXhwb3J0IHR5cGUgZnAyNTZ4MTUyID0gZnAyNTY8dTE1Mj47CmV4cG9ydCB0eXBlIGZwMjU2eDE2MCA9IGZwMjU2PHUxNjA+OwoKZXhwb3J0IHsgZnAxMjgsIGZwMjU2IH07Cg==",
  "node_modules/as-bignum/assembly/fixed/safe/fp128.ts": "ZXhwb3J0IG5hbWVzcGFjZSBzYWZlIHsKICAvLyBUT0RPCn0K",
  "node_modules/as-bignum/assembly/fixed/safe/fp256.ts": "ZXhwb3J0IG5hbWVzcGFjZSBzYWZlIHsKICAvLyBUT0RPCn0K",
  "node_modules/as-bignum/assembly/fixed/types.ts": "Ly8gdTgKLy8gdTE2CgpleHBvcnQgY2xhc3MgdTI0IHsKICBwcml2YXRlIF8wOiB1MTYKICBwcml2YXRlIF8xOiB1OAp9CgovLyB1MzIKCmV4cG9ydCBjbGFzcyB1NDAgewogIHByaXZhdGUgXzA6IHUzMgogIHByaXZhdGUgXzE6IHU4Cn0KCmV4cG9ydCBjbGFzcyB1NDggewogIHByaXZhdGUgXzA6IHUzMgogIHByaXZhdGUgXzE6IHUxNgp9CgpleHBvcnQgY2xhc3MgdTU2IHsKICBwcml2YXRlIF8wOiB1MzIKICBwcml2YXRlIF8xOiB1MjQKfQoKLy8gdTY0CgpleHBvcnQgY2xhc3MgdTcyIHsKICBwcml2YXRlIF8wOiB1NjQKICBwcml2YXRlIF8xOiB1OAp9CgpleHBvcnQgY2xhc3MgdTgwIHsKICBwcml2YXRlIF8wOiB1NjQKICBwcml2YXRlIF8xOiB1MTYKfQoKZXhwb3J0IGNsYXNzIHU4OCB7CiAgcHJpdmF0ZSBfMDogdTY0CiAgcHJpdmF0ZSBfMTogdTI0Cn0KCmV4cG9ydCBjbGFzcyB1OTYgewogIHByaXZhdGUgXzA6IHU2NAogIHByaXZhdGUgXzE6IHUzMgp9CgpleHBvcnQgY2xhc3MgdTEwNCB7CiAgcHJpdmF0ZSBfMDogdTY0CiAgcHJpdmF0ZSBfMTogdTQwCn0KCmV4cG9ydCBjbGFzcyB1MTEyIHsKICBwcml2YXRlIF8wOiB1NjQKICBwcml2YXRlIF8xOiB1NDgKfQoKZXhwb3J0IGNsYXNzIHUxMjAgewogIHByaXZhdGUgXzA6IHUxMTIKICBwcml2YXRlIF8xOiB1OAp9CgovLyB1MTI4CgpleHBvcnQgY2xhc3MgdTEzNiB7CiAgcHJpdmF0ZSBfMDogdTEyMAogIHByaXZhdGUgXzE6IHUxNgp9CgpleHBvcnQgY2xhc3MgdTE0NCB7CiAgcHJpdmF0ZSBfMDogdTEzNgogIHByaXZhdGUgXzE6IHU4Cn0KCmV4cG9ydCBjbGFzcyB1MTUyIHsKICBwcml2YXRlIF8wOiB1MTQ0CiAgcHJpdmF0ZSBfMTogdTgKfQoKZXhwb3J0IGNsYXNzIHUxNjAgewogIHByaXZhdGUgXzA6IHUxNTIKICBwcml2YXRlIF8xOiB1OAp9CgpleHBvcnQgY2xhc3MgdTE2OCB7CiAgcHJpdmF0ZSBfMDogdTE2MAogIHByaXZhdGUgXzE6IHU4Cn0KCmV4cG9ydCBjbGFzcyB1MTc2IHsKICBwcml2YXRlIF8wOiB1MTY4CiAgcHJpdmF0ZSBfMTogdTgKfQoKZXhwb3J0IGNsYXNzIHUxODQgewogIHByaXZhdGUgXzA6IHUxNzYKICBwcml2YXRlIF8xOiB1OAp9CgpleHBvcnQgY2xhc3MgdTE5MiB7CiAgcHJpdmF0ZSBfMDogdTE4NAogIHByaXZhdGUgXzE6IHU4Cn0K",
  "node_modules/as-bignum/assembly/globals.ts": "aW1wb3J0IHsgdTI1NiB9IGZyb20gJy4vaW50ZWdlcic7CmltcG9ydCB7IHUxMjggfSBmcm9tICcuL2ludGVnZXIvdTEyOCc7CgovLyB1c2VkIGZvciByZXR1cm5pbmcgcXVvdGllbnQgYW5kIHJlbWluZGVyIGZyb20gX19kaXZtb2QxMjgKQGxhenkgZXhwb3J0IHZhciBfX2Rpdm1vZF9xdW90X2hpOiB1NjQgPSAwOwpAbGF6eSBleHBvcnQgdmFyIF9fZGl2bW9kX3JlbV9sbzogIHU2NCA9IDA7CkBsYXp5IGV4cG9ydCB2YXIgX19kaXZtb2RfcmVtX2hpOiAgdTY0ID0gMDsKCi8vIHVzZWQgZm9yIHJldHVybmluZyBsb3cgYW5kIGhpZ2ggcGFydCBvZiBfX211bHE2NCwgX19tdWx0aTMgZXRjCkBsYXp5IGV4cG9ydCB2YXIgX19yZXMxMjhfaGk6IHU2NCA9IDA7Ci8vIHVzZWQgZm9yIHJldHVybmluZyAwIG9yIDEKQGxhenkgZXhwb3J0IHZhciBfX2NhcnJ5OiB1NjQgPSAwOwoKLyoqCiAqIENvbnZlcnQgMTI4LWJpdCB1bnNpZ25lZCBpbnRlZ2VyIHRvIDY0LWJpdCBmbG9hdAogKiBAcGFyYW0gIGxvIGxvd2VyICA2NC1iaXQgcGFydCBvZiB1bnNpZ25lZCAxMjgtYml0IGludGVnZXIKICogQHBhcmFtICBoaSBoaWdoZXIgNjQtYml0IHBhcnQgb2YgdW5zaWduZWQgMTI4LWJpdCBpbnRlZ2VyCiAqIEByZXR1cm4gICAgNjQtYml0IGZsb2F0IHJlc3VsdAogKi8KLy8gQHRzLWlnbm9yZTogZGVjb3JhdG9yCkBnbG9iYWwKZXhwb3J0IGZ1bmN0aW9uIF9fZmxvYXR1bnRpZGYobG86IHU2NCwgaGk6IHU2NCk6IGY2NCB7CiAgLy8gX19mbG9hdHVudGlkZiBwb3J0ZWQgZnJvbSBMTFZNIHNvdXJjZXMKICBpZiAoIShsbyB8IGhpKSkgcmV0dXJuIDAuMDsKCiAgdmFyIHYgID0gbmV3IHUxMjgobG8sIGhpKTsKICB2YXIgc2QgPSAxMjggLSBfX2NsejEyOChsbywgaGkpOwogIHZhciBlICA9IHNkIC0gMTsKCiAgaWYgKHNkID4gNTMpIHsKICAgIGlmIChzZCAhPSA1NSkgewogICAgICBpZiAoc2QgPT0gNTQpIHsKICAgICAgICB2ID0gdTEyOC5zaGwodiwgMSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdiA9IHUxMjgub3IoCiAgICAgICAgICB1MTI4LnNocih2LCBzZCAtIDU1KSwKICAgICAgICAgIHUxMjguZnJvbUJvb2wodTEyOC5hbmQodiwgdTEyOC5zaHIodTEyOC5NYXgsIDEyOCArIDU1IC0gc2QpKS50b0Jvb2woKSkKICAgICAgICApOwogICAgICB9CiAgICB9CgogICAgdi5sbyB8PSAodi5sbyAmIDQpID4+IDI7CiAgICB2LnByZUluYygpOwoKICAgIHYgPSB1MTI4LnNocih2LCAyKTsKCiAgICBpZiAodi5sbyAmICgxIDw8IDUzKSkgewogICAgICB2ID0gdTEyOC5zaHIodiwgMSk7CiAgICAgICsrZTsKICAgIH0KCiAgfSBlbHNlIHsKICAgIHYgPSB1MTI4LnNobCh2LCA1MyAtIHNkKTsKICB9CgogIHZhciB3OiB1NjQgPSB1MTI4LnNocih2LCAzMikubG8gJiAweDAwMEZGRkZGOwogIHZhciB1OiB1NjQgPSA8dTY0PigoKGUgKyAxMDIzKSA8PCAyMCkgfCB3KSA8PCAzMjsKICByZXR1cm4gcmVpbnRlcnByZXQ8ZjY0Pih1IHwgKHYubG8gJiAweEZGRkZGRkZGKSk7Cn0KCi8vIEB0cy1pZ25vcmU6IGRlY29yYXRvcgpAZ2xvYmFsCmV4cG9ydCBmdW5jdGlvbiBfX3VtdWxoNjQoYTogdTY0LCBiOiB1NjQpOiB1NjQgewogIHZhciB1ID0gYSAmIDB4RkZGRkZGRkY7IGEgPj49IDMyOwogIHZhciB2ID0gYiAmIDB4RkZGRkZGRkY7IGIgPj49IDMyOwoKICB2YXIgdXYgPSB1ICogdjsKICB2YXIgdXYgPSBhICogdiArICh1diA+PiAzMik7CiAgdmFyIHcwID0gdSAqIGIgKyAodXYgJiAweEZGRkZGRkZGKTsKICByZXR1cm4gYSAqIGIgKyAodXYgPj4gMzIpICsgKHcwID4+IDMyKTsKfQoKLy8gQHRzLWlnbm9yZTogZGVjb3JhdG9yCkBnbG9iYWwKZXhwb3J0IGZ1bmN0aW9uIF9fdW11bHE2NChhOiB1NjQsIGI6IHU2NCk6IHU2NCB7CiAgdmFyIHUgPSBhICYgMHhGRkZGRkZGRjsgYSA+Pj0gMzI7CiAgdmFyIHYgPSBiICYgMHhGRkZGRkZGRjsgYiA+Pj0gMzI7CgogIHZhciB1diA9IHUgKiB2OwogIHZhciB3MCA9IHV2ICYgMHhGRkZGRkZGRjsKICB1diA9IGEgKiB2ICsgKHV2ID4+IDMyKTsKICB2YXIgdzEgPSB1diA+PiAzMjsKICB1diA9IHUgKiBiICsgKHV2ICYgMHhGRkZGRkZGRik7CgogIF9fcmVzMTI4X2hpID0gYSAqIGIgKyB3MSArICh1diA+PiAzMik7CiAgcmV0dXJuICh1diA8PCAzMikgfCB3MDsKfQoKLy8gX191bXVsNjRIb3AgY29tcHV0ZXMgKGhpICogMl42NCArIGxvKSA9IHogKyAoeCAqIHkpCi8vIEB0cy1pZ25vcmU6IGRlY29yYXRvcgpAaW5saW5lCmV4cG9ydCBmdW5jdGlvbiBfX3VtdWw2NEhvcCh6OiB1NjQsIHg6IHU2NCwgeTogdTY0KTogdTY0IHsKICB2YXIgbG8gPSBfX3VtdWxxNjQoeCwgeSk7CiAgbG8gPSBfX3VhZGQ2NChsbywgeik7CiAgdmFyIGhpID0gX19yZXMxMjhfaGkgK19fY2Fycnk7CiAgX19yZXMxMjhfaGkgPSBoaTsKICByZXR1cm4gbG8KfQoKLy8gX191bXVsNjRTdGVwIGNvbXB1dGVzIChoaSAqIDJeNjQgKyBsbykgPSB6ICsgKHggKiB5KSArIGNhcnJ5LgovLyBAdHMtaWdub3JlOiBkZWNvcmF0b3IKQGlubGluZQpleHBvcnQgZnVuY3Rpb24gX191bXVsNjRTdGVwKHo6IHU2NCwgeDogdTY0LCB5OiB1NjQsIGNhcnJ5OiB1NjQpOiB1NjQgewogIHZhciBsbyA9IF9fdW11bHE2NCh4LCB5KQogIGxvID0gX191YWRkNjQobG8sIGNhcnJ5KTsKICB2YXIgaGkgPSBfX3VhZGQ2NChfX3JlczEyOF9oaSwgMCwgX19jYXJyeSk7CiAgbG8gPSBfX3VhZGQ2NChsbywgeik7CiAgaGkgKz0gX19jYXJyeTsKICBfX3JlczEyOF9oaSA9IGhpOwogIHJldHVybiBsbwp9CgovLyBfX3VhZGQ2NCByZXR1cm5zIHRoZSBzdW0gd2l0aCBjYXJyeSBvZiB4LCB5IGFuZCBjYXJyeTogc3VtID0geCArIHkgKyBjYXJyeS4KLy8gVGhlIGNhcnJ5IGlucHV0IG11c3QgYmUgMCBvciAxOyBvdGhlcndpc2UgdGhlIGJlaGF2aW9yIGlzIHVuZGVmaW5lZC4KLy8gVGhlIGNhcnJ5T3V0IG91dHB1dCBpcyBndWFyYW50ZWVkIHRvIGJlIDAgb3IgMS4KLy8gQHRzLWlnbm9yZTogZGVjb3JhdG9yCkBpbmxpbmUKZXhwb3J0IGZ1bmN0aW9uIF9fdWFkZDY0KHg6IHU2NCwgeTogdTY0LCBjYXJyeTogdTY0ID0gMCk6IHU2NCB7CiAgdmFyIHN1bSA9IHggKyB5ICsgY2FycnkKICAvLyAvLyBUaGUgc3VtIHdpbGwgb3ZlcmZsb3cgaWYgYm90aCB0b3AgYml0cyBhcmUgc2V0ICh4ICYgeSkgb3IgaWYgb25lIG9mIHRoZW0KICAvLyAvLyBpcyAoeCB8IHkpLCBhbmQgYSBjYXJyeSBmcm9tIHRoZSBsb3dlciBwbGFjZSBoYXBwZW5lZC4gSWYgc3VjaCBhIGNhcnJ5CiAgLy8gLy8gaGFwcGVucywgdGhlIHRvcCBiaXQgd2lsbCBiZSAxICsgMCArIDEgPSAwICgmIH5zdW0pLgogIF9fY2FycnkgPSAoKHggJiB5KSB8ICgoeCB8IHkpICYgfnN1bSkpID4+PiA2MwogIHJldHVybiBzdW07Cgp9CgovLyB1MjU2ICogdTI1NiA9PiB1MjU2IGltcGxlbWVudGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2hvbGltYW4vdWludDI1NgovLyBAdHMtaWdub3JlOiBkZWNvcmF0b3IKQGdsb2JhbApleHBvcnQgZnVuY3Rpb24gX19tdWwyNTYoeDA6IHU2NCwgeDE6IHU2NCwgeDI6IHU2NCwgeDM6IHU2NCwgeTA6IHU2NCwgeTE6IHU2NCwgeTI6IHU2NCwgeTM6IHU2NCk6IHUyNTYgewogIHZhciBsbzEgPSBfX3VtdWxxNjQoeDAsIHkwKTsKICB2YXIgcmVzMSA9IF9fdW11bDY0SG9wKF9fcmVzMTI4X2hpLCB4MSwgeTApOwogIHZhciByZXMyID0gX191bXVsNjRIb3AoX19yZXMxMjhfaGksIHgyLCB5MCk7CiAgdmFyIHJlczMgPSB4MyAqIHkwICsgX19yZXMxMjhfaGk7CgogIHZhciBsbzIgPSBfX3VtdWw2NEhvcChyZXMxLCB4MCwgeTEpOwogIHJlczIgPSBfX3VtdWw2NFN0ZXAocmVzMiwgeDEsIHkxLCBfX3JlczEyOF9oaSk7CiAgcmVzMyArPSB4MiAqIHkxICsgX19yZXMxMjhfaGk7CgogIHZhciBoaTEgPSBfX3VtdWw2NEhvcChyZXMyLCB4MCwgeTIpOwogIHJlczMgKz0geDEgKiB5MiArIF9fcmVzMTI4X2hpCgogIHZhciBoaTIgPSBfX3VtdWw2NEhvcChyZXMzLCB4MCwgeTMpOwoKICByZXR1cm4gbmV3IHUyNTYobG8xLCBsbzIsIGhpMSwgaGkyKTsKfQoKLy8gQHRzLWlnbm9yZTogZGVjb3JhdG9yCkBnbG9iYWwKZXhwb3J0IGZ1bmN0aW9uIF9fbXVsdGkzKGFsOiB1NjQsIGFoOiB1NjQsIGJsOiB1NjQsIGJoOiB1NjQpOiB1NjQgewogIHZhciB1ID0gYWwsIHYgPSBibDsKICB2YXIgdzogdTY0LCBrOiB1NjQ7CgogIHZhciB1MSA9IHUgJiAweEZGRkZGRkZGOyB1ID4+PSAzMjsKICB2YXIgdjEgPSB2ICYgMHhGRkZGRkZGRjsgdiA+Pj0gMzI7CiAgdmFyIHQgID0gdTEgKiB2MTsKICB2YXIgdzEgPSB0ICYgMHhGRkZGRkZGRjsKCiAgdCA9IHUgKiB2MSArICh0ID4+IDMyKTsKICBrID0gdCAmIDB4RkZGRkZGRkY7CiAgdyA9IHQgPj4gMzI7CiAgdCA9IHUxICogdiArIGs7CgogIHZhciBsbyAgPSAodCA8PCAzMikgfCB3MTsKICB2YXIgaGkgID0gdSAgKiB2ICsgdzsKICAgICAgaGkgKz0gYWggKiBibDsKICAgICAgaGkgKz0gYWwgKiBiaDsKICAgICAgaGkgKz0gdCA+PiAzMjsKCiAgX19yZXMxMjhfaGkgPSBoaTsKICByZXR1cm4gbG87Cn0KCi8vIEB0cy1pZ25vcmU6IGRlY29yYXRvcgpAZ2xvYmFsCmV4cG9ydCBmdW5jdGlvbiBfX2Zsb2F0dW50ZmRpKHZhbHVlOiBmNjQpOiB1NjQgewogIHZhciB1ID0gcmVpbnRlcnByZXQ8dTY0Pih2YWx1ZSk7CgogIC8vIGlmICh2YWx1ZSA8IC0xLjcwMTQxMTgzNDYwNDZlMzgpIHsgLy8gLSgyXjEyNy0xKQogIGlmICh2YWx1ZSA8IHJlaW50ZXJwcmV0PGY2ND4oMHhDN0YwMDAwMDAwMDAwMDAwKSkgeyAvLyAtKDJeMTI4LTEpCiAgICAvLyBfX2Zsb2F0X3UxMjhfaGkgPSA8dTY0Pi0xOyAvLyBmb3IgaTEyOAogICAgX19yZXMxMjhfaGkgPSAwOwogICAgLy8gb3ZlcmZsb3cgbmVnYXRpdmUKICAgIHJldHVybiAwOwogICAgLy8gfSBlbHNlIGlmICh2YWx1ZSA8IC05LjIyMzM3MjAzNjg1NDdlMTgpIHsgLy8gLTJeNjMtMSAvLyBmb3IgaTEyOAogIH0gZWxzZSBpZiAodmFsdWUgPCByZWludGVycHJldDxmNjQ+KDB4QzNGMDAwMDAwMDAwMDAwMCkpIHsgLy8gLy8gLSgyXjY0LTEpCiAgICBsZXQgbG86IHU2NCwgaGk6IHU2NCwgbTogdTY0OwoKICAgIG0gPSAodSAmIDB4MDAwRkZGRkZGRkZGRkZGRikgfCAoMSA8PCA1Mik7CiAgICB1ID0gKHUgJiAweDdGRkZGRkZGRkZGRkZGRkYpID4+IDUyOwoKICAgIHUgLT0gMTA3NTsKICAgIGlmICh1ID4gNjQpIHsKICAgICAgbG8gPSAwOwogICAgICBoaSA9IG0gPDwgKHUgLSA2NCk7CiAgICB9IGVsc2UgewogICAgICBsbyA9IG0gPDwgdTsKICAgICAgaGkgPSBtID4+ICg2NCAtIHUpOwogICAgfQogICAgX19yZXMxMjhfaGkgPSB+aGk7CiAgICByZXR1cm4gfmxvOwogICAgLy8gfSBlbHNlIGlmICh2YWx1ZSA8IDkuMjIzMzcyMDM2ODU0N2UxOCkgeyAvLyAyXjYzLTEgLy8gZm9yIGkxMjgKICB9IGVsc2UgaWYgKHZhbHVlIDwgcmVpbnRlcnByZXQ8ZjY0PigweDQzRjAwMDAwMDAwMDAwMDApKSB7IC8vIDJeNjQtMQogICAgLy8gX19mbG9hdF91MTI4X2hpID0gKHZhbHVlIDwgMCkgPyAtMSA6IDA7IC8vIGZvciBpbnQKICAgIF9fcmVzMTI4X2hpID0gMDsKICAgIC8vIGZpdCBpbiBhIHU2NAogICAgcmV0dXJuIDx1NjQ+dmFsdWU7CiAgICAvLyB9IGVsc2UgaWYgKHZhbHVlIDwgMS43MDE0MTE4MzQ2MDQ2ZTM4KSB7CiAgfSBlbHNlIGlmICh2YWx1ZSA8IHJlaW50ZXJwcmV0PGY2ND4oMHg0N0YwMDAwMDAwMDAwMDAwKSkgeyAvLyAyXjEyOC0xCiAgICBsZXQgbG86IHU2NCwgaGk6IHU2NCwgbTogdTY0OwoKICAgIG0gPSAodSAmIDB4MDAwRkZGRkZGRkZGRkZGRikgfCAoMSA8PCA1Mik7CiAgICB1ID0gKHUgJiAweDdGRkZGRkZGRkZGRkZGRkYpID4+IDUyOwogICAgdSAtPSAxMDc1OwogICAgaWYgKHUgPiA2NCkgewogICAgICBsbyA9IDA7CiAgICAgIGhpID0gbSA8PCAodSAtIDY0KTsKICAgIH0gZWxzZSB7CiAgICAgIGxvID0gbSA8PCB1OwogICAgICBoaSA9IG0gPj4gKDY0IC0gdSk7CiAgICB9CiAgICBfX3JlczEyOF9oaSA9IGhpOwogICAgcmV0dXJuIGxvOwogIH0gZWxzZSB7CiAgICAvLyBvdmVyZmxvdyBwb3NpdGl2ZQogICAgX19yZXMxMjhfaGkgPSA8dTY0Pi0xOyAvLyAweDdGRkZGRkZGRkZGRkZGRkYgZm9yIGkxMjgKICAgIHJldHVybiA8dTY0Pi0xOwogIH0KfQoKLy8gQHRzLWlnbm9yZTogZGVjb3JhdG9yCkBnbG9iYWwgQGlubGluZQpleHBvcnQgZnVuY3Rpb24gX19jbHoxMjgobG86IHU2NCwgaGk6IHU2NCk6IGkzMiB7CiAgdmFyIG1hc2s6IHU2NCA9IDxpNjQ+KGhpIF4gKGhpIC0gMSkpID4+IDYzOwogIHJldHVybiA8aTMyPmNseigoaGkgJiB+bWFzaykgfCAobG8gJiBtYXNrKSkgKyAoPGkzMj5tYXNrICYgNjQpOwp9CgovLyBAdHMtaWdub3JlOiBkZWNvcmF0b3IKQGdsb2JhbCBAaW5saW5lCmV4cG9ydCBmdW5jdGlvbiBfX2N0ejEyOChsbzogdTY0LCBoaTogdTY0KTogaTMyIHsKICB2YXIgbWFzazogdTY0ID0gPGk2ND4obG8gXiAobG8gLSAxKSkgPj4gNjM7CiAgcmV0dXJuIDxpMzI+Y3R6KChoaSAmIG1hc2spIHwgKGxvICYgfm1hc2spKSArICg8aTMyPm1hc2sgJiA2NCk7Cn0KCi8vIEB0cy1pZ25vcmU6IGRlY29yYXRvcgpAZ2xvYmFsCmV4cG9ydCBmdW5jdGlvbiBfX3VkaXZtb2QxMjgoYWxvOiB1NjQsIGFoaTogdTY0LCBibG86IHU2NCwgYmhpOiB1NjQpOiB1NjQgewogIHZhciBiem4gPSBfX2NsejEyOChibG8sIGJoaSk7IC8vIE4KCiAgLy8gYiA9PSAwCiAgaWYgKGJ6biA9PSAxMjgpIHsKICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCJEaXZpc2lvbiBieSB6ZXJvIik7IC8vIGRpdmlzaW9uIGJ5IHplcm8KICB9CgogIC8vIHZhciBhem4gPSBfX2NsejEyOChhbG8sIGFoaSk7IC8vIE0KICB2YXIgYnR6ID0gX19jdHoxMjgoYmxvLCBiaGkpOyAvLyBOCgogIC8vIGEgPT0gMAogIGlmICghKGFsbyB8IGFoaSkpIHsKICAgIF9fZGl2bW9kX3F1b3RfaGkgPSAwOwogICAgX19kaXZtb2RfcmVtX2xvICA9IDA7CiAgICBfX2Rpdm1vZF9yZW1faGkgID0gMDsKICAgIHJldHVybiAwOwogIH0KCiAgLy8gYSAvIDEKICBpZiAoYnpuID09IDEyNykgewogICAgX19kaXZtb2RfcXVvdF9oaSA9IGFoaTsKICAgIF9fZGl2bW9kX3JlbV9sbyAgPSAwOwogICAgX19kaXZtb2RfcmVtX2hpICA9IDA7CiAgICByZXR1cm4gYWxvOwogIH0KCiAgLy8gYSA9PSBiCiAgaWYgKGFsbyA9PSBibG8gJiYgYWhpID09IGJoaSkgewogICAgX19kaXZtb2RfcXVvdF9oaSA9IDA7CiAgICBfX2Rpdm1vZF9yZW1fbG8gID0gMDsKICAgIF9fZGl2bW9kX3JlbV9oaSAgPSAwOwogICAgcmV0dXJuIDE7CiAgfQoKICAvLyBpZiAoYnR6ICsgYnpuID09IDEyNykgewogIC8vICAgLy8gVE9ETwogIC8vICAgLy8gX19kaXZtb2RfcXVvdCA9IGEgPj4gYnR6CiAgLy8gICAvLyBiKysKICAvLyAgIC8vIF9fZGl2bW9kX3JlbSA9IGEgJiBiCiAgLy8gICByZXR1cm47CiAgLy8gfQoKICBpZiAoIShhaGkgfCBiaGkpKSB7CiAgICBfX2Rpdm1vZF9xdW90X2hpID0gMDsKICAgIF9fZGl2bW9kX3JlbV9oaSAgPSAwOwogICAgLy8gaWYgYGIubG9gIGlzIHBvd2VyIG9mIHR3bwogICAgaWYgKCEoYmxvICYgKGJsbyAtIDEpKSkgewogICAgICBfX2Rpdm1vZF9yZW1fbG8gPSBhbG8gJiAoYmxvIC0gMSk7CiAgICAgIHJldHVybiBhbG8gPj4gYnR6OwogICAgfSBlbHNlIHsKICAgICAgbGV0IGRsbyA9IGFsbyAvIGJsbzsKICAgICAgX19kaXZtb2RfcmVtX2xvID0gYWxvIC0gZGxvICogYmxvOwogICAgICByZXR1cm4gZGxvOwogICAgfQogIH0KCiAgLy8gaWYgYi5sbyA9PSAwIGFuZCBgYi5oaWAgaXMgcG93ZXIgb2YgdHdvCiAgLy8gaWYgKCFibG8gJiYgIShiaGkgJiAoYmhpIC0gMSkpKSB7CiAgLy8gICBfX2Rpdm1vZF9yZW0gPSAwOwoKICAvLyAgIC8vIFRPRE8KCiAgLy8gICByZXR1cm4gMDsKICAvLyB9CgogIC8vIHZhciBkaWZmOiBpNjQgPSBhaGkgLSBiaGk7CiAgLy8gdmFyIGNtcCA9IDxpMzI+KGRpZmYgIT0gMCA/IGRpZmYgOiBhbG8gLSBibG8pOyAvLyBUT0RPIG9wdGltaXplIHRoaXMKCiAgLy8gaWYgKGNtcCA8PSAwKSB7CiAgLy8gICBfX2Rpdm1vZF9xdW90X2hpID0gMDsKICAvLyAgIF9fZGl2bW9kX3JlbSAgICAgPSAwOwogIC8vICAgcmV0dXJuIHU2NChjbXAgPT0gMCk7CiAgLy8gfQoKICAvLyBpZiAoYnpuIC0gYXpuIDw9IDUpIHsKICAvLyAgIC8vIFRPRE8KICAvLyAgIC8vIGZhc3QgcGF0aAogIC8vICAgcmV0dXJuIF9fdWRpdm1vZDEyOGNvcmUoYWxvLCBhaGksIGJsbywgYmhpKTsKICAvLyB9CiAgcmV0dXJuIF9fdWRpdm1vZDEyOGNvcmUoYWxvLCBhaGksIGJsbywgYmhpKTsKfQoKZnVuY3Rpb24gX191ZGl2bW9kMTI4Y29yZShhbG86IHU2NCwgYWhpOiB1NjQsIGJsbzogdTY0LCBiaGk6IHU2NCk6IHU2NCB7CiAgdmFyIGEgPSBuZXcgdTEyOChhbG8sIGFoaSk7CiAgdmFyIGIgPSBuZXcgdTEyOChibG8sIGJoaSk7CiAgLy8gZ2V0IGxlYWRpbmcgemVyb3MgZm9yIGxlZnQgYWxpZ25tZW50CiAgdmFyIGFseiA9IF9fY2x6MTI4KGFsbywgYWhpKTsKICB2YXIgYmx6ID0gX19jbHoxMjgoYmxvLCBiaGkpOwogIHZhciBvZmYgPSBibHogLSBhbHo7CiAgdmFyIG5iICA9IGIgPDwgb2ZmOwogIHZhciBxID0gdTEyOC5aZXJvOwogIHZhciBuID0gYS5jbG9uZSgpOwoKICAvLyBjcmVhdGUgYSBtYXNrIHdpdGggdGhlIGxlbmd0aCBvZiBiCiAgdmFyIG1hc2sgPSB1MTI4Lk9uZTsKICBtYXNrIDw8PSAxMjggLSBibHo7CiAgLS1tYXNrOwogIG1hc2sgPDw9IG9mZjsKCiAgdmFyIGkgPSAwOwogIHdoaWxlIChuID49IGIpIHsKICAgICsraTsKICAgIHEgPDw9IDE7CiAgICBpZiAoKG4gJiBtYXNrKSA+PSBuYikgewogICAgICArK3E7CiAgICAgIG4gLT0gbmI7CiAgICB9CgogICAgbWFzayB8PSBtYXNrID4+IDE7CiAgICBuYiA+Pj0gMTsKICB9CiAgcSA8PD0gKGJseiAtIGFseiAtIGkgKyAxKTsKCiAgX19kaXZtb2RfcXVvdF9oaSA9IHEuaGk7CiAgX19kaXZtb2RfcmVtX2xvICA9IG4ubG87CiAgX19kaXZtb2RfcmVtX2hpICA9IG4uaGk7CiAgcmV0dXJuIHEubG87Cn0KCi8vIEB0cy1pZ25vcmU6IGRlY29yYXRvcgpAZ2xvYmFsCmV4cG9ydCBmdW5jdGlvbiBfX3VkaXZtb2QxMjhfMTAobG86IHU2NCwgaGk6IHU2NCk6IHU2NCB7CiAgaWYgKCFoaSkgewogICAgX19kaXZtb2RfcXVvdF9oaSA9IDA7CiAgICBpZiAobG8gPCAxMCkgewogICAgICBfX2Rpdm1vZF9yZW1fbG8gPSAwOwogICAgICBfX2Rpdm1vZF9yZW1faGkgPSAwOwogICAgICByZXR1cm4gMDsKICAgIH0gZWxzZSB7CiAgICAgIGxldCBxbG8gPSBsbyAvIDEwOwogICAgICBfX2Rpdm1vZF9yZW1fbG8gPSBsbyAtIHFsbyAqIDEwOwogICAgICBfX2Rpdm1vZF9yZW1faGkgPSAwOwogICAgICByZXR1cm4gcWxvOwogICAgfQogIH0KCiAgdmFyIHE6IHUxMjgsIHI6IHUxMjg7CiAgdmFyIG4gPSBuZXcgdTEyOChsbywgaGkpOwoKICBxICA9IG4gPj4gMTsKICBxICs9IG4gPj4gMjsKICBxICs9IHEgPj4gNDsKICBxICs9IHEgPj4gODsKICBxICs9IHEgPj4gMTY7CiAgcSArPSBxID4+IDMyOwogIHEgKz0gdTEyOC5mcm9tVTY0KHEuaGkpOyAvLyBxID4+IDY0CiAgcSA+Pj0gMzsKICByID0gbiAtICgoKHEgPDwgMikgKyBxKSA8PCAxKTsKICBuID0gcSArIHUxMjguZnJvbUJvb2woci5sbyA+IDkpOwoKICBfX2Rpdm1vZF9xdW90X2hpID0gbi5oaTsKICBfX2Rpdm1vZF9yZW1fbG8gID0gci5sbzsKICBfX2Rpdm1vZF9yZW1faGkgID0gci5oaTsKICByZXR1cm4gbi5sbzsKfQo=",
  "node_modules/as-bignum/assembly/index.ts": "ZXhwb3J0ICogZnJvbSAiLi9pbnRlZ2VyIjsK",
  "node_modules/as-bignum/assembly/integer/i128.ts": "",
  "node_modules/as-bignum/assembly/integer/i256.ts": "aW1wb3J0IHsgdTI1NiB9IGZyb20gJy4vdTI1Nic7CgpleHBvcnQgY2xhc3MgaTI1NiB7CgogIEBpbmxpbmUgc3RhdGljIGdldCBaZXJvKCk6IGkyNTYgeyByZXR1cm4gbmV3IGkyNTYoKTsgfQogIEBpbmxpbmUgc3RhdGljIGdldCBPbmUoKTogIGkyNTYgeyByZXR1cm4gbmV3IGkyNTYoMSk7IH0KICBAaW5saW5lIHN0YXRpYyBnZXQgTWluKCk6ICBpMjU2IHsgcmV0dXJuIG5ldyBpMjU2KDAsIDAsIDAsIDB4ODAwMDAwMDAwMDAwMDAwMCk7IH0KICBAaW5saW5lIHN0YXRpYyBnZXQgTWF4KCk6ICBpMjU2IHsgcmV0dXJuIG5ldyBpMjU2KHU2NC5NQVhfVkFMVUUsIHU2NC5NQVhfVkFMVUUsIHU2NC5NQVhfVkFMVUUsIDB4N0ZGRkZGRkZGRkZGRkZGRik7IH0KCiAgY29uc3RydWN0b3IoCiAgICBwdWJsaWMgbG8xOiBpNjQgPSAwLAogICAgcHVibGljIGxvMjogaTY0ID0gMCwKICAgIHB1YmxpYyBoaTE6IGk2NCA9IDAsCiAgICBwdWJsaWMgaGkyOiBpNjQgPSAwLAogICkge30KCiAgQGlubGluZQogIGlzTmVnKCk6IGJvb2wgewogICAgcmV0dXJuIDxib29sPih0aGlzLmhpMiA+Pj4gNjMpOwogIH0KCiAgQGlubGluZQogIGlzWmVybygpOiBib29sIHsKICAgIHJldHVybiAhKHRoaXMubG8xIHwgdGhpcy5sbzIgfCB0aGlzLmhpMSB8IHRoaXMuaGkyKTsKICB9CgogIEBpbmxpbmUgQG9wZXJhdG9yLnByZWZpeCgnIScpCiAgc3RhdGljIGlzRW1wdHkodmFsdWU6IGkyNTYpOiBib29sIHsKICAgIHJldHVybiAhdmFsdWUuaXNaZXJvKCk7CiAgfQoKICAvKgogIEBpbmxpbmUKICBzdGF0aWMgYWJzKHZhbHVlOiBpMTI4KTogaTEyOCB7CiAgICByZXR1cm4gdmFsdWUgPCAwID8gdmFsdWUubmVnKCkgOiB2YWx1ZTsKICB9CiAgKi8KCiAgLy8gVE9ETwp9Cg==",
  "node_modules/as-bignum/assembly/integer/index.ts": "ZXhwb3J0ICogZnJvbSAiLi9pMTI4IjsKZXhwb3J0ICogZnJvbSAiLi91MTI4IjsKZXhwb3J0ICogZnJvbSAiLi91MjU2IjsKZXhwb3J0ICogZnJvbSAiLi9zYWZlIjsK",
  "node_modules/as-bignum/assembly/integer/safe/i128.ts": "aW1wb3J0IHsgaTEyOCBhcyBJMTI4IH0gZnJvbSAnLi4vaTEyOCc7CgoKY2xhc3MgaTEyOCBleHRlbmRzIEkxMjggewogIC8vIFRPRE8KfQoKZXhwb3J0IHsgaTEyOCBhcyBpMTI4U2FmZSB9Owo=",
  "node_modules/as-bignum/assembly/integer/safe/i256.ts": "aW1wb3J0IHsgaTI1NiBhcyBJMjU2IH0gZnJvbSAnLi4vaTI1Nic7CgovLyBleHBvcnQgbmFtZXNwYWNlIHNhZmUgewpjbGFzcyBpMjU2IGV4dGVuZHMgSTI1NiB7CiAgLy8gVE9ETwp9CgpleHBvcnQgeyBpMjU2IGFzIGkyNTZTYWZlIH07Cg==",
  "node_modules/as-bignum/assembly/integer/safe/i64.ts": "Ly8gVE9ETwo=",
  "node_modules/as-bignum/assembly/integer/safe/index.ts": "Ly8gZXhwb3J0ICogZnJvbSAiLi91NjQiOwpleHBvcnQgKiBmcm9tICIuL2kxMjgiOwpleHBvcnQgKiBmcm9tICIuL2kyNTYiOwovLyBleHBvcnQgKiBmcm9tICIuL3U2NCI7CmV4cG9ydCAqIGZyb20gIi4vdTEyOCI7CmV4cG9ydCAqIGZyb20gIi4vdTI1NiI7",
  "node_modules/as-bignum/assembly/integer/safe/u128.ts": "aW1wb3J0IHsgdTI1NlNhZmUgYXMgdTI1NiB9IGZyb20gJy4vdTI1Nic7CmltcG9ydCB7IGkxMjhTYWZlIH0gZnJvbSAnLi9pMTI4JzsKaW1wb3J0IHsgaTI1NlNhZmUgfSBmcm9tICcuL2kyNTYnOwppbXBvcnQgeyB1MTI4IGFzIFUxMjggfSBmcm9tICcuLi91MTI4JzsKaW1wb3J0IHsgdTI1NiBhcyBVMjU2IH0gZnJvbSAnLi4vdTI1Nic7CmltcG9ydCB7IGkxMjggYXMgSTEyOCB9IGZyb20gJy4uL2kxMjgnOwppbXBvcnQgeyBpMjU2IGFzIEkyNTYgfSBmcm9tICcuLi9pMjU2JzsKaW1wb3J0IHsgaXNQb3dlck92ZXJmbG93MTI4LCBhdG91MTI4IH0gZnJvbSAnLi4vLi4vdXRpbHMnOwoKLy8gQGV4dGVybmFsKCJzYWZlX3UxMjguc3BlYy5hcyIsICJsb2dTdHIiKQovLyBkZWNsYXJlIGZ1bmN0aW9uIGxvZ1N0cihzdHI6IHN0cmluZyk6IHZvaWQ7CgovLyBAZXh0ZXJuYWwoInNhZmVfdTEyOC5zcGVjLmFzIiwgImxvZ0Y2NCIpCi8vIGRlY2xhcmUgZnVuY3Rpb24gbG9nRjY0KHY6IGY2NCk6IHZvaWQ7CgovLyBleHBvcnQgbmFtZXNwYWNlIHNhZmUgewpjbGFzcyB1MTI4IGV4dGVuZHMgVTEyOCB7CgogIEBpbmxpbmUgc3RhdGljIGdldCBaZXJvKCk6IHUxMjggeyByZXR1cm4gbmV3IHUxMjgoKTsgfQogIEBpbmxpbmUgc3RhdGljIGdldCBPbmUoKTogIHUxMjggeyByZXR1cm4gbmV3IHUxMjgoMSk7IH0KICBAaW5saW5lIHN0YXRpYyBnZXQgTWluKCk6ICB1MTI4IHsgcmV0dXJuIG5ldyB1MTI4KCk7IH0KICBAaW5saW5lIHN0YXRpYyBnZXQgTWF4KCk6ICB1MTI4IHsgcmV0dXJuIG5ldyB1MTI4KC0xLCAtMSk7IH0KCiAgQGlubGluZQogIHN0YXRpYyBmcm9tU3RyaW5nKHZhbHVlOiBzdHJpbmcsIHJhZGl4OiBpMzIgPSAxMCk6IHUxMjggewogICAgcmV0dXJuIGNoYW5nZXR5cGU8dTEyOD4oYXRvdTEyOCh2YWx1ZSwgcmFkaXgpKTsKICB9CgogIEBpbmxpbmUKICBzdGF0aWMgZnJvbUkyNTYodmFsdWU6IEkyNTYpOiB1MTI4IHsKICAgIHJldHVybiBjaGFuZ2V0eXBlPHUxMjg+KFUxMjguZnJvbUkyNTYodmFsdWUpKTsKICB9CgogIEBpbmxpbmUKICBzdGF0aWMgZnJvbUkyNTZTYWZlKHZhbHVlOiBpMjU2U2FmZSk6IHUxMjggewogICAgcmV0dXJuIGNoYW5nZXR5cGU8dTEyOD4oVTEyOC5mcm9tSTI1Nih2YWx1ZSkpOwogIH0KCiAgQGlubGluZQogIHN0YXRpYyBmcm9tVTI1Nih2YWx1ZTogdTI1Nik6IHUxMjggewogICAgcmV0dXJuIGNoYW5nZXR5cGU8dTEyOD4oVTEyOC5mcm9tVTI1Nih2YWx1ZSkpOwogIH0KCiAgQGlubGluZQogIHN0YXRpYyBmcm9tSTEyOCh2YWx1ZTogSTEyOCk6IHUxMjggewogICAgcmV0dXJuIGNoYW5nZXR5cGU8dTEyOD4oVTEyOC5mcm9tSTEyOCh2YWx1ZSkpOwogIH0KCiAgQGlubGluZQogIHN0YXRpYyBmcm9tSTEyOFNhZmUodmFsdWU6IGkxMjhTYWZlKTogdTEyOCB7CiAgICByZXR1cm4gY2hhbmdldHlwZTx1MTI4PihVMTI4LmZyb21JMTI4KHZhbHVlKSk7CiAgfQoKICBAaW5saW5lCiAgc3RhdGljIGZyb21VMTI4KHZhbHVlOiB1MTI4KTogdTEyOCB7CiAgICByZXR1cm4gY2hhbmdldHlwZTx1MTI4PihVMTI4LmZyb21VMTI4KHZhbHVlKSk7CiAgfQoKICBAaW5saW5lCiAgc3RhdGljIGZyb21JNjQodmFsdWU6IGk2NCk6IHUxMjggewogICAgcmV0dXJuIGNoYW5nZXR5cGU8dTEyOD4oVTEyOC5mcm9tSTY0KHZhbHVlKSk7CiAgfQoKICBAaW5saW5lCiAgc3RhdGljIGZyb21VNjQodmFsdWU6IHU2NCk6IHUxMjggewogICAgcmV0dXJuIGNoYW5nZXR5cGU8dTEyOD4oVTEyOC5mcm9tVTY0KHZhbHVlKSk7CiAgfQoKICBAaW5saW5lCiAgc3RhdGljIGZyb21GNjQodmFsdWU6IGY2NCk6IHUxMjggewogICAgcmV0dXJuIGNoYW5nZXR5cGU8dTEyOD4oVTEyOC5mcm9tRjY0KHZhbHVlKSk7CiAgfQoKICBAaW5saW5lCiAgc3RhdGljIGZyb21GMzIodmFsdWU6IGYzMik6IHUxMjggewogICAgcmV0dXJuIGNoYW5nZXR5cGU8dTEyOD4oVTEyOC5mcm9tRjMyKHZhbHVlKSk7CiAgfQoKICBAaW5saW5lCiAgc3RhdGljIGZyb21JMzIodmFsdWU6IGkzMik6IHUxMjggewogICAgcmV0dXJuIGNoYW5nZXR5cGU8dTEyOD4oVTEyOC5mcm9tSTMyKHZhbHVlKSk7CiAgfQoKICBAaW5saW5lCiAgc3RhdGljIGZyb21VMzIodmFsdWU6IHUzMik6IHUxMjggewogICAgcmV0dXJuIGNoYW5nZXR5cGU8dTEyOD4oVTEyOC5mcm9tVTMyKHZhbHVlKSk7CiAgfQoKICBAaW5saW5lCiAgc3RhdGljIGZyb21Cb29sKHZhbHVlOiBib29sKTogdTEyOCB7CiAgICByZXR1cm4gY2hhbmdldHlwZTx1MTI4PihVMTI4LmZyb21Cb29sKHZhbHVlKSk7CiAgfQoKICBAaW5saW5lCiAgc3RhdGljIGZyb21CaXRzKGxvMTogdTMyLCBsbzI6IHUzMiwgaGkxOiB1MzIsIGhpMjogdTMyKTogdTEyOCB7CiAgICByZXR1cm4gY2hhbmdldHlwZTx1MTI4PihVMTI4LmZyb21CaXRzKGxvMSwgbG8yLCBoaTEsIGhpMikpOwogIH0KCiAgQGlubGluZQogIHN0YXRpYyBmcm9tQnl0ZXM8VD4oYXJyYXk6IFQsIGJpZ0VuZGlhbjogYm9vbCA9IGZhbHNlKTogdTEyOCB7CiAgICByZXR1cm4gY2hhbmdldHlwZTx1MTI4PihVMTI4LmZyb21CeXRlczxUPihhcnJheSwgYmlnRW5kaWFuKSk7CiAgfQoKICBAaW5saW5lCiAgc3RhdGljIGZyb21CeXRlc0xFKGFycmF5OiB1OFtdKTogdTEyOCB7CiAgICByZXR1cm4gY2hhbmdldHlwZTx1MTI4PihVMTI4LmZyb21CeXRlc0xFKGFycmF5KSk7CiAgfQoKICBAaW5saW5lCiAgc3RhdGljIGZyb21CeXRlc0JFKGFycmF5OiB1OFtdKTogdTEyOCB7CiAgICByZXR1cm4gY2hhbmdldHlwZTx1MTI4PihVMTI4LmZyb21CeXRlc0JFKGFycmF5KSk7CiAgfQoKICBAaW5saW5lCiAgc3RhdGljIGZyb21VaW50OEFycmF5TEUoYXJyYXk6IFVpbnQ4QXJyYXkpOiB1MTI4IHsKICAgIHJldHVybiBjaGFuZ2V0eXBlPHUxMjg+KFUxMjguZnJvbVVpbnQ4QXJyYXlMRShhcnJheSkpOwogIH0KCiAgQGlubGluZQogIHN0YXRpYyBmcm9tVWludDhBcnJheUJFKGFycmF5OiBVaW50OEFycmF5KTogdTEyOCB7CiAgICByZXR1cm4gY2hhbmdldHlwZTx1MTI4PihVMTI4LmZyb21VaW50OEFycmF5QkUoYXJyYXkpKTsKICB9CgogIC8qKgogICAqIENyZWF0ZSAxMjgtYml0IHVuc2lnbmVkIGludGVnZXIgZnJvbSBnZW5lcmljIHR5cGUgVAogICAqIEBwYXJhbSAgdmFsdWUKICAgKiBAcmV0dXJucyAxMjgtYml0IHVuc2lnbmVkIGludGVnZXIKICAgKi8KICBAaW5saW5lCiAgc3RhdGljIGZyb208VD4odmFsdWU6IFQpOiB1MTI4IHsKICAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgYm9vbCkgICAgICAgcmV0dXJuIHUxMjguZnJvbVU2NCg8dTY0PnZhbHVlKTsKICAgIGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgaTgpICAgICAgICAgcmV0dXJuIHUxMjguZnJvbUk2NCg8aTY0PnZhbHVlKTsKICAgIGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgdTgpICAgICAgICAgcmV0dXJuIHUxMjguZnJvbVU2NCg8dTY0PnZhbHVlKTsKICAgIGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgaTE2KSAgICAgICAgcmV0dXJuIHUxMjguZnJvbUk2NCg8aTY0PnZhbHVlKTsKICAgIGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgdTE2KSAgICAgICAgcmV0dXJuIHUxMjguZnJvbVU2NCg8dTY0PnZhbHVlKTsKICAgIGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgaTMyKSAgICAgICAgcmV0dXJuIHUxMjguZnJvbUk2NCg8aTY0PnZhbHVlKTsKICAgIGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgdTMyKSAgICAgICAgcmV0dXJuIHUxMjguZnJvbVU2NCg8dTY0PnZhbHVlKTsKICAgIGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgaTY0KSAgICAgICAgcmV0dXJuIHUxMjguZnJvbUk2NCg8aTY0PnZhbHVlKTsKICAgIGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgdTY0KSAgICAgICAgcmV0dXJuIHUxMjguZnJvbVU2NCg8dTY0PnZhbHVlKTsKICAgIGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgZjMyKSAgICAgICAgcmV0dXJuIHUxMjguZnJvbUY2NCg8ZjY0PnZhbHVlKTsKICAgIGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgZjY0KSAgICAgICAgcmV0dXJuIHUxMjguZnJvbUY2NCg8ZjY0PnZhbHVlKTsKICAgIGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgSTEyOCkgICAgICAgcmV0dXJuIHUxMjguZnJvbUkxMjgoPEkxMjg+dmFsdWUpOwogICAgZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBpMTI4U2FmZSkgICByZXR1cm4gdTEyOC5mcm9tSTEyOCg8aTEyOFNhZmU+dmFsdWUpOwogICAgZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiB1MTI4KSAgICAgICByZXR1cm4gdTEyOC5mcm9tVTEyOCg8dTEyOD52YWx1ZSk7CiAgICBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFUxMjgpICAgICAgIHJldHVybiB1MTI4LmZyb21VMTI4KDxVMTI4PnZhbHVlKTsKICAgIGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgSTI1NikgICAgICAgcmV0dXJuIHUxMjguZnJvbUkxMjgoPEkyNTY+dmFsdWUpOwogICAgZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBpMjU2U2FmZSkgICByZXR1cm4gdTEyOC5mcm9tSTI1Nig8aTI1NlNhZmU+dmFsdWUpOwogICAgZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiB1MjU2KSAgICAgICByZXR1cm4gdTEyOC5mcm9tVTI1Nig8dTI1Nj52YWx1ZSk7CiAgICBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIHU4W10pICAgICAgIHJldHVybiB1MTI4LmZyb21CeXRlcyg8dThbXT52YWx1ZSk7CiAgICBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHJldHVybiB1MTI4LmZyb21CeXRlcyg8VWludDhBcnJheT52YWx1ZSk7CiAgICBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFN0cmluZykgICAgIHJldHVybiB1MTI4LmZyb21TdHJpbmcoPHN0cmluZz52YWx1ZSk7CiAgICBlbHNlIHRocm93IG5ldyBUeXBlRXJyb3IoIlVuc3VwcG9ydGVkIGdlbmVyaWMgdHlwZSIpOwogIH0KCiAgQGlubGluZSBAb3BlcmF0b3IoJ3wnKQogIHN0YXRpYyBvcihhOiB1MTI4LCBiOiB1MTI4KTogdTEyOCB7CiAgICByZXR1cm4gY2hhbmdldHlwZTx1MTI4PihVMTI4Lm9yKGEsIGIpKTsKICB9CgogIEBpbmxpbmUgQG9wZXJhdG9yKCdeJykKICBzdGF0aWMgeG9yKGE6IHUxMjgsIGI6IHUxMjgpOiB1MTI4IHsKICAgIHJldHVybiBjaGFuZ2V0eXBlPHUxMjg+KFUxMjgueG9yKGEsIGIpKTsKICB9CgogIEBpbmxpbmUgQG9wZXJhdG9yKCcmJykKICBzdGF0aWMgYW5kKGE6IHUxMjgsIGI6IHUxMjgpOiB1MTI4IHsKICAgIHJldHVybiBjaGFuZ2V0eXBlPHUxMjg+KFUxMjguYW5kKGEsIGIpKTsKICB9CgogIEBpbmxpbmUgQG9wZXJhdG9yKCc8PCcpCiAgc3RhdGljIHNobCh2YWx1ZTogdTEyOCwgc2hpZnQ6IGkzMik6IHUxMjggewogICAgcmV0dXJuIGNoYW5nZXR5cGU8dTEyOD4oVTEyOC5zaGwodmFsdWUsIHNoaWZ0KSk7CiAgfQoKICBAaW5saW5lIEBvcGVyYXRvcignPj4nKQogIHN0YXRpYyBzaHIodmFsdWU6IHUxMjgsIHNoaWZ0OiBpMzIpOiB1MTI4IHsKICAgcmV0dXJuIGNoYW5nZXR5cGU8dTEyOD4oVTEyOC5zaHIodmFsdWUsIHNoaWZ0KSk7CiAgfQoKICBAaW5saW5lIEBvcGVyYXRvcignPj4+JykKICBzdGF0aWMgc2hyX3UodmFsdWU6IHUxMjgsIHNoaWZ0OiBpMzIpOiB1MTI4IHsKICAgIHJldHVybiB1MTI4LnNocih2YWx1ZSwgc2hpZnQpOwogIH0KCiAgQGlubGluZQogIHN0YXRpYyByb3RsKHZhbHVlOiB1MTI4LCBzaGlmdDogaTMyKTogdTEyOCB7CiAgICByZXR1cm4gY2hhbmdldHlwZTx1MTI4PihVMTI4LnJvdGwodmFsdWUsIHNoaWZ0KSk7CiAgfQoKICBAaW5saW5lCiAgc3RhdGljIHJvdHIodmFsdWU6IHUxMjgsIHNoaWZ0OiBpMzIpOiB1MTI4IHsKICAgIHJldHVybiBjaGFuZ2V0eXBlPHUxMjg+KFUxMjgucm90cih2YWx1ZSwgc2hpZnQpKTsKICB9CgogIEBvcGVyYXRvci5wcmVmaXgoJysrJykKICBwcmVJbmMoKTogdGhpcyB7CiAgICBpZiAoKHRoaXMubG8gJiB0aGlzLmhpKSA9PSA8dTY0Pi0xKSB7IC8vIGlmIHRoaXMgPT0gbWF4CiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPdmVyZmxvdyBkdXJpbmcgcHJlZml4IGluY3JlbWVudGluZycpOwogICAgfQogICAgc3VwZXIucHJlSW5jKCk7CiAgICByZXR1cm4gdGhpczsKICB9CgogIEBvcGVyYXRvci5wcmVmaXgoJy0tJykKICBwcmVEZWMoKTogdGhpcyB7CiAgICBpZiAoKHRoaXMubG8gfCB0aGlzLmhpKSA9PSAwKSB7IC8vIGlmIHRoaXMgPT0gMAogICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVW5kZXJmbG93IGR1cmluZyBwcmVmaXggZGVjcmVtZW50aW5nJyk7CiAgICB9CiAgICBzdXBlci5wcmVEZWMoKTsKICAgIHJldHVybiB0aGlzOwogIH0KCiAgQGlubGluZSBAb3BlcmF0b3IucG9zdGZpeCgnKysnKQogIHBvc3RJbmMoKTogdTEyOCB7CiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLnByZUluYygpOwogIH0KCiAgQGlubGluZSBAb3BlcmF0b3IucG9zdGZpeCgnLS0nKQogIHBvc3REZWMoKTogdTEyOCB7CiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLnByZURlYygpOwogIH0KCiAgQG9wZXJhdG9yKCcrJykKICBzdGF0aWMgYWRkKGE6IHUxMjgsIGI6IHUxMjgpOiB1MTI4IHsKICAgIHZhciBibCA9IGIubG87CiAgICB2YXIgbG8gPSBhLmxvICsgYmw7CiAgICB2YXIgYyAgPSB1NjQobG8gPCBibCk7CiAgICB2YXIgeCAgPSBhLmhpOwogICAgdmFyIHkgID0gYi5oaTsKICAgIHZhciBoaSA9IHggKyB5ICsgYzsKICAgIGlmICgoKGhpIF4geCkgJiAoaGkgXiB5KSkgPCBjKSB7CiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPdmVyZmxvdyBkdXJpbmcgYWRkaXNpb24nKTsKICAgIH0KICAgIHJldHVybiBuZXcgdTEyOChsbywgaGkpOwogIH0KCiAgQG9wZXJhdG9yKCctJykKICBzdGF0aWMgc3ViKGE6IHUxMjgsIGI6IHUxMjgpOiB1MTI4IHsKICAgIGlmIChhIDwgYikgdGhyb3cgbmV3IFJhbmdlRXJyb3IoIlVuZGVyZmxvdyBkdXJpbmcgc3VidHJhY3Rpb24iKTsKICAgIHJldHVybiBjaGFuZ2V0eXBlPHUxMjg+KAogICAgICBVMTI4LnN1YihjaGFuZ2V0eXBlPFUxMjg+KGEpLCBjaGFuZ2V0eXBlPFUxMjg+KGIpKQogICAgKTsKICB9CgogIEBvcGVyYXRvcignKicpCiAgc3RhdGljIG11bChhOiB1MTI4LCBiOiB1MTI4KTogdTEyOCB7CiAgICBpZiAoYS5pc1plcm8oKSB8fCBiLmlzWmVybygpKSB7CiAgICAgIHJldHVybiB1MTI4Llplcm87CiAgICB9CiAgICB2YXIgcyA9IHUxMjguY2x6KGEpICsgdTEyOC5jbHooYik7CiAgICBpZiAocyA8IDEyNykgeyAvLyBkZWZlbml0ZWx5IG92ZXJmbG93CiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCJPdmVyZmxvdyBkdXJpbmcgbXVsdGlwbGljYXRpb24iKTsKICAgIH0KICAgIGlmIChzID09IDEyNykgeyAvLyB0aGlzIG1heSBvdmVyZmxvdyBvciBub3QuIE5lZWQgZXh0cmEgY2hlY2tzLgogICAgICAvLyBTZWUgSGFja2VyJ3MgRGVsaWdodCwgMm5kIEVkaXRpb24uIDLigJMxMyBPdmVyZmxvdyBEZXRlY3Rpb24KICAgICAgLy8gQHRzLWlnbm9yZQogICAgICBsZXQgdG1wID0gVTEyOC5tdWwoY2hhbmdldHlwZTxVMTI4PihhKSwgY2hhbmdldHlwZTxVMTI4PihiKSA+PiAxKTsKICAgICAgLy8gQHRzLWlnbm9yZQogICAgICBpZiAodG1wLmhpID4+PiA2MykgeyAvLyAoc2lnbmVkKXQgPCAwCiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoIk92ZXJmbG93IGR1cmluZyBtdWx0aXBsaWNhdGlvbiIpOwogICAgICB9CiAgICAgIC8vIEB0cy1pZ25vcmUKICAgICAgbGV0IHogPSB0bXAgPDwgMTsKICAgICAgaWYgKGIubG8gJiAxKSB7CiAgICAgICAgLy8gQHRzLWlnbm9yZQogICAgICAgIHogKz0gYTsKICAgICAgICAvLyBAdHMtaWdub3JlCiAgICAgICAgaWYgKHogPCBhKSB7CiAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigiT3ZlcmZsb3cgZHVyaW5nIG11bHRpcGxpY2F0aW9uIik7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBjaGFuZ2V0eXBlPHUxMjg+KHopOwogICAgfQogICAgcmV0dXJuIGNoYW5nZXR5cGU8dTEyOD4oCiAgICAgIFUxMjgubXVsKGNoYW5nZXR5cGU8VTEyOD4oYSksIGNoYW5nZXR5cGU8VTEyOD4oYikpCiAgICApOwogIH0KCiAgQGlubGluZSBAb3BlcmF0b3IoJy8nKQogIHN0YXRpYyBkaXYoYTogdTEyOCwgYjogdTEyOCk6IHUxMjggewogICAgcmV0dXJuIGNoYW5nZXR5cGU8dTEyOD4oVTEyOC5kaXYoYSwgYikpOwogIH0KCiAgQGlubGluZSBAb3BlcmF0b3IoJyoqJykKICBzdGF0aWMgcG93KGJhc2U6IHUxMjgsIGV4cG9uZW50OiBpMzIpOiB1MTI4IHsKICAgIGlmIChpc1Bvd2VyT3ZlcmZsb3cxMjgoYmFzZSwgZXhwb25lbnQpKSB7CiAgICAgIHRocm93IG5ldyBFcnJvcigiT3ZlcmZsb3cgZHVyaW5nIGV4cG9uZW50aWF0aW9uIik7CiAgICB9CiAgICByZXR1cm4gY2hhbmdldHlwZTx1MTI4PihVMTI4LnBvdyhjaGFuZ2V0eXBlPFUxMjg+KGJhc2UpLCBleHBvbmVudCkpOwogIH0KCiAgQGlubGluZSBAb3BlcmF0b3IoJyUnKQogIHN0YXRpYyByZW0oYTogdTEyOCwgYjogdTEyOCk6IHUxMjggewogICAgcmV0dXJuIGNoYW5nZXR5cGU8dTEyOD4oVTEyOC5yZW0oYSwgYikpOwogIH0KCiAgQGlubGluZQogIHN0YXRpYyBkaXYxMCh2YWx1ZTogdTEyOCk6IHUxMjggewogICAgcmV0dXJuIGNoYW5nZXR5cGU8dTEyOD4oVTEyOC5kaXYxMCh2YWx1ZSkpOwogIH0KCiAgQGlubGluZQogIHN0YXRpYyByZW0xMCh2YWx1ZTogdTEyOCk6IHUxMjggewogICAgcmV0dXJuIGNoYW5nZXR5cGU8dTEyOD4oVTEyOC5yZW0xMCh2YWx1ZSkpOwogIH0KCiAgLy8gY29tcHV0ZSBmbG9vcihzcXJ0KHgpKQogIEBpbmxpbmUKICBzdGF0aWMgc3FydCh2YWx1ZTogdTEyOCk6IHUxMjggewogICAgcmV0dXJuIGNoYW5nZXR5cGU8dTEyOD4oVTEyOC5zcXJ0KHZhbHVlKSk7CiAgfQoKICBAaW5saW5lCiAgc3RhdGljIG11bGRpdihudW1iZXI6IHUxMjgsIG51bWVyYXRvcjogdTEyOCwgZGVub21pbmF0b3I6IHUxMjgpOiB1MTI4IHsKICAgIC8vIFRPRE86IE5lZWQgaW1wbGVtZW50IG92ZXJmbG93IGNoZWNraW5nCiAgICByZXR1cm4gY2hhbmdldHlwZTx1MTI4PihVMTI4Lm11bGRpdihudW1iZXIsIG51bWVyYXRvciwgZGVub21pbmF0b3IpKTsKICB9CgogIEBpbmxpbmUKICB0b1VuY2hlY2tlZCgpOiBVMTI4IHsKICAgIHJldHVybiBjaGFuZ2V0eXBlPFUxMjg+KHRoaXMpOwogIH0KCiAgQGlubGluZQogIGFzPFQ+KCk6IFQgewogICAgdmFyIGR1bW15OiBUOwoKICAgICAgICAgaWYgKGR1bW15IGluc3RhbmNlb2YgYm9vbCkgICAgICAgcmV0dXJuIDxUPnRoaXMudG9Cb29sKCk7CiAgICBlbHNlIGlmIChkdW1teSBpbnN0YW5jZW9mIGk4KSAgICAgICAgIHJldHVybiA8VD50aGlzLnRvSTY0KCk7CiAgICBlbHNlIGlmIChkdW1teSBpbnN0YW5jZW9mIHU4KSAgICAgICAgIHJldHVybiA8VD50aGlzLnRvVTY0KCk7CiAgICBlbHNlIGlmIChkdW1teSBpbnN0YW5jZW9mIGkxNikgICAgICAgIHJldHVybiA8VD50aGlzLnRvSTY0KCk7CiAgICBlbHNlIGlmIChkdW1teSBpbnN0YW5jZW9mIHUxNikgICAgICAgIHJldHVybiA8VD50aGlzLnRvVTY0KCk7CiAgICBlbHNlIGlmIChkdW1teSBpbnN0YW5jZW9mIGkzMikgICAgICAgIHJldHVybiA8VD50aGlzLnRvSTY0KCk7CiAgICBlbHNlIGlmIChkdW1teSBpbnN0YW5jZW9mIGk2NCkgICAgICAgIHJldHVybiA8VD50aGlzLnRvSTY0KCk7CiAgICBlbHNlIGlmIChkdW1teSBpbnN0YW5jZW9mIHUzMikgICAgICAgIHJldHVybiA8VD50aGlzLnRvVTY0KCk7CiAgICBlbHNlIGlmIChkdW1teSBpbnN0YW5jZW9mIHU2NCkgICAgICAgIHJldHVybiA8VD50aGlzLnRvVTY0KCk7CiAgICBlbHNlIGlmIChkdW1teSBpbnN0YW5jZW9mIGYzMikgICAgICAgIHJldHVybiA8VD50aGlzLnRvRjY0KCk7CiAgICBlbHNlIGlmIChkdW1teSBpbnN0YW5jZW9mIGY2NCkgICAgICAgIHJldHVybiA8VD50aGlzLnRvRjY0KCk7CiAgICBlbHNlIGlmIChkdW1teSBpbnN0YW5jZW9mIGkxMjgpICAgICAgIHJldHVybiA8VD50aGlzLnRvSTEyOCgpOwogICAgZWxzZSBpZiAoZHVtbXkgaW5zdGFuY2VvZiB1MTI4KSAgICAgICByZXR1cm4gPFQ+dGhpczsKICAgIGVsc2UgaWYgKGR1bW15IGluc3RhbmNlb2YgVTEyOCkgICAgICAgcmV0dXJuIDxUPnRoaXMudG9VbmNoZWNrZWQoKTsKICAgIGVsc2UgaWYgKGR1bW15IGluc3RhbmNlb2YgdTI1NikgICAgICAgcmV0dXJuIDxUPnRoaXMudG9VMjU2KCk7CiAgICBlbHNlIGlmIChkdW1teSBpbnN0YW5jZW9mIFUyNTYpICAgICAgIHJldHVybiA8VD50aGlzLnRvVTI1NigpOwogICAgZWxzZSBpZiAoZHVtbXkgaW5zdGFuY2VvZiB1OFtdKSAgICAgICByZXR1cm4gPFQ+dGhpcy50b0J5dGVzKCk7CiAgICBlbHNlIGlmIChkdW1teSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHJldHVybiA8VD50aGlzLnRvVWludDhBcnJheSgpOwogICAgZWxzZSBpZiAoZHVtbXkgaW5zdGFuY2VvZiBTdHJpbmcpICAgICByZXR1cm4gPFQ+dGhpcy50b1N0cmluZygpOwogICAgZWxzZSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbnN1cHBvcnRlZCBnZW5lcmljIHR5cGUnKTsKICB9CgogIC8vCiAgLy8gdW5zaWduZWQgZGl2IGFuZCByZW0gYWxyZWFkeSBjb250YWluIHRyYXBzCiAgLy8KCiAgQGlubGluZQogIGNsb25lKCk6IHUxMjggewogICAgcmV0dXJuIG5ldyB1MTI4KHRoaXMubG8sIHRoaXMuaGkpOwogIH0KfQoKZXhwb3J0IHsgdTEyOCBhcyB1MTI4U2FmZSB9Owo=",
  "node_modules/as-bignum/assembly/integer/safe/u256.ts": "aW1wb3J0IHsgdTEyOFNhZmUgYXMgdTEyOCB9IGZyb20gJy4vdTEyOCc7CmltcG9ydCB7IHUxMjggYXMgVTEyOCB9IGZyb20gJy4uL3UxMjgnOwppbXBvcnQgeyB1MjU2IGFzIFUyNTYgfSBmcm9tICcuLi91MjU2JzsKCmNsYXNzIHUyNTYgZXh0ZW5kcyBVMjU2IHsKICBAaW5saW5lIHN0YXRpYyBnZXQgWmVybygpOiB1MjU2IHsKICAgIHJldHVybiBuZXcgdTI1NigpOwogIH0KICBAaW5saW5lIHN0YXRpYyBnZXQgT25lKCk6IHUyNTYgewogICAgcmV0dXJuIG5ldyB1MjU2KDEpOwogIH0KICBAaW5saW5lIHN0YXRpYyBnZXQgTWluKCk6IHUyNTYgewogICAgcmV0dXJuIG5ldyB1MjU2KCk7CiAgfQogIEBpbmxpbmUgc3RhdGljIGdldCBNYXgoKTogdTI1NiB7CiAgICByZXR1cm4gbmV3IHUyNTYoLTEsIC0xLCAtMSwgLTEpOwogIH0KCiAgQGlubGluZQogIHN0YXRpYyBmcm9tVTI1Nih2YWx1ZTogdTI1Nik6IHUyNTYgewogICAgcmV0dXJuIGNoYW5nZXR5cGU8dTI1Nj4oVTI1Ni5mcm9tVTI1Nih2YWx1ZSkpOwogIH0KCiAgQGlubGluZQogIHN0YXRpYyBmcm9tVTEyOCh2YWx1ZTogdTEyOCk6IHUyNTYgewogICAgcmV0dXJuIGNoYW5nZXR5cGU8dTI1Nj4oVTI1Ni5mcm9tVTEyOCh2YWx1ZSkpOwogIH0KCiAgQGlubGluZQogIHN0YXRpYyBmcm9tSTY0KHZhbHVlOiBpNjQpOiB1MjU2IHsKICAgIHJldHVybiBjaGFuZ2V0eXBlPHUyNTY+KFUyNTYuZnJvbUk2NCh2YWx1ZSkpOwogIH0KCiAgQGlubGluZQogIHN0YXRpYyBmcm9tVTY0KHZhbHVlOiB1NjQpOiB1MjU2IHsKICAgIHJldHVybiBjaGFuZ2V0eXBlPHUyNTY+KFUyNTYuZnJvbVU2NCh2YWx1ZSkpOwogIH0KCiAgQGlubGluZQogIHN0YXRpYyBmcm9tRjY0KHZhbHVlOiBmNjQpOiB1MjU2IHsKICAgIHJldHVybiBjaGFuZ2V0eXBlPHUyNTY+KFUyNTYuZnJvbUY2NCh2YWx1ZSkpOwogIH0KCiAgQGlubGluZQogIHN0YXRpYyBmcm9tRjMyKHZhbHVlOiBmMzIpOiB1MjU2IHsKICAgIHJldHVybiBjaGFuZ2V0eXBlPHUyNTY+KFUyNTYuZnJvbUYzMih2YWx1ZSkpOwogIH0KCiAgQGlubGluZQogIHN0YXRpYyBmcm9tSTMyKHZhbHVlOiBpMzIpOiB1MjU2IHsKICAgIHJldHVybiBjaGFuZ2V0eXBlPHUyNTY+KFUyNTYuZnJvbUkzMih2YWx1ZSkpOwogIH0KCiAgQGlubGluZQogIHN0YXRpYyBmcm9tVTMyKHZhbHVlOiB1MzIpOiB1MjU2IHsKICAgIHJldHVybiBjaGFuZ2V0eXBlPHUyNTY+KFUyNTYuZnJvbVUzMih2YWx1ZSkpOwogIH0KCiAgQGlubGluZQogIHN0YXRpYyBmcm9tQnl0ZXM8VD4oYXJyYXk6IFQsIGJpZ0VuZGlhbjogYm9vbCA9IGZhbHNlKTogdTI1NiB7CiAgICByZXR1cm4gY2hhbmdldHlwZTx1MjU2PihVMjU2LmZyb21CeXRlczxUPihhcnJheSwgYmlnRW5kaWFuKSk7CiAgfQoKICBAaW5saW5lCiAgc3RhdGljIGZyb21CeXRlc0xFKGFycmF5OiB1OFtdKTogdTI1NiB7CiAgICByZXR1cm4gY2hhbmdldHlwZTx1MjU2PihVMjU2LmZyb21CeXRlc0xFKGFycmF5KSk7CiAgfQoKICBAaW5saW5lCiAgc3RhdGljIGZyb21CeXRlc0JFKGFycmF5OiB1OFtdKTogdTI1NiB7CiAgICByZXR1cm4gY2hhbmdldHlwZTx1MjU2PihVMjU2LmZyb21CeXRlc0JFKGFycmF5KSk7CiAgfQoKICBAaW5saW5lCiAgc3RhdGljIGZyb21VaW50OEFycmF5TEUoYXJyYXk6IFVpbnQ4QXJyYXkpOiB1MjU2IHsKICAgIHJldHVybiBjaGFuZ2V0eXBlPHUyNTY+KFUyNTYuZnJvbVVpbnQ4QXJyYXlMRShhcnJheSkpOwogIH0KCiAgQGlubGluZQogIHN0YXRpYyBmcm9tVWludDhBcnJheUJFKGFycmF5OiBVaW50OEFycmF5KTogdTI1NiB7CiAgICByZXR1cm4gY2hhbmdldHlwZTx1MjU2PihVMjU2LmZyb21VaW50OEFycmF5QkUoYXJyYXkpKTsKICB9CgogIEBpbmxpbmUKICBzdGF0aWMgZnJvbTxUPih2YWx1ZTogVCk6IHUyNTYgewogICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBib29sKSAgICAgICByZXR1cm4gdTI1Ni5mcm9tVTY0KDx1NjQ+dmFsdWUpOwogICAgZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBpOCkgICAgICAgICByZXR1cm4gdTI1Ni5mcm9tSTY0KDxpNjQ+dmFsdWUpOwogICAgZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiB1OCkgICAgICAgICByZXR1cm4gdTI1Ni5mcm9tVTY0KDx1NjQ+dmFsdWUpOwogICAgZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBpMTYpICAgICAgICByZXR1cm4gdTI1Ni5mcm9tSTY0KDxpNjQ+dmFsdWUpOwogICAgZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiB1MTYpICAgICAgICByZXR1cm4gdTI1Ni5mcm9tVTY0KDx1NjQ+dmFsdWUpOwogICAgZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBpMzIpICAgICAgICByZXR1cm4gdTI1Ni5mcm9tSTY0KDxpNjQ+dmFsdWUpOwogICAgZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiB1MzIpICAgICAgICByZXR1cm4gdTI1Ni5mcm9tVTY0KDx1NjQ+dmFsdWUpOwogICAgZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBpNjQpICAgICAgICByZXR1cm4gdTI1Ni5mcm9tSTY0KDxpNjQ+dmFsdWUpOwogICAgZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiB1NjQpICAgICAgICByZXR1cm4gdTI1Ni5mcm9tVTY0KDx1NjQ+dmFsdWUpOwogICAgZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBmMzIpICAgICAgICByZXR1cm4gdTI1Ni5mcm9tRjY0KDxmNjQ+dmFsdWUpOwogICAgZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBmNjQpICAgICAgICByZXR1cm4gdTI1Ni5mcm9tRjY0KDxmNjQ+dmFsdWUpOwogICAgZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiB1MTI4KSAgICAgICByZXR1cm4gdTI1Ni5mcm9tVTEyOCg8dTEyOD52YWx1ZSk7CiAgICBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFUxMjgpICAgICAgIHJldHVybiB1MjU2LmZyb21VMTI4KDxVMTI4PnZhbHVlKTsKICAgIGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgVTI1NikgICAgICAgcmV0dXJuIHUyNTYuZnJvbVUyNTYoPFUyNTY+dmFsdWUpOwogICAgZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiB1MjU2KSAgICAgICByZXR1cm4gdTI1Ni5mcm9tVTI1Nig8dTI1Nj52YWx1ZSk7CiAgICBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIHU4W10pICAgICAgIHJldHVybiB1MjU2LmZyb21CeXRlcyg8dThbXT52YWx1ZSk7CiAgICBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHJldHVybiB1MjU2LmZyb21CeXRlcyg8VWludDhBcnJheT52YWx1ZSk7CiAgICBlbHNlIHRocm93IG5ldyBUeXBlRXJyb3IoIlVuc3VwcG9ydGVkIGdlbmVyaWMgdHlwZSIpOwogIH0KCiAgQG9wZXJhdG9yKCIrIikKICBzdGF0aWMgYWRkKGE6IHUyNTYsIGI6IHUyNTYpOiB1MjU2IHsKICAgIHZhciBsbzFhID0gYS5sbzEsCiAgICAgICAgbG8yYSA9IGEubG8yLAogICAgICAgIGhpMWEgPSBhLmhpMSwKICAgICAgICBoaTJhID0gYS5oaTI7CgogICAgdmFyIGxvMWIgPSBiLmxvMSwKICAgICAgICBsbzJiID0gYi5sbzIsCiAgICAgICAgaGkxYiA9IGIuaGkxLAogICAgICAgIGhpMmIgPSBiLmhpMjsKCiAgICAvLyBBZGRpdGlvbiBmb3IgdGhlIGxvd2VzdCBzZWdtZW50CiAgICB2YXIgbG8xID0gbG8xYSArIGxvMWI7CiAgICB2YXIgY3kgPSB1NjQobG8xIDwgbG8xYSk7IC8vIERldGVjdCBjYXJyeQoKICAgIC8vIEFkZGl0aW9uIGZvciB0aGUgc2Vjb25kIGxvd2VzdCBzZWdtZW50IHdpdGggY2FycnkKICAgIHZhciBsbzIgPSBsbzJhICsgbG8yYiArIGN5OwogICAgY3kgPSB1NjQobG8yIDwgbG8yYSB8fCAoY3kgPT0gMSAmJiBsbzIgPT0gbG8yYSkpOyAvLyBVcGRhdGUgY2FycnkKCiAgICAvLyBBZGRpdGlvbiBmb3IgdGhlIHNlY29uZCBoaWdoZXN0IHNlZ21lbnQgd2l0aCBjYXJyeQogICAgdmFyIGhpMSA9IGhpMWEgKyBoaTFiICsgY3k7CiAgICBjeSA9IHU2NChoaTEgPCBoaTFhIHx8IChjeSA9PSAxICYmIGhpMSA9PSBoaTFhKSk7IC8vIFVwZGF0ZSBjYXJyeQoKICAgIC8vIEFkZGl0aW9uIGZvciB0aGUgaGlnaGVzdCBzZWdtZW50IHdpdGggY2FycnkKICAgIHZhciBoaTIgPSBoaTJhICsgaGkyYiArIGN5OwoKICAgIC8vIE92ZXJmbG93IGRldGVjdGlvbiBhZnRlciBhZGRpbmcgY2FycnkgdG8gdGhlIGhpZ2hlc3Qgc2VnbWVudAogICAgLy8gSW4gYSAnc2FmZScgaW1wbGVtZW50YXRpb24sIGFuIG92ZXJmbG93IGNhbiBiZSBkZXRlY3RlZCBpZiB0aGUgZmluYWwgY2Fycnkgd291bGQgZXhjZWVkIHRoZSBib3VuZHMgb2YgdTI1NiwKICAgIC8vIHdoaWNoIG1lYW5zIGFuIGFkZGl0aW9uIHRoYXQgY2F1c2VzIHRoZSBoaWdoZXN0IHNlZ21lbnQgdG8gb3ZlcmZsb3cuCiAgICAvLyBIb3dldmVyLCBzdGFuZGFyZCB1bnNpZ25lZCBpbnRlZ2VyIGJlaGF2aW9yIHdvdWxkIHdyYXAgYXJvdW5kLCBzbyB0aGlzIHN0ZXAgZGVwZW5kcyBvbiB0aGUgaW50ZW5kZWQgYmVoYXZpb3I6CiAgICBpZiAoaGkyIDwgaGkyYSB8fCAoY3kgPT0gMSAmJiBoaTIgPT0gaGkyYSkpIHsKICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigiT3ZlcmZsb3cgZHVyaW5nIGFkZGl0aW9uIik7CiAgICB9CgogICAgcmV0dXJuIG5ldyB1MjU2KGxvMSwgbG8yLCBoaTEsIGhpMik7CiAgfQoKICBAb3BlcmF0b3IoIi0iKQogIHN0YXRpYyBzdWIoYTogdTI1NiwgYjogdTI1Nik6IHUyNTYgewogICAgaWYgKGEgPCBiKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcigiVW5kZXJmbG93IGR1cmluZyBzdWJ0cmFjdGlvbiIpOwogICAgcmV0dXJuIGNoYW5nZXR5cGU8dTI1Nj4oVTI1Ni5zdWIoY2hhbmdldHlwZTxVMjU2PihhKSwgY2hhbmdldHlwZTxVMjU2PihiKSkpOwogIH0KfQoKZXhwb3J0IHsgdTI1NiBhcyB1MjU2U2FmZSB9Owo=",
  "node_modules/as-bignum/assembly/integer/safe/u64.ts": "Ly8gVE9ETwo=",
  "node_modules/as-bignum/assembly/integer/u128.ts": "",
  "node_modules/as-bignum/assembly/integer/u256.ts": "",
  "node_modules/as-bignum/assembly/tsconfig.json": "ewogICJleHRlbmRzIjogImFzc2VtYmx5c2NyaXB0L3N0ZC9hc3NlbWJseS5qc29uIiwKICAiaW5jbHVkZSI6IFsKICAgICIuLyoqLyoudHMiCiAgXQp9Cg==",
  "node_modules/as-bignum/assembly/utils.ts": "",
  "node_modules/as-bignum/assembly/__tests__/as-pect.d.ts": "Ly8vIDxyZWZlcmVuY2UgdHlwZXM9IkBhcy1wZWN0L2Fzc2VtYmx5L3R5cGVzL2FzLXBlY3QiIC8+Cg==",
  "node_modules/as-bignum/assembly/__tests__/i128.spec.ts": "aW1wb3J0IHsgaTEyOCB9IGZyb20gJy4uL2ludGVnZXIvaTEyOCc7CmltcG9ydCB7IGFycmF5VG9VaW50OEFycmF5IH0gZnJvbSAiLi91dGlscyI7CgovLyBkZXNjcmliZSgiU3RyaW5nIENvbnZlcnNpb24iLCAoKSA9PiB7Ci8vICAgLy8gVE9ETzogdGVzdHMKLy8gfSk7CgpkZXNjcmliZSgiQnVmZmVyIENvbnZlcnNpb24iLCAoKSA9PiB7CiAgaXQoIlNob3VsZCBjb252ZXJ0IGZyb20gYnl0ZXMgTGl0dGxlIEVuZGlhbiAxIiwgKCkgPT4gewogICAgdmFyIGFycjogdThbXSA9IFsKICAgICAgMHgxMSwgMHgyMiwgMHgzMywgMHg0NCwgMHg1NSwgMHg2NiwgMHg3NywgMHg4OCwKICAgICAgMHg5OSwgMHhBQSwgMHhCQiwgMHhDQywgMHhERCwgMHhFRSwgMHhGRiwgMHgxMgogICAgXTsKICAgIGV4cGVjdChpMTI4LmZyb21CeXRlcyhhcnIpKQogICAgICAudG9TdHJpY3RFcXVhbChuZXcgaTEyOCgweDg4Nzc2NjU1NDQzMzIyMTEsIDB4MTJGRkVFRERDQ0JCQUE5OSkpOwogIH0pOwoKICBpdCgiU2hvdWxkIGNvbnZlcnQgZnJvbSBieXRlcyBMaXR0bGUgRW5kaWFuIDIiLCAoKSA9PiB7CiAgICB2YXIgYXJyID0gYXJyYXlUb1VpbnQ4QXJyYXkoWwogICAgICAweDExLCAweDIyLCAweDMzLCAweDQ0LCAweDU1LCAweDY2LCAweDc3LCAweDAwLAogICAgICAweDAwLCAweDc3LCAweDY2LCAweDU1LCAweDQ0LCAweDMzLCAweDIyLCAweDExCiAgICBdKTsKICAgIGV4cGVjdChpMTI4LmZyb21CeXRlcyhhcnIpKQogICAgICAudG9TdHJpY3RFcXVhbChuZXcgaTEyOCgweDAwNzc2NjU1NDQzMzIyMTEsIDB4MTEyMjMzNDQ1NTY2NzcwMCkpOwogIH0pOwoKICBpdCgiU2hvdWxkIGNvbnZlcnQgZnJvbSBieXRlcyBCaWcgRW5kaWFuIDEiLCAoKSA9PiB7CiAgICB2YXIgYXJyOiB1OFtdID0gWwogICAgICAweDExLCAweDIyLCAweDMzLCAweDQ0LCAweDU1LCAweDY2LCAweDc3LCAweDg4LAogICAgICAweDk5LCAweEFBLCAweEJCLCAweENDLCAweERELCAweEVFLCAweEZGLCAweDEyCiAgICBdOwogICAgZXhwZWN0KGkxMjguZnJvbUJ5dGVzKGFyciwgdHJ1ZSkpCiAgICAgIC50b1N0cmljdEVxdWFsKG5ldyBpMTI4KDB4OTlBQUJCQ0NEREVFRkYxMiwgMHgxMTIyMzM0NDU1NjY3Nzg4KSk7CiAgfSk7CgogIGl0KCJTaG91bGQgY29udmVydCBmcm9tIGJ5dGVzIEJpZyBFbmRpYW4gMiIsICgpID0+IHsKICAgIHZhciBhcnIgPSBhcnJheVRvVWludDhBcnJheShbCiAgICAgIDB4MTEsIDB4MjIsIDB4MzMsIDB4NDQsIDB4NTUsIDB4NjYsIDB4NzcsIDB4ODgsCiAgICAgIDB4OTksIDB4QUEsIDB4QkIsIDB4Q0MsIDB4REQsIDB4RUUsIDB4RkYsIDB4MTIKICAgIF0pOwogICAgZXhwZWN0KGkxMjguZnJvbUJ5dGVzKGFyciwgdHJ1ZSkpCiAgICAgIC50b1N0cmljdEVxdWFsKG5ldyBpMTI4KDB4OTlBQUJCQ0NEREVFRkYxMiwgMHgxMTIyMzM0NDU1NjY3Nzg4KSk7CiAgfSk7Cn0pOwoKZGVzY3JpYmUoIkJhc2ljIFR5cGUgQ29udmVyc2lvbiIsICgpID0+IHsKICAvLyBUT0RPOiB0ZXN0cwp9KTsKCmRlc2NyaWJlKCJCYXNpYyBPcGVyYXRpb25zIiwgKCkgPT4gewogIGl0KCJTaG91bGQgbnVtYmVyIGlzIHplcm8gMSIsICgpID0+IHsKICAgIGxldCBhID0gaTEyOC5aZXJvOwogICAgZXhwZWN0KGEuaXNaZXJvKCkpLnRvQmUodHJ1ZSk7CiAgfSk7CgogIGl0KCJTaG91bGQgbnVtYmVyIGlzIHplcm8gMiIsICgpID0+IHsKICAgIGxldCBhID0gaTEyOC5PbmU7CiAgICBleHBlY3QoIWEuaXNaZXJvKCkpLnRvQmUodHJ1ZSk7CiAgfSk7CgogIGl0KCJTaG91bGQgbnVtYmVyIGJpbmFyeSBub3QiLCAoKSA9PiB7CiAgICBsZXQgYSA9IG5ldyBpMTI4KDEsIDIpOwogICAgZXhwZWN0KH5hKS50b1N0cmljdEVxdWFsKG5ldyBpMTI4KH4xLCB+MikpOwogIH0pOwoKICBpdCgiU2hvdWxkIG51bWJlciB1bmFyeSBwb3NpdGl2ZSIsICgpID0+IHsKICAgIGxldCBhID0gbmV3IGkxMjgoMSwgMik7CiAgICBleHBlY3QoK2EpLnRvU3RyaWN0RXF1YWwoYSk7CiAgfSk7CgogIGl0KCJTaG91bGQgbnVtYmVyIG5vbiBlbXB0eSIsICgpID0+IHsKICAgIGxldCBhID0gaTEyOC5PbmU7CiAgICBleHBlY3QoISFhKS50b0JlKHRydWUpOwogIH0pOwoKICBpdCgiU2hvdWxkIG51bWJlciBpcyBlbXB0eSAxIiwgKCkgPT4gewogICAgbGV0IGEgPSBpMTI4Llplcm87CiAgICBleHBlY3QoIWEpLnRvQmUodHJ1ZSk7CiAgfSk7CgogIGl0KCJTaG91bGQgbmVnKDEpID09IC0xIiwgKCkgPT4gewogICAgbGV0IG9uZSA9IGkxMjguT25lOwogICAgbGV0IG5lZyA9IG9uZS5uZWcoKTsKICAgIGV4cGVjdCg8dTY0Pm5lZy5sbykudG9CZSg8dTY0Pi0xKTsKICAgIGV4cGVjdCg8dTY0Pm5lZy5oaSkudG9CZSg8dTY0Pi0xKTsKICB9KTsKCiAgaXQoIlNob3VsZCBhYnMoLTEpID09IDEiLCAoKSA9PiB7CiAgICBsZXQgb25lID0gaTEyOC5PbmU7CiAgICBsZXQgbmVnID0gLW9uZTsKICAgIGV4cGVjdChpMTI4LmFicyhuZWcpKS50b1N0cmljdEVxdWFsKG9uZSk7CiAgfSk7Cn0pOwoKLy8gZGVzY3JpYmUoIkV4cG9uZW50aW9uIE9wZXJhdGlvbiIsICgpID0+IHsKLy8gICAvLyBUT0RPOiB0ZXN0cwovLyB9KTsKCi8vIGRlc2NyaWJlKCJCaW5hcnkgT3BlcmF0aW9uIENvdW50IiwgKCkgPT4gewovLyAgIC8vIFRPRE86IHRlc3RzCi8vIH0pOwoKLy8gZGVzY3JpYmUoIkRpdmlzaW9uIEFuZCBNb2QgT3BlcmF0aW9uIiwgKCkgPT4gewovLyAgIC8vIFRPRE86IHRlc3RzCi8vIH0pOwoKLy8gZGVzY3JpYmUoIlRocm93YWJsZSIsICgpID0+IHsKLy8gICAvLyBUT0RPOiB0ZXN0cwovLyB9KTsK",
  "node_modules/as-bignum/assembly/__tests__/safe_u128.spec.ts": "",
  "node_modules/as-bignum/assembly/__tests__/safe_u256.spec.ts": "aW1wb3J0IHsgdTI1NlNhZmUgfSBmcm9tICIuLi9pbnRlZ2VyL3NhZmUvdTI1NiI7CgpkZXNjcmliZSgiQmFzaWMgT3BlcmF0aW9ucyIsICgpID0+IHsKICBkZXNjcmliZSgiQUREIiwgKCkgPT4gewogICAgaXQoIlNob3VsZCBhZGQgWzEsIDAsIDAsIDBdIGFuZCBbbWF4LCAwLCAwLCAwXSIsICgpID0+IHsKICAgICAgdmFyIGEgPSB1MjU2U2FmZS5PbmU7CiAgICAgIHZhciBiID0gbmV3IHUyNTZTYWZlKHU2NC5NQVhfVkFMVUUsIDAsIDAsIDApOwogICAgICB2YXIgciA9IG5ldyB1MjU2U2FmZSgwLCAxLCAwLCAwKTsKICAgICAgZXhwZWN0KGEgKyBiKS50b1N0cmljdEVxdWFsKHIpOwogICAgICBleHBlY3QoYiArIGEpLnRvU3RyaWN0RXF1YWwocik7CiAgICB9KTsKICAgIGl0KCJTaG91bGQgYWRkIFsxLCAwLCAwLCAwXSBhbmQgW21heCwgbWF4LCAwLCAwXSIsICgpID0+IHsKICAgICAgdmFyIGEgPSB1MjU2U2FmZS5PbmU7CiAgICAgIHZhciBiID0gbmV3IHUyNTZTYWZlKHU2NC5NQVhfVkFMVUUsIHU2NC5NQVhfVkFMVUUsIDAsIDApOwogICAgICB2YXIgciA9IG5ldyB1MjU2U2FmZSgwLCAwLCAxLCAwKTsKICAgICAgZXhwZWN0KGEgKyBiKS50b1N0cmljdEVxdWFsKHIpOwogICAgICBleHBlY3QoYiArIGEpLnRvU3RyaWN0RXF1YWwocik7CiAgICB9KTsKICAgIGl0KCJTaG91bGQgYWRkIFsxLCAwLCAwLCAwXSBhbmQgW21heCwgbWF4LCBtYXgsIDBdIiwgKCkgPT4gewogICAgICB2YXIgYSA9IHUyNTZTYWZlLk9uZTsKICAgICAgdmFyIGIgPSBuZXcgdTI1NlNhZmUodTY0Lk1BWF9WQUxVRSwgdTY0Lk1BWF9WQUxVRSwgdTY0Lk1BWF9WQUxVRSwgMCk7CiAgICAgIHZhciByID0gbmV3IHUyNTZTYWZlKDAsIDAsIDAsIDEpOwogICAgICBleHBlY3QoYSArIGIpLnRvU3RyaWN0RXF1YWwocik7CiAgICAgIGV4cGVjdChiICsgYSkudG9TdHJpY3RFcXVhbChyKTsKICAgIH0pOwogICAgaXQoIlNob3VsZCBhZGQgWzEsIDEsIDEsIDFdIGFuZCBbbWF4IC0gMSwgbWF4IC0gMSwgbWF4IC0gMSwgbWF4IC0gMV0iLCAoKSA9PiB7CiAgICAgIGNvbnN0IG9uZTogdTY0ID0gMTsKICAgICAgY29uc3QgcHJlID0gdTY0Lk1BWF9WQUxVRSAtIDE7CiAgICAgIHZhciBhID0gbmV3IHUyNTZTYWZlKG9uZSwgb25lLCBvbmUsIG9uZSk7CiAgICAgIHZhciBiID0gbmV3IHUyNTZTYWZlKHByZSwgcHJlLCBwcmUsIHByZSk7CiAgICAgIHZhciByID0gdTI1NlNhZmUuTWF4OwogICAgICBleHBlY3QoYSArIGIpLnRvU3RyaWN0RXF1YWwocik7CiAgICAgIGV4cGVjdChiICsgYSkudG9TdHJpY3RFcXVhbChyKTsKICAgIH0pOwogICAgaXQoIlNob3VsZCB0ZXN0IGNhcnJ5IGFuZCBsbzIgZXF1YWxpdHkiLCAoKSA9PiB7CiAgICAgIHZhciBhID0gbmV3IHUyNTZTYWZlKHU2NC5NQVhfVkFMVUUsIDEsIDAsIDApOwogICAgICB2YXIgYiA9IG5ldyB1MjU2U2FmZSgxLCAwLCAwLCAwKTsKICAgICAgdmFyIHIgPSBuZXcgdTI1NlNhZmUoMCwgMiwgMCwgMCk7CiAgICAgIGV4cGVjdChhICsgYikudG9TdHJpY3RFcXVhbChyKTsKICAgIH0pOwogICAgaXQoIlNob3VsZCBhZGQgdHdvIG51bWJlcnMgMSIsICgpID0+IHsKICAgICAgdmFyIGEgPSB1MjU2U2FmZS5mcm9tKDIzNDg5KTsKICAgICAgdmFyIGIgPSB1MjU2U2FmZS5mcm9tKDEyMzQpOwogICAgICB2YXIgciA9IHUyNTZTYWZlLmZyb20oMjQ3MjMpOwogICAgICBleHBlY3QoYSArIGIpLnRvU3RyaWN0RXF1YWwocik7CiAgICAgIGV4cGVjdChiICsgYSkudG9TdHJpY3RFcXVhbChyKTsKICAgIH0pOwogICAgaXQoIlNob3VsZCBhZGQgdHdvIG51bWJlcnMgMiIsICgpID0+IHsKICAgICAgdmFyIGEgPSB1MjU2U2FmZS5mcm9tKDQzNTQ1NDUzNDUyNDUyNDUyKTsKICAgICAgdmFyIGIgPSB1MjU2U2FmZS5mcm9tKDEpOwogICAgICB2YXIgciA9IHUyNTZTYWZlLmZyb20oNDM1NDU0NTM0NTI0NTI0NTMpOwogICAgICBleHBlY3QoYSArIGIpLnRvU3RyaWN0RXF1YWwocik7CiAgICAgIGV4cGVjdChiICsgYSkudG9TdHJpY3RFcXVhbChyKTsKICAgIH0pOwogICAgaXQoIlNob3VsZCBhZGQgdHdvIG51bWJlcnMgMyIsICgpID0+IHsKICAgICAgdmFyIGEgPSBuZXcgdTI1NlNhZmUoNjA2NDY0ODE4MzA3Mzc4ODAwMSwgMTg0MTI1OTE3MDUyNzYyNTgyMjYsIDE4NDQ2NzQ0MDczNzA5NTUxNjE1LCA5MjIzMzcyMDM2ODU0Nzc1ODA3KTsKICAgICAgdmFyIGIgPSBuZXcgdTI1NlNhZmUoMzA2MTY1MTEyNzczMzU0MzkzNCwgNDI0NDIwOTYwNTY4MTMwOTQpOwogICAgICB2YXIgciA9IG5ldyB1MjU2U2FmZSg5MTI2Mjk5MzEwODA3MzMxOTM1LCA4Mjg5NzI3NjIzNTE5NzA0LCAwLCA5MjIzMzcyMDM2ODU0Nzc1ODA4KTsKICAgICAgZXhwZWN0KGEgKyBiKS50b1N0cmljdEVxdWFsKHIpOwogICAgICBleHBlY3QoYiArIGEpLnRvU3RyaWN0RXF1YWwocik7CiAgICB9KTsKICB9KTsKICBkZXNjcmliZSgiU1VCIiwgKCkgPT4gewogICAgaXQoIlNob3VsZCBzdWIgb25lIG1pbnVzIG9uZSIsICgpID0+IHsKICAgICAgdmFyIGEgPSB1MjU2U2FmZS5PbmU7CiAgICAgIHZhciBiID0gYTsKICAgICAgdmFyIHIgPSB1MjU2U2FmZS5aZXJvOwogICAgICBleHBlY3QoYSAtIGIpLnRvU3RyaWN0RXF1YWwocik7CiAgICB9KTsKICAgIGl0KCJTaG91bGQgc3ViIFsyLCAyLCAyLCAyXSBhbmQgWzEsIDEsIDEsIDFdIiwgKCkgPT4gewogICAgICB2YXIgYSA9IG5ldyB1MjU2U2FmZSgyLCAyLCAyLCAyKTsKICAgICAgdmFyIGIgPSBuZXcgdTI1NlNhZmUoMSwgMSwgMSwgMSk7CiAgICAgIHZhciByID0gYjsKICAgICAgZXhwZWN0KGEgLSBiKS50b1N0cmljdEVxdWFsKHIpOwogICAgfSk7CiAgICBpdCgiU2hvdWxkIHN1YiBbbWF4LCBtYXgsIG1heCwgbWF4XSBhbmQgWzEsIDIsIDMsIDRdIiwgKCkgPT4gewogICAgICBjb25zdCBtYXggPSB1NjQuTUFYX1ZBTFVFOwogICAgICB2YXIgYSA9IHUyNTZTYWZlLk1heDsKICAgICAgdmFyIGIgPSBuZXcgdTI1NlNhZmUoMSwgMiwgMywgNCk7CiAgICAgIHZhciByID0gbmV3IHUyNTZTYWZlKG1heCAtIDEsIG1heCAtIDIsIG1heCAtIDMsIG1heCAtIDQpOwogICAgICBleHBlY3QoYSAtIGIpLnRvU3RyaWN0RXF1YWwocik7CiAgICB9KTsKICAgIGl0KCJTaG91bGQgc3ViIFttYXgsIG1heCwgbWF4LCBtYXhdIGFuZCBbMSwgMCwgMCwgMF0iLCAoKSA9PiB7CiAgICAgIGNvbnN0IG1heCA9IHU2NC5NQVhfVkFMVUU7CiAgICAgIHZhciBhID0gdTI1NlNhZmUuTWF4OwogICAgICB2YXIgYiA9IHUyNTZTYWZlLk9uZTsKICAgICAgdmFyIHIgPSBuZXcgdTI1NlNhZmUobWF4IC0gMSwgbWF4LCBtYXgsIG1heCk7CiAgICAgIGV4cGVjdChhIC0gYikudG9TdHJpY3RFcXVhbChyKTsKICAgIH0pOwogICAgaXQoIlNob3VsZCBzdWIgdHdvIG51bWJlcnMgMSIsICgpID0+IHsKICAgICAgdmFyIGEgPSB1MjU2U2FmZS5mcm9tKDIzNDg5KTsKICAgICAgdmFyIGIgPSB1MjU2U2FmZS5mcm9tKDEyMzQpOwogICAgICB2YXIgciA9IHUyNTZTYWZlLmZyb20oMjIyNTUpOwogICAgICBleHBlY3QoYSAtIGIpLnRvU3RyaWN0RXF1YWwocik7CiAgICB9KTsKICAgIGl0KCJTaG91bGQgc3ViIHR3byBudW1iZXJzIDIiLCAoKSA9PiB7CiAgICAgIHZhciBhID0gdTI1NlNhZmUuZnJvbSg0MzU0NTQ1MzQ1MjQ1MjQ1Myk7CiAgICAgIHZhciBiID0gdTI1NlNhZmUuZnJvbSgxKTsKICAgICAgdmFyIHIgPSB1MjU2U2FmZS5mcm9tKDQzNTQ1NDUzNDUyNDUyNDUyKTsKICAgICAgZXhwZWN0KGEgLSBiKS50b1N0cmljdEVxdWFsKHIpOwogICAgfSk7CiAgICBpdCgiU2hvdWxkIHN1YiB0d28gbnVtYmVycyAzIiwgKCkgPT4gewogICAgICB2YXIgYSA9IG5ldyB1MjU2U2FmZSg2MDY0NjQ4MTgzMDczNzg4MDAxLCAxODQxMjU5MTcwNTI3NjI1ODIyNiwgMTg0NDY3NDQwNzM3MDk1NTE2MTUsIDkyMjMzNzIwMzY4NTQ3NzU4MDcpOwogICAgICB2YXIgYiA9IG5ldyB1MjU2U2FmZSgzMDYxNjUxMTI3NzMzNTQzOTM0LCA0MjQ0MjA5NjA1NjgxMzA5NCk7CiAgICAgIHZhciByID0gbmV3IHUyNTZTYWZlKDMwMDI5OTcwNTUzNDAyNDQwNjcsIDE4MzcwMTQ5NjA5MjE5NDQ1MTMyLCAxODQ0Njc0NDA3MzcwOTU1MTYxNSwgOTIyMzM3MjAzNjg1NDc3NTgwNyk7CiAgICAgIGV4cGVjdChhIC0gYikudG9TdHJpY3RFcXVhbChyKTsKICAgIH0pOwogIH0pOwp9KTsKCmRlc2NyaWJlKCJPdmVyZmxvdyBVbmRlcmZsb3cgVGhyb3dhYmxlIiwgKCkgPT4gewogIGRlc2NyaWJlKCJBREQiLCAoKSA9PiB7CiAgICBpdCgiU2hvdWxkIHRocm93IHdoZW4gYWRkIHR3byBudW1iZXJzIDEiLCAoKSA9PiB7CiAgICAgIGV4cGVjdCgoKSA9PiB7CiAgICAgICAgdmFyIGEgPSB1MjU2U2FmZS5PbmU7CiAgICAgICAgdmFyIGIgPSB1MjU2U2FmZS5NYXg7CiAgICAgICAgIShhICsgYik7CiAgICAgIH0pLnRvVGhyb3coKTsKICAgIH0pOwoKICAgIGl0KCJTaG91bGQgdGhyb3cgd2hlbiBhZGQgdHdvIG51bWJlcnMgMiIsICgpID0+IHsKICAgICAgZXhwZWN0KCgpID0+IHsKICAgICAgICB2YXIgYSA9IHUyNTZTYWZlLk1heDsKICAgICAgICB2YXIgYiA9IHUyNTZTYWZlLk9uZTsKICAgICAgICAhKGEgKyBiKTsKICAgICAgfSkudG9UaHJvdygpOwogICAgfSk7CgogICAgaXQoIlNob3VsZCB0aHJvdyB3aGVuIGFkZCB0d28gbnVtYmVycyAzIiwgKCkgPT4gewogICAgICBleHBlY3QoKCkgPT4gewogICAgICAgIHZhciBhID0gdTI1NlNhZmUuZnJvbSgtMik7CiAgICAgICAgdmFyIGIgPSBuZXcgdTI1NlNhZmUoMik7CiAgICAgICAgIShhICsgYik7CiAgICAgIH0pLnRvVGhyb3coKTsKICAgIH0pOwogIH0pOwogIC8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovCiAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNVQiBPVkVSRkxPVyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi8KICAvKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqLwogIGRlc2NyaWJlKCJTVUIiLCAoKSA9PiB7CiAgICBpdCgiU2hvdWxkIHRocm93IHdoZW4gc3VidHJhY3QgdHdvIG51bWJlcnMgMSIsICgpID0+IHsKICAgICAgZXhwZWN0KCgpID0+IHsKICAgICAgICB2YXIgYSA9IHUyNTZTYWZlLlplcm87CiAgICAgICAgdmFyIGIgPSB1MjU2U2FmZS5NYXg7CiAgICAgICAgIShhIC0gYik7CiAgICAgIH0pLnRvVGhyb3coKTsKICAgIH0pOwoKICAgIGl0KCJTaG91bGQgdGhyb3cgd2hlbiBzdWJ0cmFjdCB0d28gbnVtYmVycyAyIiwgKCkgPT4gewogICAgICBleHBlY3QoKCkgPT4gewogICAgICAgIHZhciBhID0gdTI1NlNhZmUuZnJvbSgtMik7CiAgICAgICAgdmFyIGIgPSB1MjU2U2FmZS5NYXg7CiAgICAgICAgIShhIC0gYik7CiAgICAgIH0pLnRvVGhyb3coKTsKICAgIH0pOwoKICAgIGl0KCJTaG91bGQgdGhyb3cgd2hlbiBzdWJ0cmFjdCB0d28gbnVtYmVycyAzIiwgKCkgPT4gewogICAgICBleHBlY3QoKCkgPT4gewogICAgICAgIHZhciBhID0gdTI1NlNhZmUuWmVybzsKICAgICAgICB2YXIgYiA9IHUyNTZTYWZlLk9uZTsKICAgICAgICAhKGEgLSBiKTsKICAgICAgfSkudG9UaHJvdygpOwogICAgfSk7CiAgfSk7Cn0pOwo=",
  "node_modules/as-bignum/assembly/__tests__/u128.spec.ts": "",
  "node_modules/as-bignum/assembly/__tests__/u256.spec.ts": "",
  "node_modules/as-bignum/assembly/__tests__/utils.ts": "ZXhwb3J0IGZ1bmN0aW9uIGFycmF5VG9VaW50OEFycmF5KGFycjogdThbXSk6IFVpbnQ4QXJyYXkgewogIGxldCBsZW4gPSBhcnIubGVuZ3RoOwogIGxldCByZXMgPSBuZXcgVWludDhBcnJheShsZW4pOwogIG1lbW9yeS5jb3B5KHJlcy5kYXRhU3RhcnQsIGFyci5kYXRhU3RhcnQsIGxlbik7CiAgcmV0dXJuIHJlczsKfQo=",
  "node_modules/@btc-vision/btc-runtime/runtime/abort/abort.ts": "aW1wb3J0IHsgRGF0YVZpZXcgfSBmcm9tICdkYXRhdmlldyc7CmltcG9ydCB7IEFycmF5QnVmZmVyIH0gZnJvbSAnYXJyYXlidWZmZXInOwppbXBvcnQgeyBlbnZfZXhpdCB9IGZyb20gJy4uL2Vudi9nbG9iYWwnOwoKZXhwb3J0IGZ1bmN0aW9uIHJldmVydE9uRXJyb3IobWVzc2FnZTogc3RyaW5nLCBmaWxlTmFtZTogc3RyaW5nLCBsaW5lOiB1MzIsIGNvbHVtbjogdTMyKTogdm9pZCB7CiAgICBjb25zdCBzZWxlY3RvciA9IDB4NjM3MzlkNWM7IC8vIEVycm9yKHN0cmluZykKCiAgICBjb25zdCByZXZlcnRNZXNzYWdlID0gYCR7bWVzc2FnZX0gYXQgJHtmaWxlTmFtZX06JHtsaW5lfToke2NvbHVtbn1gOwoKICAgIC8vIFRISVMgTUlHSFQgT1ZFUkZMT1csIElUJ1MgT0suCiAgICBjb25zdCBsZW5ndGggPSB1MTYocmV2ZXJ0TWVzc2FnZS5sZW5ndGgpOwogICAgY29uc3QgX2xlbmd0aF9pMzIgPSBpMzIobGVuZ3RoKTsKCiAgICBjb25zdCBhcnJheUJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcig0ICsgX2xlbmd0aF9pMzIgKyAyKTsKICAgIGNvbnN0IHdyaXRlciA9IG5ldyBEYXRhVmlldyhhcnJheUJ1ZmZlcik7CgogICAgd3JpdGVyLnNldFVpbnQzMigwLCBzZWxlY3RvciwgZmFsc2UpOwogICAgd3JpdGVyLnNldFVpbnQxNig0LCBsZW5ndGgsIGZhbHNlKTsKCiAgICBmb3IgKGxldCBpID0gMDsgaSA8IF9sZW5ndGhfaTMyOyBpKyspIHsKICAgICAgICB3cml0ZXIuc2V0VWludDgoNiArIGksIDx1OD5yZXZlcnRNZXNzYWdlLmNoYXJDb2RlQXQoaSkpOwogICAgfQoKICAgIGVudl9leGl0KDEsIGFycmF5QnVmZmVyLCBhcnJheUJ1ZmZlci5ieXRlTGVuZ3RoKTsKfQ==",
  "node_modules/@btc-vision/btc-runtime/runtime/buffer/BytesReader.ts": "",
  "node_modules/@btc-vision/btc-runtime/runtime/buffer/BytesWriter.ts": "",
  "node_modules/@btc-vision/btc-runtime/runtime/contracts/DeployableOP_20.ts": "",
  "node_modules/@btc-vision/btc-runtime/runtime/contracts/interfaces/IOP_20.ts": "aW1wb3J0IHsgQnl0ZXNXcml0ZXIgfSBmcm9tICcuLi8uLi9idWZmZXIvQnl0ZXNXcml0ZXInOwppbXBvcnQgeyBTdG9yZWRVMjU2IH0gZnJvbSAnLi4vLi4vc3RvcmFnZS9TdG9yZWRVMjU2JzsKaW1wb3J0IHsgQ2FsbGRhdGEgfSBmcm9tICcuLi8uLi90eXBlcyc7CgpleHBvcnQgaW50ZXJmYWNlIElPUF8yMCB7CiAgICByZWFkb25seSBfdG90YWxTdXBwbHk6IFN0b3JlZFUyNTY7CgogICAgYmFsYW5jZU9mKGNhbGxEYXRhOiBDYWxsZGF0YSk6IEJ5dGVzV3JpdGVyOwoKICAgIHRyYW5zZmVyKGNhbGxEYXRhOiBDYWxsZGF0YSk6IEJ5dGVzV3JpdGVyOwoKICAgIHRyYW5zZmVyRnJvbShjYWxsRGF0YTogQ2FsbGRhdGEpOiBCeXRlc1dyaXRlcjsKCiAgICBhcHByb3ZlKGNhbGxEYXRhOiBDYWxsZGF0YSk6IEJ5dGVzV3JpdGVyOwoKICAgIGFsbG93YW5jZShjYWxsRGF0YTogQ2FsbGRhdGEpOiBCeXRlc1dyaXRlcjsKCiAgICBidXJuKGNhbGxEYXRhOiBDYWxsZGF0YSk6IEJ5dGVzV3JpdGVyOwp9Cg==",
  "node_modules/@btc-vision/btc-runtime/runtime/contracts/interfaces/OP20InitParameters.ts": "aW1wb3J0IHsgdTI1NiB9IGZyb20gJ0BidGMtdmlzaW9uL2FzLWJpZ251bS9hc3NlbWJseSc7CgpleHBvcnQgY2xhc3MgT1AyMEluaXRQYXJhbWV0ZXJzIHsKICAgIHJlYWRvbmx5IG1heFN1cHBseTogdTI1NjsKICAgIHJlYWRvbmx5IGRlY2ltYWxzOiB1ODsKICAgIHJlYWRvbmx5IG5hbWU6IHN0cmluZzsKICAgIHJlYWRvbmx5IHN5bWJvbDogc3RyaW5nOwoKICAgIGNvbnN0cnVjdG9yKG1heFN1cHBseTogdTI1NiwgZGVjaW1hbHM6IHU4LCBuYW1lOiBzdHJpbmcsIHN5bWJvbDogc3RyaW5nKSB7CiAgICAgICAgdGhpcy5tYXhTdXBwbHkgPSBtYXhTdXBwbHk7CiAgICAgICAgdGhpcy5kZWNpbWFscyA9IGRlY2ltYWxzOwogICAgICAgIHRoaXMubmFtZSA9IG5hbWU7CiAgICAgICAgdGhpcy5zeW1ib2wgPSBzeW1ib2w7CiAgICB9Cn0K",
  "node_modules/@btc-vision/btc-runtime/runtime/contracts/OP_20.ts": "aW1wb3J0IHsgRGVwbG95YWJsZU9QXzIwIH0gZnJvbSAnLi9EZXBsb3lhYmxlT1BfMjAnOwppbXBvcnQgeyB1MjU2IH0gZnJvbSAnQGJ0Yy12aXNpb24vYXMtYmlnbnVtL2Fzc2VtYmx5JzsKaW1wb3J0IHsgT1AyMEluaXRQYXJhbWV0ZXJzIH0gZnJvbSAnLi9pbnRlcmZhY2VzL09QMjBJbml0UGFyYW1ldGVycyc7CgpleHBvcnQgYWJzdHJhY3QgY2xhc3MgT1BfMjAgZXh0ZW5kcyBEZXBsb3lhYmxlT1BfMjAgewogICAgcHVibGljIGNvbnN0cnVjdG9yKG1heFN1cHBseTogdTI1NiwgZGVjaW1hbHM6IHU4LCBuYW1lOiBzdHJpbmcsIHN5bWJvbDogc3RyaW5nKSB7CiAgICAgICAgc3VwZXIobmV3IE9QMjBJbml0UGFyYW1ldGVycyhtYXhTdXBwbHksIGRlY2ltYWxzLCBuYW1lLCBzeW1ib2wpKTsKICAgIH0KfQo=",
  "node_modules/@btc-vision/btc-runtime/runtime/contracts/OP_NET.ts": "aW1wb3J0IHsgQnl0ZXNXcml0ZXIgfSBmcm9tICcuLi9idWZmZXIvQnl0ZXNXcml0ZXInOwppbXBvcnQgeyBCbG9ja2NoYWluIH0gZnJvbSAnLi4vZW52JzsKaW1wb3J0IHsgTUFYX0VWRU5UX0RBVEFfU0laRSwgTmV0RXZlbnQgfSBmcm9tICcuLi9ldmVudHMvTmV0RXZlbnQnOwppbXBvcnQgeyBJQlRDIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9JQlRDJzsKaW1wb3J0IHsgZW5jb2RlU2VsZWN0b3IsIFNlbGVjdG9yIH0gZnJvbSAnLi4vbWF0aC9hYmknOwppbXBvcnQgeyBDYWxsZGF0YSB9IGZyb20gJy4uL3R5cGVzJzsKaW1wb3J0IHsgQWRkcmVzcyB9IGZyb20gJy4uL3R5cGVzL0FkZHJlc3MnOwppbXBvcnQgeyBSZXZlcnQgfSBmcm9tICcuLi90eXBlcy9SZXZlcnQnOwppbXBvcnQgeyBBRERSRVNTX0JZVEVfTEVOR1RIIH0gZnJvbSAnLi4vdXRpbHMnOwoKZXhwb3J0IGNsYXNzIE9QX05FVCBpbXBsZW1lbnRzIElCVEMgewogICAgcHVibGljIGdldCBhZGRyZXNzKCk6IEFkZHJlc3MgewogICAgICAgIHJldHVybiBCbG9ja2NoYWluLmNvbnRyYWN0QWRkcmVzczsKICAgIH0KCiAgICBwdWJsaWMgZ2V0IGNvbnRyYWN0RGVwbG95ZXIoKTogQWRkcmVzcyB7CiAgICAgICAgcmV0dXJuIEJsb2NrY2hhaW4uY29udHJhY3REZXBsb3llcjsKICAgIH0KCiAgICBwdWJsaWMgb25EZXBsb3ltZW50KF9jYWxsZGF0YTogQ2FsbGRhdGEpOiB2b2lkIHt9CgogICAgcHVibGljIG9uRXhlY3V0aW9uU3RhcnRlZCgpOiB2b2lkIHt9CgogICAgcHVibGljIG9uRXhlY3V0aW9uQ29tcGxldGVkKCk6IHZvaWQge30KCiAgICBwdWJsaWMgZXhlY3V0ZShtZXRob2Q6IFNlbGVjdG9yLCBfY2FsbGRhdGE6IENhbGxkYXRhKTogQnl0ZXNXcml0ZXIgewogICAgICAgIGxldCByZXNwb25zZTogQnl0ZXNXcml0ZXI7CgogICAgICAgIHN3aXRjaCAobWV0aG9kKSB7CiAgICAgICAgICAgIGNhc2UgZW5jb2RlU2VsZWN0b3IoJ2RlcGxveWVyJyk6CiAgICAgICAgICAgICAgICByZXNwb25zZSA9IG5ldyBCeXRlc1dyaXRlcihBRERSRVNTX0JZVEVfTEVOR1RIKTsKICAgICAgICAgICAgICAgIHJlc3BvbnNlLndyaXRlQWRkcmVzcyh0aGlzLmNvbnRyYWN0RGVwbG95ZXIpOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmV2ZXJ0KGBNZXRob2Qgbm90IGZvdW5kOiAke21ldGhvZH1gKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiByZXNwb25zZTsKICAgIH0KCiAgICBwcm90ZWN0ZWQgZW1pdEV2ZW50KGV2ZW50OiBOZXRFdmVudCk6IHZvaWQgewogICAgICAgIGlmIChldmVudC5sZW5ndGggPiBNQVhfRVZFTlRfREFUQV9TSVpFKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXZlbnQgZGF0YSBsZW5ndGggZXhjZWVkcyBtYXhpbXVtIGxlbmd0aC4nKTsKICAgICAgICB9CgogICAgICAgIEJsb2NrY2hhaW4uZW1pdChldmVudCk7CiAgICB9CgogICAgcHJvdGVjdGVkIGlzU2VsZihhZGRyZXNzOiBBZGRyZXNzKTogYm9vbGVhbiB7CiAgICAgICAgcmV0dXJuIHRoaXMuYWRkcmVzcyA9PT0gYWRkcmVzczsKICAgIH0KCiAgICBwcm90ZWN0ZWQgb25seURlcGxveWVyKGNhbGxlcjogQWRkcmVzcyk6IHZvaWQgewogICAgICAgIGlmICh0aGlzLmNvbnRyYWN0RGVwbG95ZXIgIT09IGNhbGxlcikgewogICAgICAgICAgICB0aHJvdyBuZXcgUmV2ZXJ0KCdPbmx5IGRlcGxveWVyIGNhbiBjYWxsIHRoaXMgbWV0aG9kJyk7CiAgICAgICAgfQogICAgfQp9Cg==",
  "node_modules/@btc-vision/btc-runtime/runtime/env/BlockchainEnvironment.ts": "",
  "node_modules/@btc-vision/btc-runtime/runtime/env/classes/Block.ts": "aW1wb3J0IHsgdTI1NiB9IGZyb20gJ0BidGMtdmlzaW9uL2FzLWJpZ251bS9hc3NlbWJseSc7CgpAZmluYWwKZXhwb3J0IGNsYXNzIEJsb2NrIHsKICAgIHB1YmxpYyByZWFkb25seSBudW1iZXJVMjU2OiB1MjU2OwoKICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigKICAgICAgICBwdWJsaWMgcmVhZG9ubHkgaGFzaDogVWludDhBcnJheSwKICAgICAgICBwdWJsaWMgcmVhZG9ubHkgbnVtYmVyOiB1NjQsCiAgICAgICAgcHVibGljIHJlYWRvbmx5IG1lZGlhblRpbWVzdGFtcDogdTY0LAogICAgKSB7CiAgICAgICAgdGhpcy5udW1iZXJVMjU2ID0gdTI1Ni5mcm9tVTY0KG51bWJlcik7CiAgICB9Cn0K",
  "node_modules/@btc-vision/btc-runtime/runtime/env/classes/Transaction.ts": "aW1wb3J0IHsgQWRkcmVzcyB9IGZyb20gJy4uLy4uL3R5cGVzL0FkZHJlc3MnOwppbXBvcnQgeyBUcmFuc2FjdGlvbklucHV0LCBUcmFuc2FjdGlvbk91dHB1dCB9IGZyb20gJy4vVVRYTyc7CmltcG9ydCB7IFBvdGVudGlhbCB9IGZyb20gJy4uLy4uL2xhbmcvRGVmaW5pdGlvbnMnOwppbXBvcnQgeyBCeXRlc1JlYWRlciB9IGZyb20gJy4uLy4uL2J1ZmZlci9CeXRlc1JlYWRlcic7CmltcG9ydCB7IGdldElucHV0c1NpemUsIGdldE91dHB1dHNTaXplLCBpbnB1dHMsIG91dHB1dHMgfSBmcm9tICcuLi9nbG9iYWwnOwoKQGZpbmFsCmV4cG9ydCBjbGFzcyBUcmFuc2FjdGlvbiB7CiAgICBwdWJsaWMgY29uc3RydWN0b3IoCiAgICAgICAgcHVibGljIHJlYWRvbmx5IHNlbmRlcjogQWRkcmVzcywgLy8gImltbWVkaWF0ZSBjYWxsZXIiCiAgICAgICAgcHVibGljIHJlYWRvbmx5IG9yaWdpbjogQWRkcmVzcywgLy8gImxlZnRtb3N0IHRoaW5nIGluIHRoZSBjYWxsIGNoYWluIgogICAgICAgIHB1YmxpYyByZWFkb25seSB0eElkOiBVaW50OEFycmF5LAogICAgICAgIHB1YmxpYyByZWFkb25seSBoYXNoOiBVaW50OEFycmF5LAogICAgKSB7CiAgICB9CgogICAgcHJpdmF0ZSBfaW5wdXRzOiBQb3RlbnRpYWw8VHJhbnNhY3Rpb25JbnB1dFtdPiA9IG51bGw7CgogICAgcHVibGljIGdldCBpbnB1dHMoKTogVHJhbnNhY3Rpb25JbnB1dFtdIHsKICAgICAgICBpZiAoIXRoaXMuX2lucHV0cykgewogICAgICAgICAgICBjb25zdCBpbnB1dHMgPSB0aGlzLmxvYWRJbnB1dHMoKTsKICAgICAgICAgICAgdGhpcy5faW5wdXRzID0gaW5wdXRzOwoKICAgICAgICAgICAgcmV0dXJuIGlucHV0czsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0aGlzLl9pbnB1dHMgYXMgVHJhbnNhY3Rpb25JbnB1dFtdOwogICAgfQoKICAgIHByaXZhdGUgX291dHB1dHM6IFBvdGVudGlhbDxUcmFuc2FjdGlvbk91dHB1dFtdPiA9IG51bGw7CgogICAgcHVibGljIGdldCBvdXRwdXRzKCk6IFRyYW5zYWN0aW9uT3V0cHV0W10gewogICAgICAgIGlmICghdGhpcy5fb3V0cHV0cykgewogICAgICAgICAgICBjb25zdCBvdXRwdXRzID0gdGhpcy5sb2FkT3V0cHV0cygpOwogICAgICAgICAgICB0aGlzLl9vdXRwdXRzID0gb3V0cHV0czsKCiAgICAgICAgICAgIHJldHVybiBvdXRwdXRzOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHRoaXMuX291dHB1dHMgYXMgVHJhbnNhY3Rpb25PdXRwdXRbXTsKICAgIH0KCiAgICBwcml2YXRlIGxvYWRJbnB1dHMoKTogVHJhbnNhY3Rpb25JbnB1dFtdIHsKICAgICAgICBjb25zdCBpbnB1dHNTaXplID0gZ2V0SW5wdXRzU2l6ZSgpOwogICAgICAgIGxldCByZXN1bHRCdWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoaW5wdXRzU2l6ZSk7CiAgICAgICAgaW5wdXRzKHJlc3VsdEJ1ZmZlcik7CgogICAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBCeXRlc1JlYWRlcihVaW50OEFycmF5LndyYXAocmVzdWx0QnVmZmVyKSk7CiAgICAgICAgcmV0dXJuIHJlYWRlci5yZWFkVHJhbnNhY3Rpb25JbnB1dHMoKTsKICAgIH0KCiAgICBwcml2YXRlIGxvYWRPdXRwdXRzKCk6IFRyYW5zYWN0aW9uT3V0cHV0W10gewogICAgICAgIGNvbnN0IG91dHB1dHNTaXplID0gZ2V0T3V0cHV0c1NpemUoKTsKICAgICAgICBsZXQgcmVzdWx0QnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKG91dHB1dHNTaXplKTsKICAgICAgICBvdXRwdXRzKHJlc3VsdEJ1ZmZlcik7CgogICAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBCeXRlc1JlYWRlcihVaW50OEFycmF5LndyYXAocmVzdWx0QnVmZmVyKSk7CiAgICAgICAgcmV0dXJuIHJlYWRlci5yZWFkVHJhbnNhY3Rpb25PdXRwdXRzKCk7CiAgICB9Cn0K",
  "node_modules/@btc-vision/btc-runtime/runtime/env/classes/UTXO.ts": "QGZpbmFsCmV4cG9ydCBjbGFzcyBUcmFuc2FjdGlvbklucHV0IHsKICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigKICAgICAgICBwdWJsaWMgcmVhZG9ubHkgdHhJZDogVWludDhBcnJheSwKICAgICAgICBwdWJsaWMgcmVhZG9ubHkgb3V0cHV0SW5kZXg6IHUxNiwKICAgICAgICBwdWJsaWMgcmVhZG9ubHkgc2NyaXB0U2lnOiBVaW50OEFycmF5LAogICAgKSB7CiAgICB9Cn0KCkBmaW5hbApleHBvcnQgY2xhc3MgVHJhbnNhY3Rpb25PdXRwdXQgewogICAgcHVibGljIGNvbnN0cnVjdG9yKAogICAgICAgIHB1YmxpYyByZWFkb25seSBpbmRleDogdTE2LAogICAgICAgIHB1YmxpYyByZWFkb25seSB0bzogc3RyaW5nLAogICAgICAgIHB1YmxpYyByZWFkb25seSB2YWx1ZTogdTY0LAogICAgKSB7CiAgICB9Cn0K",
  "node_modules/@btc-vision/btc-runtime/runtime/env/global.ts": "Ly8gQHRzLWlnbm9yZQpAZXh0ZXJuYWwoJ2VudicsICdlbnZpcm9ubWVudCcpCmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIGdldEVudmlyb25tZW50VmFyaWFibGVzKG9mZnNldDogdTMyLCBsZW5ndGg6IHUzMiwgcmVzdWx0OiBBcnJheUJ1ZmZlcik6IHZvaWQ7CgovLyBAdHMtaWdub3JlCkBleHRlcm5hbCgnZW52JywgJ2NhbGxkYXRhJykKZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gZ2V0Q2FsbGRhdGEob2Zmc2V0OiB1MzIsIGxlbmd0aDogdTMyLCByZXN1bHQ6IEFycmF5QnVmZmVyKTogdm9pZDsKCi8vIEB0cy1pZ25vcmUKQGV4dGVybmFsKCdlbnYnLCAnbG9hZCcpCmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIGxvYWRQb2ludGVyKGtleTogQXJyYXlCdWZmZXIsIHJlc3VsdDogQXJyYXlCdWZmZXIpOiB2b2lkOwoKLy8gQHRzLWlnbm9yZQpAZXh0ZXJuYWwoJ2VudicsICduZXh0UG9pbnRlckdyZWF0ZXJUaGFuJykKZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gbmV4dFBvaW50ZXJHcmVhdGVyVGhhbihkYXRhOiBVaW50OEFycmF5KTogVWludDhBcnJheTsKCi8vIEB0cy1pZ25vcmUKQGV4dGVybmFsKCdlbnYnLCAnc3RvcmUnKQpleHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBzdG9yZVBvaW50ZXIoa2V5OiBBcnJheUJ1ZmZlciwgdmFsdWU6IEFycmF5QnVmZmVyKTogdm9pZDsKCi8vIEB0cy1pZ25vcmUKQGV4dGVybmFsKCdlbnYnLCAnZGVwbG95RnJvbUFkZHJlc3MnKQpleHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBkZXBsb3lGcm9tQWRkcmVzcyhvcmlnaW5BZGRyZXNzOiBBcnJheUJ1ZmZlciwgc2FsdDogQXJyYXlCdWZmZXIsIGNhbGxkYXRhOiBBcnJheUJ1ZmZlciwgY2FsbGRhdGFMZW5ndGg6IHUzMiwgcmVzdWx0QWRkcmVzczogQXJyYXlCdWZmZXIpOiB1MzI7CgovLyBAdHMtaWdub3JlCkBleHRlcm5hbCgnZW52JywgJ2NhbGwnKQpleHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBjYWxsQ29udHJhY3QoYWRkcmVzczogQXJyYXlCdWZmZXIsIGNhbGxkYXRhOiBBcnJheUJ1ZmZlciwgY2FsbGRhdGFMZW5ndGg6IHUzMiwgcmVzdWx0TGVuZ3RoOiBBcnJheUJ1ZmZlcik6IHUzMjsKCi8vIEB0cy1pZ25vcmUKQGV4dGVybmFsKCdlbnYnLCAnY2FsbFJlc3VsdCcpCmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIGdldENhbGxSZXN1bHQob2Zmc2V0OiB1MzIsIGxlbmd0aDogdTMyLCByZXN1bHQ6IEFycmF5QnVmZmVyKTogdm9pZDsKCi8vIEB0cy1pZ25vcmUKQGV4dGVybmFsKCdkZWJ1ZycsICdsb2cnKQpleHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBsb2coZGF0YTogQXJyYXlCdWZmZXIsIGRhdGFMZW5ndGg6IHUzMik6IHZvaWQ7CgovLyBAdHMtaWdub3JlCkBleHRlcm5hbCgnZW52JywgJ2VtaXQnKQpleHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBlbWl0KGRhdGE6IEFycmF5QnVmZmVyLCBkYXRhTGVuZ3RoOiB1MzIpOiB2b2lkOwoKLy8gQHRzLWlnbm9yZQpAZXh0ZXJuYWwoJ2VudicsICdzaGEyNTYnKQpleHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBfc2hhMjU2KGRhdGE6IEFycmF5QnVmZmVyLCBkYXRhTGVuZ3RoOiB1MzIsIHJlc3VsdDogQXJyYXlCdWZmZXIpOiB2b2lkOwoKZXhwb3J0IGZ1bmN0aW9uIHNoYTI1NihkYXRhOiBVaW50OEFycmF5KTogVWludDhBcnJheSB7CiAgICBjb25zdCByZXN1bHRCdWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoMzIpOwogICAgX3NoYTI1NihkYXRhLmJ1ZmZlciwgZGF0YS5sZW5ndGgsIHJlc3VsdEJ1ZmZlcik7CiAgICByZXR1cm4gVWludDhBcnJheS53cmFwKHJlc3VsdEJ1ZmZlcik7Cn0KCi8vIEB0cy1pZ25vcmUKQGV4dGVybmFsKCdlbnYnLCAncmlwZW1kMTYwJykKZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gX3JpcGVtZDE2MChkYXRhOiBBcnJheUJ1ZmZlciwgZGF0YUxlbmd0aDogdTMyLCByZXN1bHQ6IEFycmF5QnVmZmVyKTogdm9pZDsKCmV4cG9ydCBmdW5jdGlvbiByaXBlbWQxNjAoZGF0YTogVWludDhBcnJheSk6IFVpbnQ4QXJyYXkgewogICAgY29uc3QgcmVzdWx0QnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKDIwKTsKICAgIF9yaXBlbWQxNjAoZGF0YS5idWZmZXIsIGRhdGEubGVuZ3RoLCByZXN1bHRCdWZmZXIpOwoKICAgIHJldHVybiBVaW50OEFycmF5LndyYXAocmVzdWx0QnVmZmVyKTsKfQoKLy8gQHRzLWlnbm9yZQpAZXh0ZXJuYWwoJ2VudicsICd2YWxpZGF0ZUJpdGNvaW5BZGRyZXNzJykKZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gdmFsaWRhdGVCaXRjb2luQWRkcmVzcyhhZGRyZXNzOiBBcnJheUJ1ZmZlciwgYWRkcmVzc0xlbmd0aDogdTMyKTogdTMyOwoKLy8gQHRzLWlnbm9yZQpAZXh0ZXJuYWwoJ2VudicsICdpbnB1dHMnKQpleHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBpbnB1dHMocmVzdWx0OiBBcnJheUJ1ZmZlcik6IHZvaWQ7CgovLyBAdHMtaWdub3JlCkBleHRlcm5hbCgnZW52JywgJ2lucHV0c1NpemUnKQpleHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBnZXRJbnB1dHNTaXplKCk6IHUzMjsKCi8vIEB0cy1pZ25vcmUKQGV4dGVybmFsKCdlbnYnLCAnb3V0cHV0cycpCmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIG91dHB1dHMocmVzdWx0OiBBcnJheUJ1ZmZlcik6IHZvaWQ7CgovLyBAdHMtaWdub3JlCkBleHRlcm5hbCgnZW52JywgJ291dHB1dHNTaXplJykKZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gZ2V0T3V0cHV0c1NpemUoKTogdTMyOwoKLy8gQHRzLWlnbm9yZQpAZXh0ZXJuYWwoJ2VudicsICd2ZXJpZnlTY2hub3JyU2lnbmF0dXJlJykKZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gdmVyaWZ5U2Nobm9yclNpZ25hdHVyZShwdWJsaWNLZXk6IEFycmF5QnVmZmVyLCBzaWduYXR1cmU6IEFycmF5QnVmZmVyLCBtZXNzYWdlOiBBcnJheUJ1ZmZlcik6IHUzMjsKCi8vIEB0cy1pZ25vcmUKQGV4dGVybmFsKCdlbnYnLCAnZXhpdCcpCmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIGVudl9leGl0KHN0YXR1czogdTMyLCBkYXRhOiBBcnJheUJ1ZmZlciwgZGF0YUxlbmd0aDogdTMyKTogdm9pZDsK",
  "node_modules/@btc-vision/btc-runtime/runtime/env/index.ts": "aW1wb3J0IHsgQmxvY2tjaGFpbkVudmlyb25tZW50IH0gZnJvbSAnLi9CbG9ja2NoYWluRW52aXJvbm1lbnQnOwoKZXhwb3J0IGNvbnN0IEJsb2NrY2hhaW46IEJsb2NrY2hhaW5FbnZpcm9ubWVudCA9IG5ldyBCbG9ja2NoYWluRW52aXJvbm1lbnQoKTsK",
  "node_modules/@btc-vision/btc-runtime/runtime/events/NetEvent.ts": "aW1wb3J0IHsgQnl0ZXNXcml0ZXIgfSBmcm9tICcuLi9idWZmZXIvQnl0ZXNXcml0ZXInOwppbXBvcnQgeyBSZXZlcnQgfSBmcm9tICcuLi90eXBlcy9SZXZlcnQnOwoKZXhwb3J0IGNvbnN0IE1BWF9FVkVOVF9EQVRBX1NJWkU6IHUzMiA9IDM1MjsgLy8gMzUyIGJ5dGVzIG1heCBwZXIgZXZlbnQuCgpleHBvcnQgYWJzdHJhY3QgY2xhc3MgTmV0RXZlbnQgewogICAgcHJpdmF0ZSByZWFkb25seSBidWZmZXI6IFVpbnQ4QXJyYXk7CgogICAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKAogICAgICAgIHB1YmxpYyByZWFkb25seSBldmVudFR5cGU6IHN0cmluZywKICAgICAgICBwcm90ZWN0ZWQgZGF0YTogQnl0ZXNXcml0ZXIsCiAgICApIHsKICAgICAgICBpZiAoZGF0YS5idWZmZXJMZW5ndGgoKSA+IE1BWF9FVkVOVF9EQVRBX1NJWkUpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFdmVudCBkYXRhIGxlbmd0aCBleGNlZWRzIG1heGltdW0gbGVuZ3RoLicpOwogICAgICAgIH0KCiAgICAgICAgdGhpcy5idWZmZXIgPSBkYXRhLmdldEJ1ZmZlcigpOwogICAgfQoKICAgIHB1YmxpYyBnZXQgbGVuZ3RoKCk6IHUzMiB7CiAgICAgICAgaWYgKCF0aGlzLmJ1ZmZlcikgewogICAgICAgICAgICB0aHJvdyBuZXcgUmV2ZXJ0KCdCdWZmZXIgaXMgbm90IGRlZmluZWQnKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoOwogICAgfQoKICAgIHB1YmxpYyBnZXRFdmVudERhdGEoKTogVWludDhBcnJheSB7CiAgICAgICAgaWYgKCF0aGlzLmJ1ZmZlcikgewogICAgICAgICAgICB0aHJvdyBuZXcgUmV2ZXJ0KCdCdWZmZXIgaXMgbm90IGRlZmluZWQnKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlcjsKICAgIH0KfQo=",
  "node_modules/@btc-vision/btc-runtime/runtime/events/predefined/ApproveEvent.ts": "aW1wb3J0IHsgdTI1NiB9IGZyb20gJ0BidGMtdmlzaW9uL2FzLWJpZ251bS9hc3NlbWJseSc7CmltcG9ydCB7IEJ5dGVzV3JpdGVyIH0gZnJvbSAnLi4vLi4vYnVmZmVyL0J5dGVzV3JpdGVyJzsKaW1wb3J0IHsgQWRkcmVzcyB9IGZyb20gJy4uLy4uL3R5cGVzL0FkZHJlc3MnOwppbXBvcnQgeyBBRERSRVNTX0JZVEVfTEVOR1RILCBVMjU2X0JZVEVfTEVOR1RIIH0gZnJvbSAnLi4vLi4vdXRpbHMvbGVuZ3Rocyc7CmltcG9ydCB7IE5ldEV2ZW50IH0gZnJvbSAnLi4vTmV0RXZlbnQnOwoKQGZpbmFsCmV4cG9ydCBjbGFzcyBBcHByb3ZlRXZlbnQgZXh0ZW5kcyBOZXRFdmVudCB7CiAgICBjb25zdHJ1Y3Rvcihvd25lcjogQWRkcmVzcywgc3BlbmRlcjogQWRkcmVzcywgdmFsdWU6IHUyNTYpIHsKICAgICAgICBjb25zdCBkYXRhOiBCeXRlc1dyaXRlciA9IG5ldyBCeXRlc1dyaXRlcihBRERSRVNTX0JZVEVfTEVOR1RIICogMiArIFUyNTZfQllURV9MRU5HVEgpOwogICAgICAgIGRhdGEud3JpdGVBZGRyZXNzKG93bmVyKTsKICAgICAgICBkYXRhLndyaXRlQWRkcmVzcyhzcGVuZGVyKTsKICAgICAgICBkYXRhLndyaXRlVTI1Nih2YWx1ZSk7CgogICAgICAgIHN1cGVyKCdBcHByb3ZlJywgZGF0YSk7CiAgICB9Cn0K",
  "node_modules/@btc-vision/btc-runtime/runtime/events/predefined/BurnEvent.ts": "aW1wb3J0IHsgdTI1NiB9IGZyb20gJ0BidGMtdmlzaW9uL2FzLWJpZ251bS9hc3NlbWJseSc7CmltcG9ydCB7IEJ5dGVzV3JpdGVyIH0gZnJvbSAnLi4vLi4vYnVmZmVyL0J5dGVzV3JpdGVyJzsKaW1wb3J0IHsgVTI1Nl9CWVRFX0xFTkdUSCB9IGZyb20gJy4uLy4uL3V0aWxzL2xlbmd0aHMnOwppbXBvcnQgeyBOZXRFdmVudCB9IGZyb20gJy4uL05ldEV2ZW50JzsKCkBmaW5hbApleHBvcnQgY2xhc3MgQnVybkV2ZW50IGV4dGVuZHMgTmV0RXZlbnQgewogICAgY29uc3RydWN0b3IoYW1vdW50OiB1MjU2KSB7CiAgICAgICAgY29uc3QgZGF0YTogQnl0ZXNXcml0ZXIgPSBuZXcgQnl0ZXNXcml0ZXIoVTI1Nl9CWVRFX0xFTkdUSCk7CiAgICAgICAgZGF0YS53cml0ZVUyNTYoYW1vdW50KTsKCiAgICAgICAgc3VwZXIoJ0J1cm4nLCBkYXRhKTsKICAgIH0KfQo=",
  "node_modules/@btc-vision/btc-runtime/runtime/events/predefined/ClaimEvent.ts": "aW1wb3J0IHsgdTI1NiB9IGZyb20gJ0BidGMtdmlzaW9uL2FzLWJpZ251bS9hc3NlbWJseSc7CmltcG9ydCB7IEJ5dGVzV3JpdGVyIH0gZnJvbSAnLi4vLi4vYnVmZmVyL0J5dGVzV3JpdGVyJzsKaW1wb3J0IHsgVTI1Nl9CWVRFX0xFTkdUSCB9IGZyb20gJy4uLy4uL3V0aWxzL2xlbmd0aHMnOwppbXBvcnQgeyBOZXRFdmVudCB9IGZyb20gJy4uL05ldEV2ZW50JzsKCkBmaW5hbApleHBvcnQgY2xhc3MgQ2xhaW1FdmVudCBleHRlbmRzIE5ldEV2ZW50IHsKICAgIGNvbnN0cnVjdG9yKGFtb3VudDogdTI1NikgewogICAgICAgIGNvbnN0IGRhdGE6IEJ5dGVzV3JpdGVyID0gbmV3IEJ5dGVzV3JpdGVyKFUyNTZfQllURV9MRU5HVEgpOwogICAgICAgIGRhdGEud3JpdGVVMjU2KGFtb3VudCk7CgogICAgICAgIHN1cGVyKCdDbGFpbScsIGRhdGEpOwogICAgfQp9Cg==",
  "node_modules/@btc-vision/btc-runtime/runtime/events/predefined/index.ts": "ZXhwb3J0ICogZnJvbSAnLi9BcHByb3ZlRXZlbnQnOwpleHBvcnQgKiBmcm9tICcuL0J1cm5FdmVudCc7CmV4cG9ydCAqIGZyb20gJy4vTWludEV2ZW50JzsKZXhwb3J0ICogZnJvbSAnLi9UcmFuc2ZlckV2ZW50JzsKZXhwb3J0ICogZnJvbSAnLi9DbGFpbUV2ZW50JzsKZXhwb3J0ICogZnJvbSAnLi9TdGFrZUV2ZW50JzsKZXhwb3J0ICogZnJvbSAnLi9VbnN0YWtlRXZlbnQnOwo=",
  "node_modules/@btc-vision/btc-runtime/runtime/events/predefined/MintEvent.ts": "aW1wb3J0IHsgdTI1NiB9IGZyb20gJ0BidGMtdmlzaW9uL2FzLWJpZ251bS9hc3NlbWJseSc7CmltcG9ydCB7IEJ5dGVzV3JpdGVyIH0gZnJvbSAnLi4vLi4vYnVmZmVyL0J5dGVzV3JpdGVyJzsKaW1wb3J0IHsgQWRkcmVzcyB9IGZyb20gJy4uLy4uL3R5cGVzL0FkZHJlc3MnOwppbXBvcnQgeyBBRERSRVNTX0JZVEVfTEVOR1RILCBVMjU2X0JZVEVfTEVOR1RIIH0gZnJvbSAnLi4vLi4vdXRpbHMnOwppbXBvcnQgeyBOZXRFdmVudCB9IGZyb20gJy4uL05ldEV2ZW50JzsKCkBmaW5hbApleHBvcnQgY2xhc3MgTWludEV2ZW50IGV4dGVuZHMgTmV0RXZlbnQgewogICAgY29uc3RydWN0b3IoYWRkcmVzczogQWRkcmVzcywgYW1vdW50OiB1MjU2KSB7CiAgICAgICAgY29uc3QgZGF0YTogQnl0ZXNXcml0ZXIgPSBuZXcgQnl0ZXNXcml0ZXIoQUREUkVTU19CWVRFX0xFTkdUSCArIFUyNTZfQllURV9MRU5HVEgpOwoKICAgICAgICBkYXRhLndyaXRlQWRkcmVzcyhhZGRyZXNzKTsKICAgICAgICBkYXRhLndyaXRlVTI1NihhbW91bnQpOwoKICAgICAgICBzdXBlcignTWludCcsIGRhdGEpOwogICAgfQp9Cg==",
  "node_modules/@btc-vision/btc-runtime/runtime/events/predefined/StakeEvent.ts": "aW1wb3J0IHsgdTI1NiB9IGZyb20gJ0BidGMtdmlzaW9uL2FzLWJpZ251bS9hc3NlbWJseSc7CmltcG9ydCB7IEJ5dGVzV3JpdGVyIH0gZnJvbSAnLi4vLi4vYnVmZmVyL0J5dGVzV3JpdGVyJzsKaW1wb3J0IHsgVTI1Nl9CWVRFX0xFTkdUSCB9IGZyb20gJy4uLy4uL3V0aWxzL2xlbmd0aHMnOwppbXBvcnQgeyBOZXRFdmVudCB9IGZyb20gJy4uL05ldEV2ZW50JzsKCkBmaW5hbApleHBvcnQgY2xhc3MgU3Rha2VFdmVudCBleHRlbmRzIE5ldEV2ZW50IHsKICAgIGNvbnN0cnVjdG9yKGFtb3VudDogdTI1NikgewogICAgICAgIGNvbnN0IGRhdGE6IEJ5dGVzV3JpdGVyID0gbmV3IEJ5dGVzV3JpdGVyKFUyNTZfQllURV9MRU5HVEgpOwogICAgICAgIGRhdGEud3JpdGVVMjU2KGFtb3VudCk7CgogICAgICAgIHN1cGVyKCdTdGFrZScsIGRhdGEpOwogICAgfQp9Cg==",
  "node_modules/@btc-vision/btc-runtime/runtime/events/predefined/TransferEvent.ts": "aW1wb3J0IHsgdTI1NiB9IGZyb20gJ0BidGMtdmlzaW9uL2FzLWJpZ251bS9hc3NlbWJseSc7CmltcG9ydCB7IEJ5dGVzV3JpdGVyIH0gZnJvbSAnLi4vLi4vYnVmZmVyL0J5dGVzV3JpdGVyJzsKaW1wb3J0IHsgQWRkcmVzcyB9IGZyb20gJy4uLy4uL3R5cGVzL0FkZHJlc3MnOwppbXBvcnQgeyBBRERSRVNTX0JZVEVfTEVOR1RILCBVMjU2X0JZVEVfTEVOR1RIIH0gZnJvbSAnLi4vLi4vdXRpbHMvbGVuZ3Rocyc7CmltcG9ydCB7IE5ldEV2ZW50IH0gZnJvbSAnLi4vTmV0RXZlbnQnOwoKQGZpbmFsCmV4cG9ydCBjbGFzcyBUcmFuc2ZlckV2ZW50IGV4dGVuZHMgTmV0RXZlbnQgewogICAgY29uc3RydWN0b3IoZnJvbTogQWRkcmVzcywgdG86IEFkZHJlc3MsIGFtb3VudDogdTI1NikgewogICAgICAgIGNvbnN0IGRhdGE6IEJ5dGVzV3JpdGVyID0gbmV3IEJ5dGVzV3JpdGVyKEFERFJFU1NfQllURV9MRU5HVEggKiAyICsgVTI1Nl9CWVRFX0xFTkdUSCk7CiAgICAgICAgZGF0YS53cml0ZUFkZHJlc3MoZnJvbSk7CiAgICAgICAgZGF0YS53cml0ZUFkZHJlc3ModG8pOwogICAgICAgIGRhdGEud3JpdGVVMjU2KGFtb3VudCk7CgogICAgICAgIHN1cGVyKCdUcmFuc2ZlcicsIGRhdGEpOwogICAgfQp9Cg==",
  "node_modules/@btc-vision/btc-runtime/runtime/events/predefined/UnstakeEvent.ts": "aW1wb3J0IHsgdTI1NiB9IGZyb20gJ0BidGMtdmlzaW9uL2FzLWJpZ251bS9hc3NlbWJseSc7CmltcG9ydCB7IEJ5dGVzV3JpdGVyIH0gZnJvbSAnLi4vLi4vYnVmZmVyL0J5dGVzV3JpdGVyJzsKaW1wb3J0IHsgVTI1Nl9CWVRFX0xFTkdUSCB9IGZyb20gJy4uLy4uL3V0aWxzL2xlbmd0aHMnOwppbXBvcnQgeyBOZXRFdmVudCB9IGZyb20gJy4uL05ldEV2ZW50JzsKCkBmaW5hbApleHBvcnQgY2xhc3MgVW5zdGFrZUV2ZW50IGV4dGVuZHMgTmV0RXZlbnQgewogICAgY29uc3RydWN0b3IoYW1vdW50OiB1MjU2KSB7CiAgICAgICAgY29uc3QgZGF0YTogQnl0ZXNXcml0ZXIgPSBuZXcgQnl0ZXNXcml0ZXIoVTI1Nl9CWVRFX0xFTkdUSCk7CiAgICAgICAgZGF0YS53cml0ZVUyNTYoYW1vdW50KTsKCiAgICAgICAgc3VwZXIoJ1Vuc3Rha2UnLCBkYXRhKTsKICAgIH0KfQo=",
  "node_modules/@btc-vision/btc-runtime/runtime/exports/index.ts": "aW1wb3J0IHsgQmxvY2tjaGFpbiB9IGZyb20gJy4uL2Vudic7CmltcG9ydCB7IEJ5dGVzV3JpdGVyIH0gZnJvbSAnLi4vYnVmZmVyL0J5dGVzV3JpdGVyJzsKaW1wb3J0IHsgQnl0ZXNSZWFkZXIgfSBmcm9tICcuLi9idWZmZXIvQnl0ZXNSZWFkZXInOwppbXBvcnQgeyBTZWxlY3RvciB9IGZyb20gJy4uL21hdGgvYWJpJzsKaW1wb3J0IHsgQ2FsbGRhdGEgfSBmcm9tICcuLi90eXBlcyc7CmltcG9ydCB7IGVudl9leGl0LCBnZXRDYWxsZGF0YSwgZ2V0RW52aXJvbm1lbnRWYXJpYWJsZXMgfSBmcm9tICcuLi9lbnYvZ2xvYmFsJzsKCmNvbnN0IEVOVklST05NRU5UX1ZBUklBQkxFU19CWVRFX0xFTkdUSDogdTMyID0gMjQwOwoKZXhwb3J0IGZ1bmN0aW9uIGV4ZWN1dGUoY2FsbGRhdGFMZW5ndGg6IHUzMik6IHUzMiB7CiAgICBjb25zdCBlbnZpcm9ubWVudFZhcmlhYmxlc0J1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihFTlZJUk9OTUVOVF9WQVJJQUJMRVNfQllURV9MRU5HVEgpOwogICAgZ2V0RW52aXJvbm1lbnRWYXJpYWJsZXMoMCwgRU5WSVJPTk1FTlRfVkFSSUFCTEVTX0JZVEVfTEVOR1RILCBlbnZpcm9ubWVudFZhcmlhYmxlc0J1ZmZlcik7CiAgICBCbG9ja2NoYWluLnNldEVudmlyb25tZW50VmFyaWFibGVzKFVpbnQ4QXJyYXkud3JhcChlbnZpcm9ubWVudFZhcmlhYmxlc0J1ZmZlcikpOwoKICAgIGNvbnN0IGNhbGxkYXRhQnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKGNhbGxkYXRhTGVuZ3RoKTsKICAgIGdldENhbGxkYXRhKDAsIGNhbGxkYXRhTGVuZ3RoLCBjYWxsZGF0YUJ1ZmZlcik7CgogICAgY29uc3QgY2FsbGRhdGE6IENhbGxkYXRhID0gbmV3IEJ5dGVzUmVhZGVyKFVpbnQ4QXJyYXkud3JhcChjYWxsZGF0YUJ1ZmZlcikpOwogICAgY29uc3Qgc2VsZWN0b3I6IFNlbGVjdG9yID0gY2FsbGRhdGEucmVhZFNlbGVjdG9yKCk7CgogICAgQmxvY2tjaGFpbi5vbkV4ZWN1dGlvblN0YXJ0ZWQoKTsKCiAgICBjb25zdCByZXN1bHQ6IEJ5dGVzV3JpdGVyID0gQmxvY2tjaGFpbi5jb250cmFjdC5leGVjdXRlKHNlbGVjdG9yLCBjYWxsZGF0YSk7CgogICAgQmxvY2tjaGFpbi5vbkV4ZWN1dGlvbkNvbXBsZXRlZCgpOwoKICAgIGNvbnN0IHJlc3VsdEJ1ZmZlciA9IHJlc3VsdC5nZXRCdWZmZXIoKS5idWZmZXI7CiAgICBjb25zdCByZXN1bHRMZW5ndGggPSByZXN1bHRCdWZmZXIuYnl0ZUxlbmd0aDsKICAgIGlmIChyZXN1bHRMZW5ndGggPiAwKSB7CiAgICAgICAgZW52X2V4aXQoMCwgcmVzdWx0QnVmZmVyLCByZXN1bHRMZW5ndGgpOwogICAgfQoKICAgIHJldHVybiAwOwp9CgpleHBvcnQgZnVuY3Rpb24gb25EZXBsb3koY2FsbGRhdGFMZW5ndGg6IHUzMik6IHUzMiB7CiAgICBjb25zdCBlbnZpcm9ubWVudFZhcmlhYmxlc0J1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihFTlZJUk9OTUVOVF9WQVJJQUJMRVNfQllURV9MRU5HVEgpOwogICAgZ2V0RW52aXJvbm1lbnRWYXJpYWJsZXMoMCwgRU5WSVJPTk1FTlRfVkFSSUFCTEVTX0JZVEVfTEVOR1RILCBlbnZpcm9ubWVudFZhcmlhYmxlc0J1ZmZlcik7CiAgICBCbG9ja2NoYWluLnNldEVudmlyb25tZW50VmFyaWFibGVzKFVpbnQ4QXJyYXkud3JhcChlbnZpcm9ubWVudFZhcmlhYmxlc0J1ZmZlcikpOwoKICAgIGNvbnN0IGNhbGxkYXRhQnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKGNhbGxkYXRhTGVuZ3RoKTsKICAgIGdldENhbGxkYXRhKDAsIGNhbGxkYXRhTGVuZ3RoLCBjYWxsZGF0YUJ1ZmZlcik7CgogICAgY29uc3QgY2FsbGRhdGE6IENhbGxkYXRhID0gbmV3IEJ5dGVzUmVhZGVyKFVpbnQ4QXJyYXkud3JhcChjYWxsZGF0YUJ1ZmZlcikpOwoKICAgIEJsb2NrY2hhaW4ub25FeGVjdXRpb25TdGFydGVkKCk7CiAgICBCbG9ja2NoYWluLm9uRGVwbG95bWVudChjYWxsZGF0YSk7CiAgICBCbG9ja2NoYWluLm9uRXhlY3V0aW9uQ29tcGxldGVkKCk7CgogICAgcmV0dXJuIDA7Cn0K",
  "node_modules/@btc-vision/btc-runtime/runtime/generic/AddressMap.ts": "aW1wb3J0IHsgUmV2ZXJ0IH0gZnJvbSAnLi4vdHlwZXMvUmV2ZXJ0JzsKaW1wb3J0IHsgTWFwIH0gZnJvbSAnLi9NYXAnOwppbXBvcnQgeyBBZGRyZXNzIH0gZnJvbSAnLi4vdHlwZXMvQWRkcmVzcyc7CgpAZmluYWwKZXhwb3J0IGNsYXNzIEFkZHJlc3NNYXA8Vj4gZXh0ZW5kcyBNYXA8QWRkcmVzcywgVj4gewogICAgcHVibGljIHNldChrZXk6IEFkZHJlc3MsIHZhbHVlOiBWKTogdGhpcyB7CiAgICAgICAgY29uc3QgaW5kZXg6IGkzMiA9IHRoaXMuaW5kZXhPZihrZXkpOwogICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHsKICAgICAgICAgICAgdGhpcy5fa2V5cy5wdXNoKGtleSk7CiAgICAgICAgICAgIHRoaXMuX3ZhbHVlcy5wdXNoKHZhbHVlKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLl92YWx1ZXNbaW5kZXhdID0gdmFsdWU7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdGhpczsKICAgIH0KCiAgICBwdWJsaWMgaW5kZXhPZihhZGRyZXNzOiBBZGRyZXNzKTogaTMyIHsKICAgICAgICBmb3IgKGxldCBpOiBpMzIgPSAwOyBpIDwgdGhpcy5fa2V5cy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBjb25zdCBrZXkgPSB0aGlzLl9rZXlzW2ldOwoKICAgICAgICAgICAgaWYgKGFkZHJlc3MuZXF1YWxzKGtleSkpIHsKICAgICAgICAgICAgICAgIHJldHVybiBpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gLTE7CiAgICB9CgogICAgcHVibGljIGhhcyhrZXk6IEFkZHJlc3MpOiBib29sIHsKICAgICAgICBmb3IgKGxldCBpOiBpMzIgPSAwOyBpIDwgdGhpcy5fa2V5cy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBpZiAoa2V5LmVxdWFscyh0aGlzLl9rZXlzW2ldKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICBwdWJsaWMgZ2V0KGtleTogQWRkcmVzcyk6IFYgewogICAgICAgIGNvbnN0IGluZGV4OiBpMzIgPSB0aGlzLmluZGV4T2Yoa2V5KTsKICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBSZXZlcnQoJ0tleSBub3QgZm91bmQgaW4gbWFwIChBZGRyZXNzTWFwKScpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWVzW2luZGV4XTsKICAgIH0KCiAgICBwdWJsaWMgZGVsZXRlKGtleTogQWRkcmVzcyk6IGJvb2wgewogICAgICAgIGNvbnN0IGluZGV4OiBpMzIgPSB0aGlzLmluZGV4T2Yoa2V5KTsKICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CgogICAgICAgIHRoaXMuX2tleXMuc3BsaWNlKGluZGV4LCAxKTsKICAgICAgICB0aGlzLl92YWx1ZXMuc3BsaWNlKGluZGV4LCAxKTsKCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9Cn0K",
  "node_modules/@btc-vision/btc-runtime/runtime/generic/Map.ts": "aW1wb3J0IHsgUmV2ZXJ0IH0gZnJvbSAnLi4vdHlwZXMvUmV2ZXJ0JzsKCmV4cG9ydCBpbnRlcmZhY2UgSU1hcDxLLCBWPiB7CiAgICByZWFkb25seSBzaXplOiBpMzI7CgogICAgaGFzKGtleTogSyk6IGJvb2w7CgogICAgc2V0KGtleTogSywgdmFsdWU6IFYpOiB0aGlzOwoKICAgIGdldChrZXk6IEspOiBWOwoKICAgIGRlbGV0ZShrZXk6IEspOiBib29sOwoKICAgIGNsZWFyKCk6IHZvaWQ7CgogICAga2V5cygpOiBLW107IC8vIHByZWxpbWluYXJ5CiAgICB2YWx1ZXMoKTogVltdOyAvLyBwcmVsaW1pbmFyeQogICAgdG9TdHJpbmcoKTogc3RyaW5nOwp9CgpleHBvcnQgY2xhc3MgTWFwPEssIFY+IGltcGxlbWVudHMgSU1hcDxLLCBWPiB7CiAgICBwcm90ZWN0ZWQgX2tleXM6IEtbXSA9IFtdOwogICAgcHJvdGVjdGVkIF92YWx1ZXM6IFZbXSA9IFtdOwoKICAgIHB1YmxpYyBnZXQgc2l6ZSgpOiBpMzIgewogICAgICAgIHJldHVybiB0aGlzLl9rZXlzLmxlbmd0aDsKICAgIH0KCiAgICBwdWJsaWMga2V5cygpOiBLW10gewogICAgICAgIHJldHVybiB0aGlzLl9rZXlzOwogICAgfQoKICAgIHB1YmxpYyB2YWx1ZXMoKTogVltdIHsKICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWVzOwogICAgfQoKICAgIHB1YmxpYyBzZXQoa2V5OiBLLCB2YWx1ZTogVik6IHRoaXMgewogICAgICAgIGNvbnN0IGluZGV4OiBpMzIgPSB0aGlzLmluZGV4T2Yoa2V5KTsKICAgICAgICBpZiAoaW5kZXggPT0gLTEpIHsKICAgICAgICAgICAgdGhpcy5fa2V5cy5wdXNoKGtleSk7CiAgICAgICAgICAgIHRoaXMuX3ZhbHVlcy5wdXNoKHZhbHVlKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLl92YWx1ZXNbaW5kZXhdID0gdmFsdWU7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdGhpczsKICAgIH0KCiAgICBwdWJsaWMgaW5kZXhPZihrZXk6IEspOiBpMzIgewogICAgICAgIGZvciAobGV0IGk6IGkzMiA9IDA7IGkgPCB0aGlzLl9rZXlzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmICh0aGlzLl9rZXlzW2ldID09IGtleSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiAtMTsKICAgIH0KCiAgICBwdWJsaWMgZ2V0KGtleTogSyk6IFYgewogICAgICAgIGNvbnN0IGluZGV4OiBpMzIgPSB0aGlzLmluZGV4T2Yoa2V5KTsKICAgICAgICBpZiAoaW5kZXggPT0gLTEpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IFJldmVydCgnS2V5IG5vdCBmb3VuZCBpbiBtYXAgKE1hcCknKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlc1tpbmRleF07CiAgICB9CgogICAgcHVibGljIGhhcyhrZXk6IEspOiBib29sIHsKICAgICAgICByZXR1cm4gdGhpcy5pbmRleE9mKGtleSkgIT0gLTE7CiAgICB9CgogICAgcHVibGljIGRlbGV0ZShrZXk6IEspOiBib29sIHsKICAgICAgICBjb25zdCBpbmRleDogaTMyID0gdGhpcy5pbmRleE9mKGtleSk7CiAgICAgICAgaWYgKGluZGV4ID09IC0xKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CgogICAgICAgIHRoaXMuX2tleXMuc3BsaWNlKGluZGV4LCAxKTsKICAgICAgICB0aGlzLl92YWx1ZXMuc3BsaWNlKGluZGV4LCAxKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBwdWJsaWMgY2xlYXIoKTogdm9pZCB7CiAgICAgICAgdGhpcy5fa2V5cyA9IFtdOwogICAgICAgIHRoaXMuX3ZhbHVlcyA9IFtdOwogICAgfQoKICAgIHB1YmxpYyB0b1N0cmluZygpOiBzdHJpbmcgewogICAgICAgIGNvbnN0IHN0cjogc3RyaW5nID0gYGA7CgogICAgICAgIGZvciAobGV0IGk6IGkzMiA9IDA7IGkgPCB0aGlzLl9rZXlzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHN0ci5jb25jYXQoYFske3RoaXMuX2tleXNbaV19XSA9PiBbJHt0aGlzLl92YWx1ZXNbaV19XWApOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHN0cjsKICAgIH0KfQo=",
  "node_modules/@btc-vision/btc-runtime/runtime/generic/MapU256.ts": "aW1wb3J0IHsgUmV2ZXJ0IH0gZnJvbSAnLi4vdHlwZXMvUmV2ZXJ0JzsKaW1wb3J0IHsgdTI1NiB9IGZyb20gJ0BidGMtdmlzaW9uL2FzLWJpZ251bS9hc3NlbWJseSc7CmltcG9ydCB7IE1hcCB9IGZyb20gJy4vTWFwJzsKCmV4cG9ydCBjbGFzcyBNYXBVMjU2IGV4dGVuZHMgTWFwPHUyNTYsIHUyNTY+IHsKICAgIHB1YmxpYyBzZXQoa2V5OiB1MjU2LCB2YWx1ZTogdTI1Nik6IHRoaXMgewogICAgICAgIGNvbnN0IGluZGV4OiBpMzIgPSB0aGlzLmluZGV4T2Yoa2V5KTsKICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7CiAgICAgICAgICAgIHRoaXMuX2tleXMucHVzaChrZXkpOwogICAgICAgICAgICB0aGlzLl92YWx1ZXMucHVzaCh2YWx1ZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpcy5fdmFsdWVzW2luZGV4XSA9IHZhbHVlOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CgogICAgcHVibGljIGluZGV4T2YocG9pbnRlckhhc2g6IHUyNTYpOiBpMzIgewogICAgICAgIGZvciAobGV0IGk6IGkzMiA9IDA7IGkgPCB0aGlzLl9rZXlzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGNvbnN0IGtleSA9IHRoaXMuX2tleXNbaV07CgogICAgICAgICAgICBpZiAodTI1Ni5lcShrZXksIHBvaW50ZXJIYXNoKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiAtMTsKICAgIH0KCiAgICBwdWJsaWMgaGFzKGtleTogdTI1Nik6IGJvb2wgewogICAgICAgIGZvciAobGV0IGk6IGkzMiA9IDA7IGkgPCB0aGlzLl9rZXlzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmICh1MjU2LmVxKHRoaXMuX2tleXNbaV0sIGtleSkpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgcHVibGljIGdldChrZXk6IHUyNTYpOiB1MjU2IHsKICAgICAgICBjb25zdCBpbmRleDogaTMyID0gdGhpcy5pbmRleE9mKGtleSk7CiAgICAgICAgaWYgKGluZGV4ID09PSAtMSkgewogICAgICAgICAgICB0aHJvdyBuZXcgUmV2ZXJ0KCdLZXkgbm90IGZvdW5kIGluIG1hcCAodTI1NiknKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlc1tpbmRleF07CiAgICB9CgogICAgcHVibGljIGRlbGV0ZShrZXk6IHUyNTYpOiBib29sIHsKICAgICAgICBjb25zdCBpbmRleDogaTMyID0gdGhpcy5pbmRleE9mKGtleSk7CiAgICAgICAgaWYgKGluZGV4ID09PSAtMSkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQoKICAgICAgICB0aGlzLl9rZXlzLnNwbGljZShpbmRleCwgMSk7CiAgICAgICAgdGhpcy5fdmFsdWVzLnNwbGljZShpbmRleCwgMSk7CgogICAgICAgIHJldHVybiB0cnVlOwogICAgfQp9Cg==",
  "node_modules/@btc-vision/btc-runtime/runtime/generic/MapUint8Array.ts": "aW1wb3J0IHsgUmV2ZXJ0IH0gZnJvbSAnLi4vdHlwZXMvUmV2ZXJ0JzsKaW1wb3J0IHsgSU1hcCB9IGZyb20gJy4vTWFwJzsKCmV4cG9ydCBmdW5jdGlvbiBlcVVpbnQoZGF0YTogVWludDhBcnJheSwgZGF0YTI6IFVpbnQ4QXJyYXkpOiBib29sIHsKICAgIGlmIChkYXRhLmxlbmd0aCAhPT0gZGF0YTIubGVuZ3RoKSByZXR1cm4gZmFsc2U7CgogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgaWYgKGRhdGFbaV0gIT09IGRhdGEyW2ldKSByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgcmV0dXJuIHRydWU7Cn0KCkBmaW5hbApleHBvcnQgY2xhc3MgTWFwVWludDhBcnJheSBpbXBsZW1lbnRzIElNYXA8VWludDhBcnJheSwgVWludDhBcnJheT4gewogICAgcHJvdGVjdGVkIF9rZXlzOiBVaW50OEFycmF5W10gPSBbXTsKICAgIHByb3RlY3RlZCBfdmFsdWVzOiBVaW50OEFycmF5W10gPSBbXTsKCiAgICBwdWJsaWMgZ2V0IHNpemUoKTogaTMyIHsKICAgICAgICByZXR1cm4gdGhpcy5fa2V5cy5sZW5ndGg7CiAgICB9CgogICAgcHVibGljIGtleXMoKTogVWludDhBcnJheVtdIHsKICAgICAgICByZXR1cm4gdGhpcy5fa2V5czsKICAgIH0KCiAgICBwdWJsaWMgdmFsdWVzKCk6IFVpbnQ4QXJyYXlbXSB7CiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlczsKICAgIH0KCiAgICBwdWJsaWMgc2V0KGtleTogVWludDhBcnJheSwgdmFsdWU6IFVpbnQ4QXJyYXkpOiB0aGlzIHsKICAgICAgICBjb25zdCBpbmRleDogaTMyID0gdGhpcy5pbmRleE9mKGtleSk7CiAgICAgICAgaWYgKGluZGV4ID09PSAtMSkgewogICAgICAgICAgICB0aGlzLl9rZXlzLnB1c2goa2V5KTsKICAgICAgICAgICAgdGhpcy5fdmFsdWVzLnB1c2godmFsdWUpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRoaXMuX3ZhbHVlc1tpbmRleF0gPSB2YWx1ZTsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0aGlzOwogICAgfQoKICAgIHB1YmxpYyBpbmRleE9mKHBvaW50ZXJIYXNoOiBVaW50OEFycmF5KTogaTMyIHsKICAgICAgICBmb3IgKGxldCBpOiBpMzIgPSAwOyBpIDwgdGhpcy5fa2V5cy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBjb25zdCBrZXkgPSB0aGlzLl9rZXlzW2ldOwoKICAgICAgICAgICAgaWYgKGVxVWludChrZXksIHBvaW50ZXJIYXNoKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiAtMTsKICAgIH0KCiAgICBwdWJsaWMgaGFzKGtleTogVWludDhBcnJheSk6IGJvb2wgewogICAgICAgIHJldHVybiB0aGlzLmluZGV4T2Yoa2V5KSAhPT0gLTE7CiAgICB9CgogICAgcHVibGljIGdldChrZXk6IFVpbnQ4QXJyYXkpOiBVaW50OEFycmF5IHsKICAgICAgICBjb25zdCBpbmRleDogaTMyID0gdGhpcy5pbmRleE9mKGtleSk7CiAgICAgICAgaWYgKGluZGV4ID09PSAtMSkgewogICAgICAgICAgICB0aHJvdyBuZXcgUmV2ZXJ0KCdLZXkgbm90IGZvdW5kIGluIG1hcCAodWludDhhcnJheSknKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlc1tpbmRleF07CiAgICB9CgogICAgcHVibGljIGRlbGV0ZShrZXk6IFVpbnQ4QXJyYXkpOiBib29sIHsKICAgICAgICBjb25zdCBpbmRleDogaTMyID0gdGhpcy5pbmRleE9mKGtleSk7CiAgICAgICAgaWYgKGluZGV4ID09PSAtMSkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQoKICAgICAgICB0aGlzLl9rZXlzLnNwbGljZShpbmRleCwgMSk7CiAgICAgICAgdGhpcy5fdmFsdWVzLnNwbGljZShpbmRleCwgMSk7CgogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIHB1YmxpYyBjbGVhcigpOiB2b2lkIHsKICAgICAgICB0aGlzLl9rZXlzID0gW107CiAgICAgICAgdGhpcy5fdmFsdWVzID0gW107CiAgICB9CgogICAgcHVibGljIHRvU3RyaW5nKCk6IHN0cmluZyB7CiAgICAgICAgY29uc3Qgc3RyOiBzdHJpbmcgPSBgYDsKCiAgICAgICAgZm9yIChsZXQgaTogaTMyID0gMDsgaSA8IHRoaXMuX2tleXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgc3RyLmNvbmNhdChgWyR7dGhpcy5fa2V5c1tpXS50b1N0cmluZygpfV0gPT4gWyR7dGhpcy5fdmFsdWVzW2ldLnRvU3RyaW5nKCl9XWApOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHN0cjsKICAgIH0KfQo=",
  "node_modules/@btc-vision/btc-runtime/runtime/index.ts": "LyoqIEVudmlyb25tZW50ICovCmV4cG9ydCAqIGZyb20gJy4vZW52JzsKCi8qKiBDb250cmFjdHMgKi8KZXhwb3J0ICogZnJvbSAnLi9jb250cmFjdHMvaW50ZXJmYWNlcy9JT1BfMjAnOwpleHBvcnQgKiBmcm9tICcuL2NvbnRyYWN0cy9PUF8yMCc7CmV4cG9ydCAqIGZyb20gJy4vY29udHJhY3RzL0RlcGxveWFibGVPUF8yMCc7CmV4cG9ydCAqIGZyb20gJy4vY29udHJhY3RzL09QX05FVCc7CmV4cG9ydCAqIGZyb20gJy4vY29udHJhY3RzL2ludGVyZmFjZXMvT1AyMEluaXRQYXJhbWV0ZXJzJzsKCi8qKiBCdWZmZXIgKi8KZXhwb3J0ICogZnJvbSAnLi9idWZmZXIvQnl0ZXNSZWFkZXInOwpleHBvcnQgKiBmcm9tICcuL2J1ZmZlci9CeXRlc1dyaXRlcic7CgovKiogSW50ZXJmYWNlcyAqLwpleHBvcnQgKiBmcm9tICcuL2ludGVyZmFjZXMvSUJUQyc7CgovKiogRXZlbnRzICovCmV4cG9ydCAqIGZyb20gJy4vZXZlbnRzL05ldEV2ZW50JzsKZXhwb3J0ICogZnJvbSAnLi9ldmVudHMvcHJlZGVmaW5lZCc7CgovKiogRW52ICovCmV4cG9ydCAqIGZyb20gJy4vZW52L2NsYXNzZXMvVVRYTyc7CmV4cG9ydCAqIGZyb20gJy4vZW52L2NsYXNzZXMvVHJhbnNhY3Rpb24nOwpleHBvcnQgKiBmcm9tICcuL2Vudi9jbGFzc2VzL0Jsb2NrJzsKCi8qKiBNYXBzICovCmV4cG9ydCAqIGZyb20gJy4vZ2VuZXJpYy9NYXAnOwpleHBvcnQgKiBmcm9tICcuL2dlbmVyaWMvTWFwVTI1Nic7CmV4cG9ydCAqIGZyb20gJy4vZ2VuZXJpYy9BZGRyZXNzTWFwJzsKCi8qKiBUeXBlcyAqLwpleHBvcnQgKiBmcm9tICcuL3R5cGVzJzsKCi8qKiBEZWZpbml0aW9ucyAqLwpleHBvcnQgKiBmcm9tICcuL2xhbmcvRGVmaW5pdGlvbnMnOwpleHBvcnQgKiBmcm9tICcuL3R5cGVzL0FkZHJlc3MnOwpleHBvcnQgKiBmcm9tICcuL3R5cGVzL1JldmVydCc7CmV4cG9ydCAqIGZyb20gJy4vdHlwZXMvU2FmZU1hdGgnOwpleHBvcnQgKiBmcm9tICcuL3R5cGVzL1NhZmVNYXRoSTEyOCc7CgovKiogTWF0aCAqLwpleHBvcnQgKiBmcm9tICcuL21hdGgvYWJpJzsKZXhwb3J0ICogZnJvbSAnLi9tYXRoL2J5dGVzJzsKZXhwb3J0ICogZnJvbSAnLi9zZWNwMjU2azEvRUNQb2ludCc7CgovKiogTWVtb3J5ICovCmV4cG9ydCAqIGZyb20gJy4vbWVtb3J5L05lc3RlZCc7CmV4cG9ydCAqIGZyb20gJy4vbmVzdGVkL1BvaW50ZXJNYW5hZ2VyJzsKZXhwb3J0ICogZnJvbSAnLi9uZXN0ZWQvc3RvcmFnZS9TdG9yYWdlTWFwJzsKZXhwb3J0ICogZnJvbSAnLi9uZXN0ZWQvc3RvcmFnZS9TdG9yYWdlU2V0JzsKCi8qKiBDb2RlY3MgKi8KZXhwb3J0ICogZnJvbSAnLi9uZXN0ZWQvY29kZWNzL1UyNTZDb2RlYyc7CmV4cG9ydCAqIGZyb20gJy4vbmVzdGVkL2NvZGVjcy9BZGRyZXNzQ29kZWMnOwpleHBvcnQgKiBmcm9tICcuL25lc3RlZC9jb2RlY3MvTnVtZXJpY0NvZGVjJzsKZXhwb3J0ICogZnJvbSAnLi9uZXN0ZWQvY29kZWNzL0Jvb2xlYW5Db2RlYyc7CmV4cG9ydCAqIGZyb20gJy4vbmVzdGVkL2NvZGVjcy9TdHJpbmdDb2RlYyc7CmV4cG9ydCAqIGZyb20gJy4vbmVzdGVkL2NvZGVjcy9WYXJpYWJsZUJ5dGVzQ29kZWMnOwoKLyoqIFN0b3JhZ2UgKi8KZXhwb3J0ICogZnJvbSAnLi9zdG9yYWdlL1N0b3JlZFUyNTYnOwpleHBvcnQgKiBmcm9tICcuL3N0b3JhZ2UvU3RvcmVkVTY0JzsKZXhwb3J0ICogZnJvbSAnLi9zdG9yYWdlL1N0b3JlZFN0cmluZyc7CmV4cG9ydCAqIGZyb20gJy4vc3RvcmFnZS9TdG9yZWRBZGRyZXNzJzsKZXhwb3J0ICogZnJvbSAnLi9zdG9yYWdlL1N0b3JlZEJvb2xlYW4nOwoKLyoqIEFycmF5cyAqLwpleHBvcnQgKiBmcm9tICcuL3N0b3JhZ2UvYXJyYXlzL1N0b3JlZEFkZHJlc3NBcnJheSc7CmV4cG9ydCAqIGZyb20gJy4vc3RvcmFnZS9hcnJheXMvU3RvcmVkQm9vbGVhbkFycmF5JzsKCmV4cG9ydCAqIGZyb20gJy4vc3RvcmFnZS9hcnJheXMvU3RvcmVkVThBcnJheSc7CmV4cG9ydCAqIGZyb20gJy4vc3RvcmFnZS9hcnJheXMvU3RvcmVkVTE2QXJyYXknOwpleHBvcnQgKiBmcm9tICcuL3N0b3JhZ2UvYXJyYXlzL1N0b3JlZFUzMkFycmF5JzsKZXhwb3J0ICogZnJvbSAnLi9zdG9yYWdlL2FycmF5cy9TdG9yZWRVNjRBcnJheSc7CmV4cG9ydCAqIGZyb20gJy4vc3RvcmFnZS9hcnJheXMvU3RvcmVkVTEyOEFycmF5JzsKZXhwb3J0ICogZnJvbSAnLi9zdG9yYWdlL2FycmF5cy9TdG9yZWRVMjU2QXJyYXknOwoKLyoqIFNoYXJlZCBsaWJyYXJpZXMgKi8KZXhwb3J0ICogZnJvbSAnLi9zaGFyZWQtbGlicmFyaWVzL1RyYW5zZmVySGVscGVyJzsKZXhwb3J0ICogZnJvbSAnLi9zaGFyZWQtbGlicmFyaWVzL09QMjBVdGlscyc7CgovKiogVXRpbHMgKi8KZXhwb3J0ICogZnJvbSAnLi91dGlscyc7Cg==",
  "node_modules/@btc-vision/btc-runtime/runtime/interfaces/IBTC.ts": "aW1wb3J0IHsgQWRkcmVzcyB9IGZyb20gJy4uL3R5cGVzL0FkZHJlc3MnOwoKZXhwb3J0IGludGVyZmFjZSBJQlRDIHsKICAgIHJlYWRvbmx5IGNvbnRyYWN0RGVwbG95ZXI6IEFkZHJlc3M7CiAgICByZWFkb25seSBhZGRyZXNzOiBBZGRyZXNzOwp9Cg==",
  "node_modules/@btc-vision/btc-runtime/runtime/lang/Definitions.ts": "ZXhwb3J0IHR5cGUgUG90ZW50aWFsPFQ+ID0gVCB8IG51bGw7Cg==",
  "node_modules/@btc-vision/btc-runtime/runtime/math/abi.ts": "aW1wb3J0IHsgYnl0ZXNUb1UzMiB9IGZyb20gJy4vYnl0ZXMnOwppbXBvcnQgeyBzaGEyNTYgfSBmcm9tICcuLi9lbnYvZ2xvYmFsJzsKaW1wb3J0IHsgdTI1NiB9IGZyb20gJ0BidGMtdmlzaW9uL2FzLWJpZ251bS9hc3NlbWJseSc7CgpleHBvcnQgdHlwZSBTZWxlY3RvciA9IHUzMjsKCmV4cG9ydCBmdW5jdGlvbiBlbmNvZGVTZWxlY3RvcihuYW1lOiBzdHJpbmcpOiBTZWxlY3RvciB7CiAgICBjb25zdCB0eXBlZCA9IFVpbnQ4QXJyYXkud3JhcChTdHJpbmcuVVRGOC5lbmNvZGUobmFtZSkpOwogICAgY29uc3QgaGFzaCA9IHNoYTI1Nih0eXBlZCk7CgogICAgcmV0dXJuIGJ5dGVzVG9VMzIoaGFzaCk7Cn0KCi8qKgogKiBVc2UgbW9yZSBnYXMuCiAqIEBwYXJhbSB1bmlxdWVJZGVudGlmaWVyCiAqIEBwYXJhbSB0eXBlZAogKi8KZXhwb3J0IGZ1bmN0aW9uIGVuY29kZVBvaW50ZXJVbmtub3duTGVuZ3RoKHVuaXF1ZUlkZW50aWZpZXI6IHUxNiwgdHlwZWQ6IFVpbnQ4QXJyYXkpOiBVaW50OEFycmF5IHsKICAgIGNvbnN0IGhhc2ggPSBzaGEyNTYodHlwZWQpOwoKICAgIHJldHVybiBlbmNvZGVQb2ludGVyKHVuaXF1ZUlkZW50aWZpZXIsIGhhc2gsIGZhbHNlKTsKfQoKZXhwb3J0IGZ1bmN0aW9uIGVuc3VyZUF0TGVhc3QzMEJ5dGVzKHR5cGVkOiBVaW50OEFycmF5KTogVWludDhBcnJheSB7CiAgICBpZiAodHlwZWQubGVuZ3RoID49IDMwKSB7CiAgICAgICAgcmV0dXJuIHR5cGVkOwogICAgfQoKICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KDMwKTsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHlwZWQubGVuZ3RoOyBpKyspIHsKICAgICAgICByZXN1bHRbaV0gPSB0eXBlZFtpXTsKICAgIH0KCiAgICByZXR1cm4gcmVzdWx0Owp9CgpAaW5saW5lCmZ1bmN0aW9uIHRvQXJyYXlCdWZmZXJCRShidWZmZXI6IHVzaXplLCB2YWw6IHUyNTYpOiB2b2lkIHsKICAgIC8vIFdyaXRlIHRoZSB1cHBlciAzIGNodW5rcyAoZWFjaCA2NCBiaXRzKSBpbiBvbmUgc2hvdDoKICAgIHN0b3JlPHU2ND4oYnVmZmVyLCBic3dhcCh2YWwuaGkyKSwgMCk7IC8vIDAuLjcKICAgIHN0b3JlPHU2ND4oYnVmZmVyLCBic3dhcCh2YWwuaGkxKSwgOCk7IC8vIDguLjE1CiAgICBzdG9yZTx1NjQ+KGJ1ZmZlciwgYnN3YXAodmFsLmxvMiksIDE2KTsgLy8gMTYuLjIzCgogICAgLy8gTm93IGhhbmRsZSB0aGUgZmluYWwgNjQgYml0cyAodmFsLmxvMSkgaW4gWzMyICsgMTYgKyAxNl0gZm9ybS4KICAgIC8vICAtIGxvMUhpZ2gzMiA9IHRvcCAzMiBiaXRzICAgW2JpdHMgNjMuLjMyXQogICAgLy8gIC0gbG8xTWlkMTYgID0gbWlkZGxlIDE2IGJpdHMgW2JpdHMgMzEuLjE2XQogICAgLy8gIC0gbG8xTG93MTYgID0gYm90dG9tIDE2IGJpdHMgW2JpdHMgMTUuLjBdCiAgICBjb25zdCBsbzFIaWdoMzIgPSB1MzIodmFsLmxvMSA+Pj4gMzIpOwogICAgY29uc3QgbG8xTWlkMTYgPSB1MTYoKHZhbC5sbzEgPj4+IDE2KSAmIDB4ZmZmZik7CgogICAgLy8gU3RvcmUgdGhlbSBpbiBhc2NlbmRpbmcgb2Zmc2V0cy4gQmVjYXVzZSBlYWNoIHN0b3JlIGlzIGxpdHRsZS1lbmRpYW4sCiAgICAvLyB3ZSBic3dhcCB0aGUgdmFsdWVzIHNvIHRoYXQgdGhlIGZpbmFsIGJ5dGVzIGluIG1lbW9yeSBhcmUgYmlnLWVuZGlhbi4KCiAgICAvLyBPZmZzZXRzIDI0Li4yNyAoNCBieXRlcyk6IHRvcCAzMiBiaXRzIG9mIGxvMQogICAgc3RvcmU8dTMyPihidWZmZXIsIGJzd2FwKGxvMUhpZ2gzMiksIDI0KTsKCiAgICAvLyBPZmZzZXRzIDI4Li4yOSAoMiBieXRlcyk6IG1pZCAxNiBiaXRzIG9mIGxvMQogICAgc3RvcmU8dTE2PihidWZmZXIsIGJzd2FwKGxvMU1pZDE2KSwgMjgpOwp9CgpleHBvcnQgZnVuY3Rpb24gdTI1NlRvMzBCeXRlcyh2YWx1ZTogdTI1Nik6IFVpbnQ4QXJyYXkgewogICAgY29uc3QgcmVzdWx0ID0gbmV3IFVpbnQ4QXJyYXkoMzApOwogICAgdG9BcnJheUJ1ZmZlckJFKGNoYW5nZXR5cGU8dXNpemU+KHJlc3VsdC5kYXRhU3RhcnQpLCB2YWx1ZSk7CiAgICByZXR1cm4gcmVzdWx0Owp9CgovKioKICogT3B0aW1pemVkIHBvaW50ZXIgZW5jb2RpbmcsIHNlZSBlbmNvZGVQb2ludGVyVW5rbm93bkxlbmd0aCBmb3IgYSBtb3JlIGdlbmVyaWMgdmVyc2lvbi4KICogQHBhcmFtIHVuaXF1ZUlkZW50aWZpZXIKICogQHBhcmFtIHR5cGVkCiAqIEBwYXJhbSBzYWZlCiAqLwpleHBvcnQgZnVuY3Rpb24gZW5jb2RlUG9pbnRlcih1bmlxdWVJZGVudGlmaWVyOiB1MTYsIHR5cGVkOiBVaW50OEFycmF5LCBzYWZlOiBib29sZWFuID0gdHJ1ZSk6IFVpbnQ4QXJyYXkgewogICAgY29uc3QgYXJyYXkgPSBlbnN1cmVBdExlYXN0MzBCeXRlcyh0eXBlZCk7CgogICAgaWYgKHNhZmUpIGFzc2VydChhcnJheS5sZW5ndGggPT09IDMwLCBgUG9pbnRlcnMgbXVzdCBiZSAzMCBieXRlcy4gR290ICR7YXJyYXkubGVuZ3RofS5gKTsKCiAgICBjb25zdCBmaW5hbFBvaW50ZXIgPSBuZXcgVWludDhBcnJheSgzMik7CiAgICBmaW5hbFBvaW50ZXJbMF0gPSB1bmlxdWVJZGVudGlmaWVyICYgMHhmZjsKICAgIGZpbmFsUG9pbnRlclsxXSA9ICh1bmlxdWVJZGVudGlmaWVyID4+IDgpICYgMHhmZjsKCiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDMwOyBpKyspIHsKICAgICAgICBmaW5hbFBvaW50ZXJbaSArIDJdID0gYXJyYXlbaV07CiAgICB9CgogICAgcmV0dXJuIGZpbmFsUG9pbnRlcjsKfQo=",
  "node_modules/@btc-vision/btc-runtime/runtime/math/bytes.ts": "aW1wb3J0IHsgUmV2ZXJ0IH0gZnJvbSAnLi4vdHlwZXMvUmV2ZXJ0JzsKaW1wb3J0IHsgQnl0ZXNXcml0ZXIgfSBmcm9tICcuLi9idWZmZXIvQnl0ZXNXcml0ZXInOwppbXBvcnQgeyBCeXRlc1JlYWRlciB9IGZyb20gJy4uL2J1ZmZlci9CeXRlc1JlYWRlcic7CgovKioKICogQ29udmVydCBhIDQtYnl0ZSBiaWctZW5kaWFuIGFycmF5IGludG8gYSB1MzIuCiAqIEluZGV4IDAgaXMgbW9zdCBzaWduaWZpY2FudCwgaW5kZXggMyBpcyBsZWFzdCBzaWduaWZpY2FudC4KICovCkBpbmxpbmUKZXhwb3J0IGZ1bmN0aW9uIGJ5dGVzVG9VMzIobnVtYmVyOiBVaW50OEFycmF5KTogdTMyIHsKICAgIGlmIChudW1iZXIubGVuZ3RoIDwgNCkgewogICAgICAgIHRocm93IG5ldyBFcnJvcignYnl0ZXNUb1UzMjogaW5wdXQgbXVzdCBiZSBhdCBsZWFzdCA0IGJ5dGVzJyk7CiAgICB9CiAgICByZXR1cm4gKHUzMihudW1iZXJbMF0pIDw8IDI0KSB8CiAgICAgICAgKHUzMihudW1iZXJbMV0pIDw8IDE2KSB8CiAgICAgICAgKHUzMihudW1iZXJbMl0pIDw8IDgpIHwKICAgICAgICB1MzIobnVtYmVyWzNdKTsKfQoKLy8gMzItYnl0ZSBidWZmZXIgb2YgYWxsIHplcm9zCmV4cG9ydCBjb25zdCBFTVBUWV9CVUZGRVI6IFVpbnQ4QXJyYXkgPSBuZXcgVWludDhBcnJheSgzMik7CgovLyAzMC1ieXRlIGJ1ZmZlciBvZiBhbGwgemVyb3MKZXhwb3J0IGNvbnN0IEVNUFRZX1BPSU5URVI6IFVpbnQ4QXJyYXkgPSBuZXcgVWludDhBcnJheSgzMCk7CgovLyAzMi1ieXRlIGJ1ZmZlciByZXByZXNlbnRpbmcgMSBpbiBiaWctZW5kaWFuIGZvcm06Ci8vIGluZGV4IDMxIGlzIHRoZSBsZWFzdCBzaWduaWZpY2FudCBieXRlLgpleHBvcnQgY29uc3QgT05FX0JVRkZFUjogVWludDhBcnJheSA9IG5ldyBVaW50OEFycmF5KDMyKTsKT05FX0JVRkZFUlszMV0gPSAxOwoKLyoqCiAqIFJldHVybiBhIG5ldyAzMi1ieXRlIHplcm8gYnVmZmVyLgogKi8KQGlubGluZQpleHBvcnQgZnVuY3Rpb24gR0VUX0VNUFRZX0JVRkZFUigpOiBVaW50OEFycmF5IHsKICAgIHJldHVybiBuZXcgVWludDhBcnJheSgzMik7Cn0KCi8qKgogKiBBIGhlbHBlciB0byBhZGQgdHdvIDMyLWJ5dGUgYmlnLWVuZGlhbiBVaW50OEFycmF5cy4KICogUmV0dXJucyBhIG5ldyAzMi1ieXRlIFVpbnQ4QXJyYXkgd2l0aCAoYSArIGIpIG1vZCAyXjI1Ni4KICoKICogSW4gYmlnLWVuZGlhbiwgdGhlIExTQiBpcyBhdCBpbmRleCAzMSwgc28gd2UgaXRlcmF0ZSBmcm9tIGkgPSAzMSBkb3duIHRvIDAuCiAqLwpAaW5saW5lCmV4cG9ydCBmdW5jdGlvbiBhZGRVaW50OEFycmF5c0JFKGE6IFVpbnQ4QXJyYXksIGI6IFVpbnQ4QXJyYXkpOiBVaW50OEFycmF5IHsKICAgIGlmIChhLmxlbmd0aCAhPT0gMzIgfHwgYi5sZW5ndGggIT09IDMyKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhZGRVaW50OEFycmF5c0JFIGV4cGVjdHMgMzItYnl0ZSBpbnB1dHMnKTsKICAgIH0KCiAgICBjb25zdCByZXN1bHQgPSBuZXcgVWludDhBcnJheSgzMik7CiAgICBsZXQgY2FycnkgPSAwOwoKICAgIC8vIGluZGV4IDMxIGlzIGxlYXN0IHNpZ25pZmljYW50IGJ5dGUKICAgIGZvciAobGV0IGkgPSAzMTsgaSA+PSAwOyBpLS0pIHsKICAgICAgICBjb25zdCBzdW0gPSAoYVtpXSBhcyB1MzIpICsgKGJbaV0gYXMgdTMyKSArIGNhcnJ5OwogICAgICAgIHJlc3VsdFtpXSA9IHN1bSAmIDB4ZmY7CiAgICAgICAgY2FycnkgPSBzdW0gPj4gODsKICAgIH0KCiAgICByZXR1cm4gcmVzdWx0Owp9CgovKioKICogQ29udmVydCBhIHU2NCB2YWx1ZSB0byBhIDMyLWJ5dGUgYmlnLWVuZGlhbiBVaW50OEFycmF5LAogKiBwbGFjaW5nIHRoZSB1NjQgaW4gdGhlICpsYXN0KiA4IGJ5dGVzIChpbmRpY2VzIDI0Li4zMSkuCiAqIFRoZSBtb3N0IHNpZ25pZmljYW50IDI0IGJ5dGVzIChpbmRpY2VzIDAuLjIzKSByZW1haW4gMC4KICovCkBpbmxpbmUKZXhwb3J0IGZ1bmN0aW9uIHU2NFRvQkUzMkJ5dGVzKHZhbHVlOiB1NjQpOiBVaW50OEFycmF5IHsKICAgIGNvbnN0IGFyciA9IG5ldyBVaW50OEFycmF5KDMyKTsKCiAgICAvLyBXcml0ZSBiaWctZW5kaWFuIGludG8gdGhlIGZpbmFsIDggYnl0ZXM6CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDg7IGkrKykgewogICAgICAgIGFyclszMSAtIGldID0gPHU4Pih2YWx1ZSAmIDB4ZmYpOwogICAgICAgIHZhbHVlID4+PSA4OwogICAgfQoKICAgIHJldHVybiBhcnI7Cn0KCi8qKgogKiBHZXQgdGhlIGJpdCBhdCBgYml0SW5kZXhgICgwLi4yNTUpIGluIGEgMzItYnl0ZSBidWZmZXIgKippbiBiaWctZW5kaWFuIGJpdCBudW1iZXJpbmcqKi4KICogLSBiaXRJbmRleCA9IDAgPT4gdGhlIE1TQiBvZiBidWZmZXJbMF0uCiAqIC0gYml0SW5kZXggPSA3ID0+IHRoZSBMU0Igb2YgYnVmZmVyWzBdLgogKiAtIGJpdEluZGV4ID0gMjU1ID0+IHRoZSBMU0Igb2YgYnVmZmVyWzMxXS4KICovCkBpbmxpbmUKZXhwb3J0IGZ1bmN0aW9uIGdldEJpdChidWZmZXI6IFVpbnQ4QXJyYXksIGJpdEluZGV4OiB1MTYpOiBib29sIHsKICAgIGlmIChiaXRJbmRleCA+PSAyNTYpIHsKICAgICAgICB0aHJvdyBuZXcgUmV2ZXJ0KCdCaXQgaW5kZXggb3V0IG9mIHJhbmdlJyk7CiAgICB9CgogICAgLy8gV2hpY2ggYnl0ZT8KICAgIGNvbnN0IGJ5dGVJbmRleDogdTggPSA8dTg+KGJpdEluZGV4ID4+PiAzKTsKCiAgICAvLyBXaGljaCBiaXQgd2l0aGluIHRoYXQgYnl0ZT8gKE1TQiA9IGJpdCBvZmZzZXQgNykKICAgIGNvbnN0IG9mZnNldDogdTggPSA8dTg+KDcgLSAoYml0SW5kZXggJiA3KSk7CgogICAgY29uc3QgYjogdTggPSBidWZmZXJbYnl0ZUluZGV4XTsKICAgIHJldHVybiAoKGIgPj4+IG9mZnNldCkgJiAxKSA9PSAxOwp9CgovKioKICogU2V0IG9yIGNsZWFyIHRoZSBiaXQgYXQgYGJpdEluZGV4YCAoMC4uMjU1KSBpbiBhIDMyLWJ5dGUgYnVmZmVyICgqKmJpZy1lbmRpYW4qKiBiaXQgbnVtYmVyaW5nKS4KICogLSBiaXRJbmRleCA9IDAgPT4gc2V0cyB0aGUgTVNCIG9mIGJ1ZmZlclswXS4KICogLSBiaXRJbmRleCA9IDI1NSA9PiBzZXRzIHRoZSBMU0Igb2YgYnVmZmVyWzMxXS4KICovCkBpbmxpbmUKZXhwb3J0IGZ1bmN0aW9uIHNldEJpdChidWZmZXI6IFVpbnQ4QXJyYXksIGJpdEluZGV4OiB1MTYsIGJpdFZhbHVlOiBib29sKTogdm9pZCB7CiAgICBpZiAoYml0SW5kZXggPj0gMjU2KSB7CiAgICAgICAgdGhyb3cgbmV3IFJldmVydCgnQml0IGluZGV4IG91dCBvZiByYW5nZScpOwogICAgfQoKICAgIC8vIFdoaWNoIGJ5dGU/CiAgICBjb25zdCBieXRlSW5kZXg6IHU4ID0gPHU4PihiaXRJbmRleCA+Pj4gMyk7CgogICAgLy8gV2hpY2ggYml0IHdpdGhpbiB0aGF0IGJ5dGU/IChNU0IgPSBiaXQgb2Zmc2V0IDcpCiAgICBjb25zdCBvZmZzZXQ6IHU4ID0gPHU4Pig3IC0gKGJpdEluZGV4ICYgNykpOwoKICAgIGxldCBiOiB1OCA9IGJ1ZmZlcltieXRlSW5kZXhdOwogICAgaWYgKGJpdFZhbHVlKSB7CiAgICAgICAgYiB8PSAxIDw8IG9mZnNldDsKICAgIH0gZWxzZSB7CiAgICAgICAgYiAmPSB+KDEgPDwgb2Zmc2V0KTsKICAgIH0KCiAgICBidWZmZXJbYnl0ZUluZGV4XSA9IGI7Cn0KCgovKioKICogQXNzdW1lIHRoZSBkYXRhIGlzIGF0IGxlYXN0IDE2IGJ5dGVzLCByZWFkIHR3byB1NjRzIGZyb20gaXQgaW4gYmlnLWVuZGlhbiBvcmRlci4KICovCkBpbmxpbmUKZXhwb3J0IGZ1bmN0aW9uIHJlYWRMZW5ndGhBbmRTdGFydEluZGV4KGRhdGE6IFVpbnQ4QXJyYXkpOiB1NjRbXSB7CiAgICBpZiAoZGF0YS5sZW5ndGggPCAxNikgewogICAgICAgIHJldHVybiBbMCwgMF07CiAgICB9CgogICAgY29uc3QgcmVhZGVyID0gbmV3IEJ5dGVzUmVhZGVyKGRhdGEpOwogICAgY29uc3QgbGVuZ3RoID0gcmVhZGVyLnJlYWRVNjQoKTsKICAgIGNvbnN0IHN0YXJ0SW5kZXggPSByZWFkZXIucmVhZFU2NCgpOwoKICAgIHJldHVybiBbbGVuZ3RoLCBzdGFydEluZGV4XTsKfQoKLyoqCiAqIFdyaXRlIHR3byB1NjRzIGludG8gYSAzMi1ieXRlIGJ1ZmZlciBpbiBiaWctZW5kaWFuIG9yZGVyCiAqLwpAaW5saW5lCmV4cG9ydCBmdW5jdGlvbiB3cml0ZUxlbmd0aEFuZFN0YXJ0SW5kZXgobGVuZ3RoOiB1NjQsIHN0YXJ0SW5kZXg6IHU2NCk6IFVpbnQ4QXJyYXkgewogICAgY29uc3Qgd3JpdGVyID0gbmV3IEJ5dGVzV3JpdGVyKDMyKTsKICAgIHdyaXRlci53cml0ZVU2NChsZW5ndGgpOwogICAgd3JpdGVyLndyaXRlVTY0KHN0YXJ0SW5kZXgpOwoKICAgIHJldHVybiB3cml0ZXIuZ2V0QnVmZmVyKCk7Cn0KCi8qKgogKiBFbmNvZGUgYSAyLWJ5dGUgcG9pbnRlciArIHN1YlBvaW50ZXIgaW50byBhIDMyLWJ5dGUgYnVmZmVyIGluIGJpZy1lbmRpYW4gb3JkZXIuCiAqLwpAaW5saW5lCmV4cG9ydCBmdW5jdGlvbiBlbmNvZGVCYXNlUG9pbnRlcihwb2ludGVyOiB1MTYsIHN1YlBvaW50ZXI6IFVpbnQ4QXJyYXkpOiBVaW50OEFycmF5IHsKICAgIGNvbnN0IHdyaXRlciA9IG5ldyBCeXRlc1dyaXRlcigzMik7CiAgICB3cml0ZXIud3JpdGVVMTYocG9pbnRlcik7CiAgICB3cml0ZXIud3JpdGVCeXRlcyhzdWJQb2ludGVyKTsKCiAgICByZXR1cm4gd3JpdGVyLmdldEJ1ZmZlcigpOwp9CgpAaW5saW5lCmV4cG9ydCBmdW5jdGlvbiBiaWdFbmRpYW5BZGQoYmFzZTogVWludDhBcnJheSwgaW5jcmVtZW50OiB1NjQpOiBVaW50OEFycmF5IHsKICAgIGNvbnN0IGFkZCA9IHU2NFRvQkUzMkJ5dGVzKGluY3JlbWVudCk7CgogICAgcmV0dXJuIGFkZFVpbnQ4QXJyYXlzQkUoYmFzZSwgYWRkKTsKfQ==",
  "node_modules/@btc-vision/btc-runtime/runtime/memory/AddressMemoryMap.ts": "aW1wb3J0IHsgQmxvY2tjaGFpbiB9IGZyb20gJy4uL2Vudic7CmltcG9ydCB7IGVuY29kZVBvaW50ZXIgfSBmcm9tICcuLi9tYXRoL2FiaSc7CmltcG9ydCB7IEFkZHJlc3MgfSBmcm9tICcuLi90eXBlcy9BZGRyZXNzJzsKaW1wb3J0IHsgdTI1NiB9IGZyb20gJ0BidGMtdmlzaW9uL2FzLWJpZ251bS9hc3NlbWJseSc7CmltcG9ydCB7IEVNUFRZX0JVRkZFUiB9IGZyb20gJy4uL21hdGgvYnl0ZXMnOwoKQGZpbmFsCmV4cG9ydCBjbGFzcyBBZGRyZXNzTWVtb3J5TWFwIHsKICAgIHB1YmxpYyBwb2ludGVyOiB1MTY7CgogICAgY29uc3RydWN0b3IoCiAgICAgICAgcG9pbnRlcjogdTE2LAogICAgKSB7CiAgICAgICAgdGhpcy5wb2ludGVyID0gcG9pbnRlcjsKICAgIH0KCiAgICBwdWJsaWMgc2V0QXNVaW50OEFycmF5KGtleTogQWRkcmVzcywgdmFsdWU6IFVpbnQ4QXJyYXkpOiB0aGlzIHsKICAgICAgICBjb25zdCBrZXlIYXNoOiBVaW50OEFycmF5ID0gdGhpcy5lbmNvZGVQb2ludGVyKGtleSk7CiAgICAgICAgQmxvY2tjaGFpbi5zZXRTdG9yYWdlQXQoa2V5SGFzaCwgdmFsdWUpOwoKICAgICAgICByZXR1cm4gdGhpczsKICAgIH0KCiAgICBwdWJsaWMgc2V0KGtleTogQWRkcmVzcywgdmFsdWU6IHUyNTYpOiB0aGlzIHsKICAgICAgICByZXR1cm4gdGhpcy5zZXRBc1VpbnQ4QXJyYXkoa2V5LCB2YWx1ZS50b1VpbnQ4QXJyYXkodHJ1ZSkpOwogICAgfQoKICAgIHB1YmxpYyBnZXRBc1VpbnQ4QXJyYXkoa2V5OiBBZGRyZXNzKTogVWludDhBcnJheSB7CiAgICAgICAgY29uc3Qga2V5SGFzaDogVWludDhBcnJheSA9IHRoaXMuZW5jb2RlUG9pbnRlcihrZXkpOwoKICAgICAgICByZXR1cm4gQmxvY2tjaGFpbi5nZXRTdG9yYWdlQXQoa2V5SGFzaCk7CiAgICB9CgogICAgcHVibGljIGdldChhZGRyZXNzOiBBZGRyZXNzKTogdTI1NiB7CiAgICAgICAgY29uc3QgcmVzcCA9IHRoaXMuZ2V0QXNVaW50OEFycmF5KGFkZHJlc3MpOwoKICAgICAgICByZXR1cm4gdTI1Ni5mcm9tVWludDhBcnJheUJFKHJlc3ApOwogICAgfQoKICAgIHB1YmxpYyBoYXMoa2V5OiBBZGRyZXNzKTogYm9vbCB7CiAgICAgICAgY29uc3Qga2V5SGFzaDogVWludDhBcnJheSA9IHRoaXMuZW5jb2RlUG9pbnRlcihrZXkpOwoKICAgICAgICByZXR1cm4gQmxvY2tjaGFpbi5oYXNTdG9yYWdlQXQoa2V5SGFzaCk7CiAgICB9CgogICAgcHVibGljIGRlbGV0ZShrZXk6IEFkZHJlc3MpOiBib29sIHsKICAgICAgICB0aGlzLnNldEFzVWludDhBcnJheShrZXksIEVNUFRZX0JVRkZFUik7CgogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIEB1bnNhZmUKICAgIHB1YmxpYyBjbGVhcigpOiB2b2lkIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7CiAgICB9CgogICAgcHJpdmF0ZSBlbmNvZGVQb2ludGVyKGtleTogQWRkcmVzcyk6IFVpbnQ4QXJyYXkgewogICAgICAgIHJldHVybiBlbmNvZGVQb2ludGVyKHRoaXMucG9pbnRlciwga2V5LnNsaWNlKDAsIDMwKSwgdHJ1ZSk7CiAgICB9Cn0K",
  "node_modules/@btc-vision/btc-runtime/runtime/memory/KeyMerger.ts": "aW1wb3J0IHsgQnl0ZXNXcml0ZXIgfSBmcm9tICcuLi9idWZmZXIvQnl0ZXNXcml0ZXInOwppbXBvcnQgeyBCbG9ja2NoYWluIH0gZnJvbSAnLi4vZW52JzsKaW1wb3J0IHsgZW5jb2RlUG9pbnRlclVua25vd25MZW5ndGggfSBmcm9tICcuLi9tYXRoL2FiaSc7CgoKQGZpbmFsCmV4cG9ydCBjbGFzcyBLZXlNZXJnZXI8SyBleHRlbmRzIHN0cmluZywgSzIgZXh0ZW5kcyBzdHJpbmcsIFYgZXh0ZW5kcyBVaW50OEFycmF5PiB7CiAgICBwdWJsaWMgcGFyZW50S2V5OiBLOwogICAgcHVibGljIHBvaW50ZXI6IHUxNjsKCiAgICBjb25zdHJ1Y3RvcihwYXJlbnQ6IEssIHBvaW50ZXI6IHUxNikgewogICAgICAgIHRoaXMucG9pbnRlciA9IHBvaW50ZXI7CiAgICAgICAgdGhpcy5wYXJlbnRLZXkgPSBwYXJlbnQ7CiAgICB9CgogICAgcHVibGljIHNldChrZXkyOiBLMiwgdmFsdWU6IFYpOiB0aGlzIHsKICAgICAgICBjb25zdCBtZXJnZWRLZXk6IHN0cmluZyA9IHRoaXMubWVyZ2VLZXkoa2V5Mik7CiAgICAgICAgY29uc3Qga2V5SGFzaDogVWludDhBcnJheSA9IHRoaXMuZW5jb2RlUG9pbnRlcihtZXJnZWRLZXkpOwoKICAgICAgICBCbG9ja2NoYWluLnNldFN0b3JhZ2VBdChrZXlIYXNoLCB2YWx1ZSk7CgogICAgICAgIHJldHVybiB0aGlzOwogICAgfQoKICAgIHB1YmxpYyBnZXQoa2V5OiBLKTogVWludDhBcnJheSB7CiAgICAgICAgY29uc3QgbWVyZ2VkS2V5OiBzdHJpbmcgPSB0aGlzLm1lcmdlS2V5KGtleSk7CiAgICAgICAgcmV0dXJuIEJsb2NrY2hhaW4uZ2V0U3RvcmFnZUF0KHRoaXMuZW5jb2RlUG9pbnRlcihtZXJnZWRLZXkpKTsKICAgIH0KCiAgICBwdWJsaWMgaGFzKGtleTogSyk6IGJvb2wgewogICAgICAgIGNvbnN0IG1lcmdlZEtleTogc3RyaW5nID0gdGhpcy5tZXJnZUtleShrZXkpOwogICAgICAgIHJldHVybiBCbG9ja2NoYWluLmhhc1N0b3JhZ2VBdCh0aGlzLmVuY29kZVBvaW50ZXIobWVyZ2VkS2V5KSk7CiAgICB9CgogICAgQHVuc2FmZQogICAgcHVibGljIGRlbGV0ZShfa2V5OiBLKTogYm9vbCB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNZXRob2Qgbm90IGltcGxlbWVudGVkLicpOwogICAgfQoKICAgIEB1bnNhZmUKICAgIHB1YmxpYyBjbGVhcigpOiB2b2lkIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NsZWFyIG1ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7CiAgICB9CgogICAgLyoqCiAgICAgKiBNZXJnZXMgdGhlIHBhcmVudEtleSBhbmQgdGhlIHByb3ZpZGVkIGtleSBieSBwcmVmaXhpbmcgZWFjaCB3aXRoIGl0cyBsZW5ndGguCiAgICAgKiBUaGlzIGF2b2lkcyBjb2xsaXNpb25zIHN1Y2ggYXM6CiAgICAgKiAgIHBhcmVudEtleSA9ICJhYmMiLCBrZXkgPSAiZGVmIiAgPT4gIjM6YWJjMzpkZWYiCiAgICAgKiAgIHBhcmVudEtleSA9ICJhYiIsICBrZXkgPSAiY2RlZiIgPT4gIjI6YWI0OmNkZWYiCiAgICAgKi8KICAgIEBpbmxpbmUKICAgIHByaXZhdGUgbWVyZ2VLZXkoa2V5OiBzdHJpbmcpOiBzdHJpbmcgewogICAgICAgIHJldHVybiBgJHt0aGlzLnBhcmVudEtleS5sZW5ndGh9OiR7dGhpcy5wYXJlbnRLZXl9JHtrZXkubGVuZ3RofToke2tleX1gOwogICAgfQoKICAgIEBpbmxpbmUKICAgIHByaXZhdGUgZW5jb2RlUG9pbnRlcihrZXk6IHN0cmluZyk6IFVpbnQ4QXJyYXkgewogICAgICAgIGNvbnN0IHdyaXRlciA9IG5ldyBCeXRlc1dyaXRlcihrZXkubGVuZ3RoKTsKICAgICAgICB3cml0ZXIud3JpdGVTdHJpbmcoa2V5KTsKCiAgICAgICAgcmV0dXJuIGVuY29kZVBvaW50ZXJVbmtub3duTGVuZ3RoKHRoaXMucG9pbnRlciwgd3JpdGVyLmdldEJ1ZmZlcigpKTsKICAgIH0KfQo=",
  "node_modules/@btc-vision/btc-runtime/runtime/memory/MapOfMap.ts": "aW1wb3J0IHsgQWRkcmVzcyB9IGZyb20gJy4uL3R5cGVzL0FkZHJlc3MnOwppbXBvcnQgeyBOZXN0ZWQgfSBmcm9tICcuL05lc3RlZCc7CgpAZmluYWwKZXhwb3J0IGNsYXNzIE1hcE9mTWFwPFQ+IGV4dGVuZHMgTWFwPAogICAgQWRkcmVzcywKICAgIE5lc3RlZDxUPgo+IHsKICAgIHB1YmxpYyBwb2ludGVyOiB1MTY7CgogICAgY29uc3RydWN0b3IoCiAgICAgICAgcG9pbnRlcjogdTE2LAogICAgKSB7CiAgICAgICAgc3VwZXIoKTsKCiAgICAgICAgdGhpcy5wb2ludGVyID0gcG9pbnRlcjsKICAgIH0KCiAgICBAaW5saW5lCiAgICBwdWJsaWMgZ2V0KGtleTogQWRkcmVzcyk6IE5lc3RlZDxUPiB7CiAgICAgICAgdGhpcy5jcmVhdGVLZXlNZXJnZXIoa2V5KTsKCiAgICAgICAgcmV0dXJuIHN1cGVyLmdldChrZXkpOwogICAgfQoKICAgIEBpbmxpbmUKICAgIHB1YmxpYyBzZXQoa2V5OiBBZGRyZXNzLCB2YWx1ZTogTmVzdGVkPFQ+KTogdGhpcyB7CiAgICAgICAgdGhpcy5jcmVhdGVLZXlNZXJnZXIoa2V5KTsKCiAgICAgICAgcmV0dXJuIDx0aGlzPnN1cGVyLnNldChrZXksIHZhbHVlKTsKICAgIH0KCiAgICBAaW5saW5lCiAgICBwdWJsaWMgaGFzKGtleTogQWRkcmVzcyk6IGJvb2wgewogICAgICAgIHJldHVybiBzdXBlci5oYXMoa2V5KTsKICAgIH0KCiAgICBAaW5saW5lCiAgICBwdWJsaWMgZGVsZXRlKGtleTogQWRkcmVzcyk6IGJvb2wgewogICAgICAgIHJldHVybiBzdXBlci5kZWxldGUoa2V5KTsKICAgIH0KCiAgICBAaW5saW5lCiAgICBwdWJsaWMgY2xlYXIoKTogdm9pZCB7CiAgICAgICAgc3VwZXIuY2xlYXIoKTsKICAgIH0KCiAgICBAaW5saW5lCiAgICBwcml2YXRlIGNyZWF0ZUtleU1lcmdlcihrZXk6IEFkZHJlc3MpOiB2b2lkIHsKICAgICAgICBpZiAoIXN1cGVyLmhhcyhrZXkpKSB7CiAgICAgICAgICAgIHN1cGVyLnNldChrZXksIG5ldyBOZXN0ZWQ8VD4oa2V5LCB0aGlzLnBvaW50ZXIpKTsKICAgICAgICB9CiAgICB9Cn0K",
  "node_modules/@btc-vision/btc-runtime/runtime/memory/Nested.ts": "aW1wb3J0IHsgQmxvY2tjaGFpbiB9IGZyb20gJy4uL2Vudic7CmltcG9ydCB7IGVuY29kZVBvaW50ZXJVbmtub3duTGVuZ3RoIH0gZnJvbSAnLi4vbWF0aC9hYmknOwppbXBvcnQgeyBCeXRlc1dyaXRlciB9IGZyb20gJy4uL2J1ZmZlci9CeXRlc1dyaXRlcic7CmltcG9ydCB7IHUyNTYgfSBmcm9tICdAYnRjLXZpc2lvbi9hcy1iaWdudW0vYXNzZW1ibHknOwppbXBvcnQgeyBBZGRyZXNzIH0gZnJvbSAnLi4vdHlwZXMvQWRkcmVzcyc7CgpAZmluYWwKZXhwb3J0IGNsYXNzIE5lc3RlZDxUPiB7CiAgICBwdWJsaWMgcGFyZW50S2V5OiBVaW50OEFycmF5OwoKICAgIHB1YmxpYyBwb2ludGVyOiB1MTY7CgogICAgY29uc3RydWN0b3IoCiAgICAgICAgcGFyZW50OiBVaW50OEFycmF5LAogICAgICAgIHBvaW50ZXI6IHUxNiwKICAgICkgewogICAgICAgIHRoaXMucG9pbnRlciA9IHBvaW50ZXI7CgogICAgICAgIHRoaXMucGFyZW50S2V5ID0gcGFyZW50OwogICAgfQoKICAgIHB1YmxpYyBzZXQoa2V5OiBVaW50OEFycmF5LCB2YWx1ZTogVCk6IHRoaXMgewogICAgICAgIGNvbnN0IGtleUhhc2g6IFVpbnQ4QXJyYXkgPSB0aGlzLmdldEtleUhhc2goa2V5KTsKICAgICAgICBCbG9ja2NoYWluLnNldFN0b3JhZ2VBdChrZXlIYXNoLCB0aGlzLmZyb20odmFsdWUpKTsKCiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CgogICAgcHVibGljIGdldChrZXk6IFVpbnQ4QXJyYXkpOiBUIHsKICAgICAgICBjb25zdCBrZXlIYXNoOiBVaW50OEFycmF5ID0gdGhpcy5nZXRLZXlIYXNoKGtleSk7CgogICAgICAgIHJldHVybiB0aGlzLnRvVmFsdWUoQmxvY2tjaGFpbi5nZXRTdG9yYWdlQXQoa2V5SGFzaCkpOwogICAgfQoKICAgIHB1YmxpYyBoYXMoa2V5OiBVaW50OEFycmF5KTogYm9vbCB7CiAgICAgICAgY29uc3QgbWVyZ2VkS2V5OiBVaW50OEFycmF5ID0gdGhpcy5nZXRLZXlIYXNoKGtleSk7CgogICAgICAgIHJldHVybiBCbG9ja2NoYWluLmhhc1N0b3JhZ2VBdChtZXJnZWRLZXkpOwogICAgfQoKICAgIEB1bnNhZmUKICAgIHB1YmxpYyBkZWxldGUoX2tleTogVWludDhBcnJheSk6IGJvb2wgewogICAgICAgIHRocm93IG5ldyBFcnJvcignTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTsKICAgIH0KCiAgICBAdW5zYWZlCiAgICBwdWJsaWMgY2xlYXIoKTogdm9pZCB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDbGVhciBtZXRob2Qgbm90IGltcGxlbWVudGVkLicpOwogICAgfQoKICAgIC8qKgogICAgICogQ29udmVydHMgcmF3IGJ5dGVzIGZyb20gc3RvcmFnZSBpbnRvIHR5cGUgVC4KICAgICAqLwogICAgcHJpdmF0ZSB0b1ZhbHVlKHZhbHVlOiBVaW50OEFycmF5KTogVCB7CiAgICAgICAgLy8gQ2hlY2sgVCdzIGNvbXBpbGUtdGltZSB0eXBlIElECiAgICAgICAgaWYgKGlkb2Y8VD4oKSA9PSBpZG9mPHUyNTY+KCkpIHsKICAgICAgICAgICAgLy8gV2Uga25vdyBUIGlzIHUyNTYKICAgICAgICAgICAgcmV0dXJuIGNoYW5nZXR5cGU8VD4odTI1Ni5mcm9tVWludDhBcnJheUJFKHZhbHVlKSk7CiAgICAgICAgfSBlbHNlIGlmIChpZG9mPFQ+KCkgPT0gaWRvZjxVaW50OEFycmF5PigpKSB7CiAgICAgICAgICAgIC8vIFdlIGtub3cgVCBpcyBVaW50OEFycmF5CiAgICAgICAgICAgIHJldHVybiBjaGFuZ2V0eXBlPFQ+KHZhbHVlKTsKICAgICAgICB9IGVsc2UgaWYgKGlkb2Y8VD4oKSA9PSBpZG9mPEFkZHJlc3M+KCkpIHsKICAgICAgICAgICAgLy8gV2Uga25vdyBUIGlzIEFkZHJlc3MKICAgICAgICAgICAgcmV0dXJuIGNoYW5nZXR5cGU8VD4odmFsdWUpOwogICAgICAgIH0gZWxzZSBpZiAoaXNJbnRlZ2VyPFQ+KCkpIHsKICAgICAgICAgICAgLy8gRm9yIGEgc2ltcGxlIGludGVnZXIsIGp1c3QgcHVsbCBvdXQgdGhlIGZpcnN0IGJ5dGUKICAgICAgICAgICAgcmV0dXJuIHZhbHVlWzBdIGFzIFQ7CiAgICAgICAgfSBlbHNlIGlmIChpc1N0cmluZzxUPigpKSB7CiAgICAgICAgICAgIC8vIFQgaXMgYSBzdHJpbmcKICAgICAgICAgICAgcmV0dXJuIGNoYW5nZXR5cGU8VD4oU3RyaW5nLlVURjguZGVjb2RlKHZhbHVlLmJ1ZmZlcikpOwogICAgICAgIH0KCiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCB0eXBlJyk7CiAgICB9CgogICAgLyoqCiAgICAgKiBDb252ZXJ0cyB0eXBlIFQgaW50byByYXcgYnl0ZXMgZm9yIHN0b3JhZ2UuCiAgICAgKi8KICAgIHByaXZhdGUgZnJvbSh2YWx1ZTogVCk6IFVpbnQ4QXJyYXkgewogICAgICAgIGlmIChpZG9mPFQ+KCkgPT0gaWRvZjx1MjU2PigpKSB7CiAgICAgICAgICAgIC8vIENhc3QgVCB0byB1MjU2LCB0aGVuIGNvbnZlcnQgdG8gYnl0ZXMKICAgICAgICAgICAgcmV0dXJuIGNoYW5nZXR5cGU8dTI1Nj4odmFsdWUpLnRvVWludDhBcnJheSh0cnVlKTsKICAgICAgICB9IGVsc2UgaWYgKGlkb2Y8VD4oKSA9PSBpZG9mPFVpbnQ4QXJyYXk+KCkpIHsKICAgICAgICAgICAgLy8gSnVzdCByZXR1cm4gaXQKICAgICAgICAgICAgcmV0dXJuIGNoYW5nZXR5cGU8VWludDhBcnJheT4odmFsdWUpOwogICAgICAgIH0gZWxzZSBpZiAoaWRvZjxUPigpID09IGlkb2Y8QWRkcmVzcz4oKSkgewogICAgICAgICAgICAvLyBBZGRyZXNzIGlzIGFscmVhZHkgYnl0ZXMKICAgICAgICAgICAgcmV0dXJuIGNoYW5nZXR5cGU8VWludDhBcnJheT4odmFsdWUpOwogICAgICAgIH0gZWxzZSBpZiAoaXNJbnRlZ2VyPFQ+KCkpIHsKICAgICAgICAgICAgY29uc3Qgd3JpdGVyID0gbmV3IEJ5dGVzV3JpdGVyKHNpemVvZjxUPigpKTsKICAgICAgICAgICAgd3JpdGVyLndyaXRlPFQ+KHZhbHVlKTsKICAgICAgICAgICAgcmV0dXJuIHdyaXRlci5nZXRCdWZmZXIoKTsKICAgICAgICB9IGVsc2UgaWYgKGlzU3RyaW5nPFQ+KCkpIHsKICAgICAgICAgICAgY29uc3Qgc3RyID0gY2hhbmdldHlwZTxzdHJpbmc+KHZhbHVlKTsKICAgICAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkud3JhcChTdHJpbmcuVVRGOC5lbmNvZGUoc3RyKSk7CiAgICAgICAgfQoKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIHR5cGUnKTsKICAgIH0KCiAgICBwcml2YXRlIGdldEtleUhhc2goa2V5OiBVaW50OEFycmF5KTogVWludDhBcnJheSB7CiAgICAgICAgY29uc3Qgd3JpdGVyOiBCeXRlc1dyaXRlciA9IG5ldyBCeXRlc1dyaXRlcihrZXkuYnl0ZUxlbmd0aCArIHRoaXMucGFyZW50S2V5LmJ5dGVMZW5ndGgpOwoKICAgICAgICB3cml0ZXIud3JpdGVCeXRlcyh0aGlzLnBhcmVudEtleSk7CiAgICAgICAgd3JpdGVyLndyaXRlQnl0ZXMoa2V5KTsKCiAgICAgICAgcmV0dXJuIHRoaXMuZW5jb2RlUG9pbnRlcih3cml0ZXIpOwogICAgfQoKICAgIHByaXZhdGUgZW5jb2RlUG9pbnRlcih3cml0ZXI6IEJ5dGVzV3JpdGVyKTogVWludDhBcnJheSB7CiAgICAgICAgcmV0dXJuIGVuY29kZVBvaW50ZXJVbmtub3duTGVuZ3RoKHRoaXMucG9pbnRlciwgd3JpdGVyLmdldEJ1ZmZlcigpKTsKICAgIH0KfQo=",
  "node_modules/@btc-vision/btc-runtime/runtime/nested/codecs/AddressCodec.ts": "aW1wb3J0IHsgSUNvZGVjIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9JQ29kZWMnOwppbXBvcnQgeyBBZGRyZXNzIH0gZnJvbSAnLi4vLi4vdHlwZXMvQWRkcmVzcyc7CgpjbGFzcyBfQWRkcmVzc0NvZGVjIGltcGxlbWVudHMgSUNvZGVjPEFkZHJlc3M+IHsKICAgIHB1YmxpYyBlbmNvZGUodmFsdWU6IEFkZHJlc3MpOiBVaW50OEFycmF5IHsKICAgICAgICByZXR1cm4gdmFsdWU7CiAgICB9CgogICAgcHVibGljIGRlY29kZShidWZmZXI6IFVpbnQ4QXJyYXkpOiBBZGRyZXNzIHsKICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCA9PSAwKSB7CiAgICAgICAgICAgIHJldHVybiBBZGRyZXNzLnplcm8oKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBBZGRyZXNzLmZyb21VaW50OEFycmF5KGJ1ZmZlcik7CiAgICB9Cn0KCmV4cG9ydCBjb25zdCBpZE9mQWRkcmVzc0NvZGVjID0gaWRvZjxfQWRkcmVzc0NvZGVjPigpOwpleHBvcnQgY29uc3QgQWRkcmVzc0NvZGVjID0gbmV3IF9BZGRyZXNzQ29kZWMoKTs=",
  "node_modules/@btc-vision/btc-runtime/runtime/nested/codecs/BooleanCodec.ts": "aW1wb3J0IHsgSUNvZGVjIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9JQ29kZWMnOwoKY2xhc3MgX0Jvb2xlYW5Db2RlYyBpbXBsZW1lbnRzIElDb2RlYzxib29sPiB7CiAgICBwdWJsaWMgZW5jb2RlKHZhbHVlOiBib29sKTogVWludDhBcnJheSB7CiAgICAgICAgY29uc3Qgb3V0ID0gbmV3IFVpbnQ4QXJyYXkoMSk7CiAgICAgICAgb3V0WzBdID0gdmFsdWUgPyAxIDogMDsKICAgICAgICByZXR1cm4gb3V0OwogICAgfQoKICAgIHB1YmxpYyBkZWNvZGUoYnVmZmVyOiBVaW50OEFycmF5KTogYm9vbCB7CiAgICAgICAgaWYgKGJ1ZmZlci5sZW5ndGggPT0gMCkgcmV0dXJuIGZhbHNlOwogICAgICAgIHJldHVybiBidWZmZXJbMF0gPT0gMTsKICAgIH0KfQoKZXhwb3J0IGNvbnN0IGlkT2ZCb29sQ29kZWMgPSBpZG9mPF9Cb29sZWFuQ29kZWM+KCk7CmV4cG9ydCBjb25zdCBCb29sZWFuQ29kZWMgPSBuZXcgX0Jvb2xlYW5Db2RlYygpOw==",
  "node_modules/@btc-vision/btc-runtime/runtime/nested/codecs/Ids.ts": "aW1wb3J0IHsgaTEyOCwgdTEyOCwgdTI1NiB9IGZyb20gJ0BidGMtdmlzaW9uL2FzLWJpZ251bS9hc3NlbWJseSc7CmltcG9ydCB7IFVpbnQ4QXJyYXkgfSBmcm9tICd0eXBlZGFycmF5JzsKaW1wb3J0IHsgQWRkcmVzcyB9IGZyb20gJy4uLy4uL3R5cGVzL0FkZHJlc3MnOwoKZXhwb3J0IGNvbnN0IGlkT2ZVMjU2ID0gaWRvZjx1MjU2PigpOwpleHBvcnQgY29uc3QgaWRPZlUxMjggPSBpZG9mPHUxMjg+KCk7CmV4cG9ydCBjb25zdCBpZE9mSTEyOCA9IGlkb2Y8aTEyOD4oKTsKZXhwb3J0IGNvbnN0IGlkT2ZVaW50OEFycmF5ID0gaWRvZjxVaW50OEFycmF5PigpOwpleHBvcnQgY29uc3QgaWRPZlN0cmluZyA9IGlkb2Y8c3RyaW5nPigpOwpleHBvcnQgY29uc3QgaWRPZkFkZHJlc3MgPSBpZG9mPEFkZHJlc3M+KCk7",
  "node_modules/@btc-vision/btc-runtime/runtime/nested/codecs/NumericCodec.ts": "aW1wb3J0IHsgaTEyOCwgdTEyOCwgdTI1NiB9IGZyb20gJ0BidGMtdmlzaW9uL2FzLWJpZ251bS9hc3NlbWJseSc7CmltcG9ydCB7IElDb2RlYyB9IGZyb20gJy4uL2ludGVyZmFjZXMvSUNvZGVjJzsKaW1wb3J0IHsgQnl0ZXNXcml0ZXIgfSBmcm9tICcuLi8uLi9idWZmZXIvQnl0ZXNXcml0ZXInOwppbXBvcnQgeyBCeXRlc1JlYWRlciB9IGZyb20gJy4uLy4uL2J1ZmZlci9CeXRlc1JlYWRlcic7CmltcG9ydCB7IGlkT2ZJMTI4LCBpZE9mVTEyOCwgaWRPZlUyNTYgfSBmcm9tICcuL0lkcyc7CgovKioKICogQSBnZW5lcmljIE51bWVyaWNDb2RlYzxUPiB0aGF0IGhhbmRsZXM6CiAqICAtIGB1MjU2YCBmcm9tIEBidGMtdmlzaW9uL2FzLWJpZ251bSAoYmlnLWVuZGlhbikKICogIC0gQW55IGJ1aWx0LWluIGludGVnZXIgdHlwZSAoaTMyLCB1MzIsIGk2NCwgZXRjLikgYWxzbyBzdG9yZWQgYmlnLWVuZGlhbgogKi8KZXhwb3J0IGNsYXNzIE51bWVyaWNDb2RlYzxUPiBpbXBsZW1lbnRzIElDb2RlYzxUPiB7CiAgICBwdWJsaWMgZW5jb2RlKHZhbHVlOiBUKTogVWludDhBcnJheSB7CiAgICAgICAgY29uc3QgaWQgPSBpZG9mPFQ+KCk7CiAgICAgICAgc3dpdGNoIChpZCkgewogICAgICAgICAgICBjYXNlIGlkT2ZVMjU2OiB7CiAgICAgICAgICAgICAgICAvLyBUIGlzIGB1MjU2YAogICAgICAgICAgICAgICAgY29uc3QgdmFsID0gY2hhbmdldHlwZTx1MjU2Pih2YWx1ZSk7CiAgICAgICAgICAgICAgICByZXR1cm4gdmFsLnRvVWludDhBcnJheSh0cnVlKTsgLy8gYmlnLWVuZGlhbgogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhc2UgaWRPZlUxMjg6IHsKICAgICAgICAgICAgICAgIC8vIFQgaXMgYHUxMjhgCiAgICAgICAgICAgICAgICBjb25zdCB2YWwgPSBjaGFuZ2V0eXBlPHUxMjg+KHZhbHVlKTsKICAgICAgICAgICAgICAgIHJldHVybiB2YWwudG9VaW50OEFycmF5KHRydWUpOyAvLyBiaWctZW5kaWFuCiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2FzZSBpZE9mSTEyODogewogICAgICAgICAgICAgICAgLy8gVCBpcyBgaTEyOGAKICAgICAgICAgICAgICAgIGNvbnN0IHZhbCA9IGNoYW5nZXR5cGU8aTEyOD4odmFsdWUpOwogICAgICAgICAgICAgICAgcmV0dXJuIHZhbC50b1VpbnQ4QXJyYXkodHJ1ZSk7IC8vIGJpZy1lbmRpYW4KICAgICAgICAgICAgfQogICAgICAgICAgICBkZWZhdWx0OiB7CiAgICAgICAgICAgICAgICBjb25zdCB3cml0ZXIgPSBuZXcgQnl0ZXNXcml0ZXIoc2l6ZW9mPFQ+KCkpOwogICAgICAgICAgICAgICAgd3JpdGVyLndyaXRlPFQ+KHZhbHVlKTsKCiAgICAgICAgICAgICAgICByZXR1cm4gd3JpdGVyLmdldEJ1ZmZlcigpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIHB1YmxpYyBkZWNvZGUoYnVmZmVyOiBVaW50OEFycmF5KTogVCB7CiAgICAgICAgY29uc3QgaWQgPSBpZG9mPFQ+KCk7CiAgICAgICAgc3dpdGNoIChpZCkgewogICAgICAgICAgICBjYXNlIGlkT2ZVMjU2OgogICAgICAgICAgICAgICAgLy8gVCBpcyBgdTI1NmAKICAgICAgICAgICAgICAgIHJldHVybiBjaGFuZ2V0eXBlPFQ+KHUyNTYuZnJvbUJ5dGVzKGJ1ZmZlciwgdHJ1ZSkpOwogICAgICAgICAgICBjYXNlIGlkT2ZVMTI4OgogICAgICAgICAgICAgICAgLy8gVCBpcyBgdTEyOGAKICAgICAgICAgICAgICAgIHJldHVybiBjaGFuZ2V0eXBlPFQ+KHUxMjguZnJvbUJ5dGVzKGJ1ZmZlciwgdHJ1ZSkpOwogICAgICAgICAgICBjYXNlIGlkT2ZJMTI4OgogICAgICAgICAgICAgICAgLy8gVCBpcyBgaTEyOGAKICAgICAgICAgICAgICAgIHJldHVybiBjaGFuZ2V0eXBlPFQ+KGkxMjguZnJvbUJ5dGVzKGJ1ZmZlciwgdHJ1ZSkpOwogICAgICAgICAgICBkZWZhdWx0OiB7CiAgICAgICAgICAgICAgICBjb25zdCB3cml0ZXIgPSBuZXcgQnl0ZXNSZWFkZXIoYnVmZmVyKTsKICAgICAgICAgICAgICAgIHJldHVybiB3cml0ZXIucmVhZDxUPigpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9",
  "node_modules/@btc-vision/btc-runtime/runtime/nested/codecs/StringCodec.ts": "aW1wb3J0IHsgSUNvZGVjIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9JQ29kZWMnOwppbXBvcnQgeyBWYXJpYWJsZUJ5dGVzQ29kZWMgfSBmcm9tICcuL1ZhcmlhYmxlQnl0ZXNDb2RlYyc7CgpjbGFzcyBJU3RyaW5nQ29kZWMgaW1wbGVtZW50cyBJQ29kZWM8c3RyaW5nPiB7CiAgICBwdWJsaWMgZW5jb2RlKHZhbHVlOiBzdHJpbmcpOiBVaW50OEFycmF5IHsKICAgICAgICAvLyBDb252ZXJ0IHN0cmluZyAtPiBVVEY4IGJ5dGVzCiAgICAgICAgY29uc3QgdXRmOCA9IFN0cmluZy5VVEY4LmVuY29kZSh2YWx1ZSwgZmFsc2UpOwoKICAgICAgICAvLyBQYXNzIHRvIHZhcmlhYmxlLWJ5dGVzCiAgICAgICAgcmV0dXJuIFZhcmlhYmxlQnl0ZXNDb2RlYy5lbmNvZGUoVWludDhBcnJheS53cmFwKHV0ZjgpKTsKICAgIH0KCiAgICBwdWJsaWMgZGVjb2RlKGJ1ZmZlcjogVWludDhBcnJheSk6IHN0cmluZyB7CiAgICAgICAgY29uc3QgcmF3ID0gVmFyaWFibGVCeXRlc0NvZGVjLmRlY29kZShidWZmZXIpOwogICAgICAgIGlmIChyYXcubGVuZ3RoID09IDApIHsKICAgICAgICAgICAgcmV0dXJuICcnOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIFN0cmluZy5VVEY4LmRlY29kZShyYXcuYnVmZmVyLCBmYWxzZSk7CiAgICB9Cn0KCmV4cG9ydCBjb25zdCBpZE9mU3RyaW5nQ29kZWMgPSBpZG9mPElTdHJpbmdDb2RlYz4oKTsKZXhwb3J0IGNvbnN0IFN0cmluZ0NvZGVjID0gbmV3IElTdHJpbmdDb2RlYygpOw==",
  "node_modules/@btc-vision/btc-runtime/runtime/nested/codecs/U256Codec.ts": "aW1wb3J0IHsgdTI1NiB9IGZyb20gJ0BidGMtdmlzaW9uL2FzLWJpZ251bS9hc3NlbWJseSc7CmltcG9ydCB7IElDb2RlYyB9IGZyb20gJy4uL2ludGVyZmFjZXMvSUNvZGVjJzsKCmNsYXNzIF9VMjU2Q29kZWMgaW1wbGVtZW50cyBJQ29kZWM8dTI1Nj4gewogICAgcHVibGljIGVuY29kZSh2YWx1ZTogdTI1Nik6IFVpbnQ4QXJyYXkgewogICAgICAgIC8vIGJpZy1lbmRpYW4KICAgICAgICByZXR1cm4gdmFsdWUudG9VaW50OEFycmF5KHRydWUpOwogICAgfQoKICAgIHB1YmxpYyBkZWNvZGUoYnVmZmVyOiBVaW50OEFycmF5KTogdTI1NiB7CiAgICAgICAgaWYgKGJ1ZmZlci5sZW5ndGggPT0gMCkgewogICAgICAgICAgICByZXR1cm4gdTI1Ni5aZXJvOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHUyNTYuZnJvbVVpbnQ4QXJyYXlCRShidWZmZXIpOwogICAgfQp9CgpleHBvcnQgY29uc3QgaWRPZlUyNTZDb2RlYyA9IGlkb2Y8X1UyNTZDb2RlYz4oKTsKZXhwb3J0IGNvbnN0IFUyNTZDb2RlYyA9IG5ldyBfVTI1NkNvZGVjKCk7Cg==",
  "node_modules/@btc-vision/btc-runtime/runtime/nested/codecs/VariableBytesCodec.ts": "aW1wb3J0IHsgSUNvZGVjIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9JQ29kZWMnOwppbXBvcnQgeyBQb2ludGVyTWFuYWdlciB9IGZyb20gJy4uL1BvaW50ZXJNYW5hZ2VyJzsKaW1wb3J0IHsgQmxvY2tjaGFpbiB9IGZyb20gJy4uLy4uL2Vudic7CmltcG9ydCB7IGJpZ0VuZGlhbkFkZCB9IGZyb20gJy4uLy4uL21hdGgvYnl0ZXMnOwoKLyoqCiAqIEEgZ2VuZXJpYyBjb2RlYyB0byBzdG9yZSBhbiBhcmJpdHJhcnktbGVuZ3RoIGJ5dGUgYXJyYXkgKCJwYXlsb2FkIikgaW4gY2h1bmtlZCAzMi1ieXRlIHNsb3RzLgogKiBMYXlvdXQ6CiAqICAgIC0gY2h1bmsgMCAocG9pbnRlciswKToKICogICAgICAgICBmaXJzdCA0IGJ5dGVzID0gbGVuZ3RoICh1MzIgYmlnLWVuZGlhbiksCiAqICAgICAgICAgbmV4dCAyOCBieXRlcyA9IHBhcnRpYWwgZGF0YQogKiAgICAtIGNodW5rIGk+MCAocG9pbnRlciArIGkpOiAzMiBieXRlcyBvZiBzdWJzZXF1ZW50IGRhdGEKICovCmV4cG9ydCBjbGFzcyBJVmFyaWFibGVCeXRlc0NvZGVjIGltcGxlbWVudHMgSUNvZGVjPFVpbnQ4QXJyYXk+IHsKICAgIHB1YmxpYyBlbmNvZGUodmFsdWU6IFVpbnQ4QXJyYXkpOiBVaW50OEFycmF5IHsKICAgICAgICBjb25zdCBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7CgogICAgICAgIC8vIE51bWJlciBvZiBieXRlcyB0aGF0IGZpdCBpbiAidGhlIGZpcnN0IGNodW5rIiA9IDI4IChzaW5jZSA0IGJ5dGVzIHVzZWQgYnkgbGVuZ3RoKQogICAgICAgIGNvbnN0IGZpcnN0Q2h1bmtEYXRhTGVuID0gbGVuZ3RoIDwgMjggPyBsZW5ndGggOiAyODsKICAgICAgICBsZXQgcmVtYWluaW5nID0gbGVuZ3RoIC0gZmlyc3RDaHVua0RhdGFMZW47CgogICAgICAgIC8vIElmIHJlbWFpbmluZyA+IDAsIGVhY2ggY2h1bmsgaXMgMzIgYnl0ZXMuCiAgICAgICAgLy8gU28gdG90YWwgY2h1bmtzIG5lZWRlZCA9IDEgKGZvciBmaXJzdCBjaHVuaykgKyBjZWlsKHJlbWFpbmluZyAvIDMyKS4KICAgICAgICBjb25zdCBhZGRpdGlvbmFsQ2h1bmtzOiB1MzIgPSByZW1haW5pbmcgPT0gMCA/IDAgOiAoKHJlbWFpbmluZyArIDMyIC0gMSkgLyAzMik7CiAgICAgICAgY29uc3QgdG90YWxDaHVua3M6IHUzMiA9IDEgKyBhZGRpdGlvbmFsQ2h1bmtzOwoKICAgICAgICAvLyAxKSBBbGxvY2F0ZSBgdG90YWxDaHVua3NgIGZyb20gUG9pbnRlck1hbmFnZXIKICAgICAgICBjb25zdCBwb2ludGVyQnl0ZXMgPSBQb2ludGVyTWFuYWdlci5hbGxvY2F0ZVNsb3RzKHRvdGFsQ2h1bmtzKTsKCiAgICAgICAgLy8gMikgV3JpdGUgY2h1bmsgMDogbGVuZ3RoICsgdXAgdG8gMjggYnl0ZXMKICAgICAgICBjb25zdCBjaHVuazAgPSBuZXcgVWludDhBcnJheSgzMik7CgogICAgICAgIC8vIHN0b3JlIGxlbmd0aCBpbiBiaWctZW5kaWFuICg0IGJ5dGVzKQogICAgICAgIGNodW5rMFswXSA9IDx1OD4oKGxlbmd0aCA+PiAyNCkgJiAweGZmKTsKICAgICAgICBjaHVuazBbMV0gPSA8dTg+KChsZW5ndGggPj4gMTYpICYgMHhmZik7CiAgICAgICAgY2h1bmswWzJdID0gPHU4PigobGVuZ3RoID4+IDgpICYgMHhmZik7CiAgICAgICAgY2h1bmswWzNdID0gPHU4PihsZW5ndGggJiAweGZmKTsKCiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaXJzdENodW5rRGF0YUxlbjsgaSsrKSB7CiAgICAgICAgICAgIGNodW5rMFs0ICsgaV0gPSB2YWx1ZVtpXTsKICAgICAgICB9CgogICAgICAgIC8vIHN0b3JlIGNodW5rMAogICAgICAgIEJsb2NrY2hhaW4uc2V0U3RvcmFnZUF0KHBvaW50ZXJCeXRlcywgY2h1bmswKTsKCiAgICAgICAgLy8gMykgV3JpdGUgc3Vic2VxdWVudCBjaHVua3MKICAgICAgICBsZXQgb2Zmc2V0OiB1MzIgPSBmaXJzdENodW5rRGF0YUxlbjsKICAgICAgICBmb3IgKGxldCBpOiB1NjQgPSAxOyBpIDwgdTY0KHRvdGFsQ2h1bmtzKTsgaSsrKSB7CiAgICAgICAgICAgIGNvbnN0IGNodW5rID0gbmV3IFVpbnQ4QXJyYXkoMzIpOwogICAgICAgICAgICBjb25zdCBjaHVua1NpemU6IHUzMiA9IHJlbWFpbmluZyA8IDMyID8gcmVtYWluaW5nIDogMzI7CgogICAgICAgICAgICBmb3IgKGxldCBqOiB1MzIgPSAwOyBqIDwgY2h1bmtTaXplOyBqKyspIHsKICAgICAgICAgICAgICAgIGNodW5rW2pdID0gdmFsdWVbb2Zmc2V0ICsgal07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIG9mZnNldCArPSBjaHVua1NpemU7CiAgICAgICAgICAgIHJlbWFpbmluZyAtPSBjaHVua1NpemU7CgogICAgICAgICAgICAvLyBjb21wdXRlIHBvaW50ZXIgKyBpIGluIGJpZy1lbmRpYW4KICAgICAgICAgICAgY29uc3QgY2h1bmtQb2ludGVyID0gYmlnRW5kaWFuQWRkKHBvaW50ZXJCeXRlcywgaSk7CiAgICAgICAgICAgIEJsb2NrY2hhaW4uc2V0U3RvcmFnZUF0KGNodW5rUG9pbnRlciwgY2h1bmspOwogICAgICAgIH0KCiAgICAgICAgLy8gNCkgUmV0dXJuIHRoZSBwb2ludGVyIGFzIHRoZSAiZW5jb2RlZCIgZGF0YSAoMzIgYnl0ZXMpLgogICAgICAgIHJldHVybiBwb2ludGVyQnl0ZXM7CiAgICB9CgogICAgcHVibGljIGRlY29kZShidWZmZXI6IFVpbnQ4QXJyYXkpOiBVaW50OEFycmF5IHsKICAgICAgICAvLyBJZiBidWZmZXIgaXMgMCBvciBhbGwgemVybyA9PiBtZWFucyBubyBkYXRhCiAgICAgICAgaWYgKGJ1ZmZlci5sZW5ndGggPT0gMCB8fCBpc0FsbFplcm8oYnVmZmVyKSkgewogICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoMCk7CiAgICAgICAgfQoKICAgICAgICBjb25zdCBwb2ludGVyID0gYnVmZmVyOyAvLyB0aGUgcG9pbnRlciAoMzIgYnl0ZXMpCgogICAgICAgIC8vIGNodW5rMAogICAgICAgIGNvbnN0IGNodW5rMCA9IEJsb2NrY2hhaW4uZ2V0U3RvcmFnZUF0KHBvaW50ZXIpOwogICAgICAgIGlmIChjaHVuazAubGVuZ3RoID09IDApIHsKICAgICAgICAgICAgLy8gTm8gZGF0YSBzdG9yZWQgPT4gZW1wdHkKICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KDMyKTsKICAgICAgICB9CgogICAgICAgIC8vIHJlYWQgbGVuZ3RoIGZyb20gZmlyc3QgNCBieXRlcwogICAgICAgIGNvbnN0IGIwID0gPHUzMj5jaHVuazBbMF07CiAgICAgICAgY29uc3QgYjEgPSA8dTMyPmNodW5rMFsxXTsKICAgICAgICBjb25zdCBiMiA9IDx1MzI+Y2h1bmswWzJdOwogICAgICAgIGNvbnN0IGIzID0gPHUzMj5jaHVuazBbM107CiAgICAgICAgY29uc3QgbGVuZ3RoID0gKGIwIDw8IDI0KSB8IChiMSA8PCAxNikgfCAoYjIgPDwgOCkgfCBiMzsKCiAgICAgICAgaWYgKGxlbmd0aCA9PSAwKSB7CiAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheSgwKTsKICAgICAgICB9CgogICAgICAgIC8vIHJlYWQgdGhlIGRhdGEKICAgICAgICBjb25zdCBvdXQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpOwogICAgICAgIGNvbnN0IGZpcnN0Q2h1bmtMZW4gPSBsZW5ndGggPCAyOCA/IGxlbmd0aCA6IDI4OwoKICAgICAgICAvLyBjb3B5IGZyb20gY2h1bmswCiAgICAgICAgZm9yIChsZXQgaTogdTMyID0gMDsgaSA8IGZpcnN0Q2h1bmtMZW47IGkrKykgewogICAgICAgICAgICBvdXRbaV0gPSBjaHVuazBbNCArIGldOwogICAgICAgIH0KCiAgICAgICAgbGV0IG9mZnNldCA9IGZpcnN0Q2h1bmtMZW47CiAgICAgICAgbGV0IHJlbWFpbmluZyA9IGxlbmd0aCAtIGZpcnN0Q2h1bmtMZW47CgogICAgICAgIC8vIHJlYWQgc3Vic2VxdWVudCBjaHVua3MKICAgICAgICBsZXQgY2h1bmtJbmRleDogdTY0ID0gMTsKICAgICAgICB3aGlsZSAocmVtYWluaW5nID4gMCkgewogICAgICAgICAgICBjb25zdCBjaHVua1BvaW50ZXIgPSBiaWdFbmRpYW5BZGQocG9pbnRlciwgY2h1bmtJbmRleCk7CiAgICAgICAgICAgIGNvbnN0IGNodW5rRGF0YSA9IEJsb2NrY2hhaW4uZ2V0U3RvcmFnZUF0KGNodW5rUG9pbnRlcik7CiAgICAgICAgICAgIGNvbnN0IGNodW5rU2l6ZTogdTMyID0gcmVtYWluaW5nIDwgMzIgPyByZW1haW5pbmcgOiAzMjsKCiAgICAgICAgICAgIGZvciAobGV0IGo6IHUzMiA9IDA7IGogPCBjaHVua1NpemU7IGorKykgewogICAgICAgICAgICAgICAgb3V0W29mZnNldCArIGpdID0gY2h1bmtEYXRhW2pdOwogICAgICAgICAgICB9CgogICAgICAgICAgICBvZmZzZXQgKz0gY2h1bmtTaXplOwogICAgICAgICAgICByZW1haW5pbmcgLT0gY2h1bmtTaXplOwogICAgICAgICAgICBjaHVua0luZGV4Kys7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gb3V0OwogICAgfQp9CgpmdW5jdGlvbiBpc0FsbFplcm8oYXJyOiBVaW50OEFycmF5KTogYm9vbCB7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykgewogICAgICAgIGlmIChhcnJbaV0gIT0gMCkgcmV0dXJuIGZhbHNlOwogICAgfQogICAgcmV0dXJuIHRydWU7Cn0KCmV4cG9ydCBjb25zdCBpZE9mVmFyaWFibGVCeXRlcyA9IGlkb2Y8SVZhcmlhYmxlQnl0ZXNDb2RlYz4oKTsKZXhwb3J0IGNvbnN0IFZhcmlhYmxlQnl0ZXNDb2RlYyA9IG5ldyBJVmFyaWFibGVCeXRlc0NvZGVjKCk7",
  "node_modules/@btc-vision/btc-runtime/runtime/nested/interfaces/ICodec.ts": "ZXhwb3J0IGludGVyZmFjZSBJQ29kZWM8VD4gewogICAgLyoqCiAgICAgKiBFbmNvZGUgaW4tbWVtb3J5IGB2YWx1ZWAgaW50byBhIGJ1ZmZlciB0aGF0IHdpbGwgYmUgc3RvcmVkIGluIGJsb2NrY2hhaW4gc3RvcmFnZS4KICAgICAqIFBvc3NpYmx5IGEgc2luZ2xlIDMyLWJ5dGUgY2h1bmsgb3IgYSBwb2ludGVyIGlmIG1vcmUgaXMgbmVlZGVkLgogICAgICovCiAgICBlbmNvZGUodmFsdWU6IFQpOiBVaW50OEFycmF5OwoKICAgIC8qKgogICAgICogRGVjb2RlIGEgYnVmZmVyIGZyb20gc3RvcmFnZSBpbnRvIGFuIGluLW1lbW9yeSBgVGAuCiAgICAgKi8KICAgIGRlY29kZShidWZmZXI6IFVpbnQ4QXJyYXkpOiBUOwp9Cg==",
  "node_modules/@btc-vision/btc-runtime/runtime/nested/PointerManager.ts": "aW1wb3J0IHsgQmxvY2tjaGFpbiB9IGZyb20gJy4uL2Vudic7CmltcG9ydCB7IFBvdGVudGlhbCB9IGZyb20gJy4uL2xhbmcvRGVmaW5pdGlvbnMnOwppbXBvcnQgeyBiaWdFbmRpYW5BZGQgfSBmcm9tICcuLi9tYXRoL2J5dGVzJzsKaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSAnLi4vcGx1Z2lucy9QbHVnaW4nOwoKLyoqCiAqIEEgdW5pcXVlIGtleSBpbiBzdG9yYWdlIHRoYXQgaG9sZHMgdGhlIG5leHQgZnJlZSAib2Zmc2V0IiBhcyBhIDI1Ni1iaXQgY291bnRlci4KICogWW91IGNhbiBjaGFuZ2UgdGhpcyB0byBhbnkgMzItYnl0ZSBjb25zdGFudCB5b3UgbGlrZS4KICovCmNvbnN0IEFMTE9DQVRPUl9LRVkgPSBuZXcgVWludDhBcnJheSgzMik7CmZvciAobGV0IGkgPSAwOyBpIDwgMzI7IGkrKykgewogICAgQUxMT0NBVE9SX0tFWVtpXSA9IDB4ZmY7Cn0KCi8qKgogKiBQb2ludGVyTWFuYWdlcjogZW5zdXJlcyB3ZSBuZXZlciBjb2xsaWRlIHdoaWxlIGFsbG9jYXRpbmcgdmFyaWFibGUtbGVuZ3RoIGRhdGEuCiAqIC0gV2Ugc3RvcmUgYSBnbG9iYWwgIm9mZnNldCIgaW4gQUxMT0NBVE9SX0tFWSAoYXMgYSBiaWctZW5kaWFuIHUyNTYpLgogKiAtIEVhY2ggdGltZSB3ZSBhbGxvY2F0ZSBOIHNsb3RzIChOICogMzIgYnl0ZXMpLCB3ZSBkbzoKICogICAgICBvbGRPZmZzZXQgPSBjdXJyZW50R2xvYmFsT2Zmc2V0CiAqICAgICAgbmV3T2Zmc2V0ID0gb2xkT2Zmc2V0ICsgTgogKiAgICAgIHN0b3JlIG5ld09mZnNldCBiYWNrCiAqICAgICAgcmV0dXJuIG9sZE9mZnNldCBhcyB0aGUgYmFzZSBwb2ludGVyCiAqLwpjbGFzcyBfUG9pbnRlck1hbmFnZXIgZXh0ZW5kcyBQbHVnaW4gewogICAgcHJpdmF0ZSBfY2FjaGVkT2Zmc2V0OiBQb3RlbnRpYWw8VWludDhBcnJheT4gPSBudWxsOwoKICAgIHByaXZhdGUgZ2V0IGNhY2hlZE9mZnNldCgpOiBVaW50OEFycmF5IHsKICAgICAgICBpZiAoIXRoaXMuX2NhY2hlZE9mZnNldCkgewogICAgICAgICAgICB0aGlzLl9jYWNoZWRPZmZzZXQgPSBCbG9ja2NoYWluLmdldFN0b3JhZ2VBdChBTExPQ0FUT1JfS0VZKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0aGlzLl9jYWNoZWRPZmZzZXQgYXMgVWludDhBcnJheTsKICAgIH0KCiAgICAvKioKICAgICAqIEFsbG9jYXRlcyBgbnVtU2xvdHNgIChlYWNoIDMyIGJ5dGVzKS4gUmV0dXJucyBhIDMyLWJ5dGUgcG9pbnRlciAodTI1NiBpbiBiaWctZW5kaWFuKS4KICAgICAqCiAgICAgKiBFYWNoIHNsb3QgaXMgY29uY2VwdHVhbGx5OgogICAgICogICBzbG90MCA9IHBvaW50ZXIgKyAwCiAgICAgKiAgIHNsb3QxID0gcG9pbnRlciArIDEKICAgICAqICAgLi4uCiAgICAgKiBhbmQgc28gZm9ydGggaW4gYmlnLWVuZGlhbiBhcml0aG1ldGljLgogICAgICovCiAgICBwdWJsaWMgYWxsb2NhdGVTbG90cyhudW1TbG90czogdTY0KTogVWludDhBcnJheSB7CiAgICAgICAgdGhpcy5fY2FjaGVkT2Zmc2V0ID0gYmlnRW5kaWFuQWRkKHRoaXMuY2FjaGVkT2Zmc2V0LCBudW1TbG90cyk7CgogICAgICAgIGNvbnN0IHZhbCA9IHRoaXMuY2FjaGVkT2Zmc2V0OwogICAgICAgIEJsb2NrY2hhaW4uc2V0U3RvcmFnZUF0KEFMTE9DQVRPUl9LRVksIHZhbCk7CgogICAgICAgIHJldHVybiB2YWw7CiAgICB9Cn0KCmV4cG9ydCBjb25zdCBQb2ludGVyTWFuYWdlciA9IG5ldyBfUG9pbnRlck1hbmFnZXIoKTsKQmxvY2tjaGFpbi5yZWdpc3RlclBsdWdpbihQb2ludGVyTWFuYWdlcik7",
  "node_modules/@btc-vision/btc-runtime/runtime/nested/storage/StorageMap.ts": "",
  "node_modules/@btc-vision/btc-runtime/runtime/nested/storage/StorageSet.ts": "aW1wb3J0IHsgSUNvZGVjIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9JQ29kZWMnOwppbXBvcnQgeyBCeXRlc1dyaXRlciB9IGZyb20gJy4uLy4uL2J1ZmZlci9CeXRlc1dyaXRlcic7CmltcG9ydCB7IGVuY29kZVBvaW50ZXJVbmtub3duTGVuZ3RoIH0gZnJvbSAnLi4vLi4vbWF0aC9hYmknOwppbXBvcnQgeyBCbG9ja2NoYWluIH0gZnJvbSAnLi4vLi4vZW52JzsKCgpleHBvcnQgY2xhc3MgU3RvcmFnZVNldDxUPiB7CiAgICBwcml2YXRlIHJlYWRvbmx5IHBvaW50ZXI6IHUxNjsKICAgIHByaXZhdGUgcmVhZG9ubHkgcGFyZW50S2V5OiBVaW50OEFycmF5OwoKICAgIHByaXZhdGUgZWxlbWVudENvZGVjOiBJQ29kZWM8VD47CgogICAgY29uc3RydWN0b3IocG9pbnRlcjogdTE2LCBwYXJlbnRLZXk6IFVpbnQ4QXJyYXksIGVsZW1lbnRDb2RlYzogSUNvZGVjPFQ+KSB7CiAgICAgICAgdGhpcy5wb2ludGVyID0gcG9pbnRlcjsKICAgICAgICB0aGlzLnBhcmVudEtleSA9IHBhcmVudEtleTsKICAgICAgICB0aGlzLmVsZW1lbnRDb2RlYyA9IGVsZW1lbnRDb2RlYzsKICAgIH0KCiAgICBwdWJsaWMgYWRkKHZhbHVlOiBUKTogdm9pZCB7CiAgICAgICAgY29uc3Qgc3RvcmFnZUtleSA9IHRoaXMuZ2V0U3RvcmFnZUtleSh2YWx1ZSk7CgogICAgICAgIC8vIEEgMS1ieXRlIGFycmF5IHdpdGggYSBzaW5nbGUgMHgwMSBpcyBlbm91Z2ggdG8gbWFyayBwcmVzZW5jZQogICAgICAgIGNvbnN0IGZsYWcgPSBuZXcgVWludDhBcnJheSgxKTsKICAgICAgICBmbGFnWzMxXSA9IDE7CgogICAgICAgIEJsb2NrY2hhaW4uc2V0U3RvcmFnZUF0KHN0b3JhZ2VLZXksIGZsYWcpOwogICAgfQoKICAgIHB1YmxpYyBoYXModmFsdWU6IFQpOiBib29sIHsKICAgICAgICBjb25zdCBzdG9yYWdlS2V5ID0gdGhpcy5nZXRTdG9yYWdlS2V5KHZhbHVlKTsKICAgICAgICByZXR1cm4gQmxvY2tjaGFpbi5oYXNTdG9yYWdlQXQoc3RvcmFnZUtleSk7CiAgICB9CgogICAgcHVibGljIGRlbGV0ZSh2YWx1ZTogVCk6IGJvb2wgewogICAgICAgIGNvbnN0IHN0b3JhZ2VLZXkgPSB0aGlzLmdldFN0b3JhZ2VLZXkodmFsdWUpOwogICAgICAgIGlmICghQmxvY2tjaGFpbi5oYXNTdG9yYWdlQXQoc3RvcmFnZUtleSkpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgQmxvY2tjaGFpbi5zZXRTdG9yYWdlQXQoc3RvcmFnZUtleSwgbmV3IFVpbnQ4QXJyYXkoMzIpKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBAdW5zYWZlCiAgICBwdWJsaWMgY2xlYXIoKTogdm9pZCB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhcigpIG5vdCBpbXBsZW1lbnRlZC4nKTsKICAgIH0KCiAgICBwcml2YXRlIGdldFN0b3JhZ2VLZXkodmFsdWU6IFQpOiBVaW50OEFycmF5IHsKICAgICAgICBjb25zdCBlbmNvZGVkID0gdGhpcy5lbGVtZW50Q29kZWMuZW5jb2RlKHZhbHVlKTsKICAgICAgICBjb25zdCB3cml0ZXIgPSBuZXcgQnl0ZXNXcml0ZXIodGhpcy5wYXJlbnRLZXkubGVuZ3RoICsgZW5jb2RlZC5sZW5ndGgpOwogICAgICAgIHdyaXRlci53cml0ZUJ5dGVzKHRoaXMucGFyZW50S2V5KTsKICAgICAgICB3cml0ZXIud3JpdGVCeXRlcyhlbmNvZGVkKTsKCiAgICAgICAgcmV0dXJuIGVuY29kZVBvaW50ZXJVbmtub3duTGVuZ3RoKHRoaXMucG9pbnRlciwgd3JpdGVyLmdldEJ1ZmZlcigpKTsKICAgIH0KfQo=",
  "node_modules/@btc-vision/btc-runtime/runtime/plugins/Plugin.ts": "aW1wb3J0IHsgQ2FsbGRhdGEgfSBmcm9tICcuLi90eXBlcyc7CgpleHBvcnQgY2xhc3MgUGx1Z2luIHsKICAgIHB1YmxpYyBvbkRlcGxveW1lbnQoX2NhbGxkYXRhOiBDYWxsZGF0YSk6IHZvaWQgewogICAgfQoKICAgIHB1YmxpYyBvbkV4ZWN1dGlvblN0YXJ0ZWQoKTogdm9pZCB7CiAgICB9CgogICAgcHVibGljIG9uRXhlY3V0aW9uQ29tcGxldGVkKCk6IHZvaWQgewogICAgfQp9",
  "node_modules/@btc-vision/btc-runtime/runtime/secp256k1/ECPoint.ts": "aW1wb3J0IHsgdTI1NiB9IGZyb20gJ0BidGMtdmlzaW9uL2FzLWJpZ251bS9hc3NlbWJseSc7CmltcG9ydCB7IFNhZmVNYXRoIH0gZnJvbSAnLi4vdHlwZXMvU2FmZU1hdGgnOwoKLy8gc2VjcDI1NmsxIHByaW1lIChsaXR0bGUtZW5kaWFuKTogMHhGRkZGRkZGRl9GRkZGRkZGRl9GRkZGRkZGRl9GRkZGRkZGRl9GRkZGRkZGRl9GRkZGRkZGRl9GRkZGRkZGRV9GRkZGRkMyRgpjb25zdCBQX0JZVEVTOiB1OFtdID0gWwogICAgMHgyZiwgMHhmYywgMHhmZiwgMHhmZiwgMHhmZSwgMHhmZiwgMHhmZiwgMHhmZiwKICAgIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsCiAgICAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLAogICAgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwKXTsKCi8vIEd4IChsaXR0bGUtZW5kaWFuKSA9IDc5QkU2NjdFLi4uRjgxNzk4IHJldmVyc2VkCmNvbnN0IEdYX0JZVEVTOiB1OFtdID0gWwogICAgMHg5OCwgMHgxNywgMHhmOCwgMHgxNiwgMHhiMSwgMHg1YiwgMHgyOCwgMHhkOSwKICAgIDB4NTksIDB4MjgsIDB4Y2UsIDB4MmQsIDB4ZGIsIDB4ZmMsIDB4OWIsIDB4MDIsCiAgICAweDcwLCAweGIwLCAweDg3LCAweGNlLCAweDk1LCAweGEwLCAweDYyLCAweDU1LAogICAgMHhhYywgMHhiYiwgMHhkYywgMHhmOSwgMHhlZiwgMHg2NiwgMHhiZSwgMHg3OSwKXTsKCi8vIEJpZy1lbmRpYW46ICA0OCAzQSBEQSA3NyAyNiBBMyBDNCA2NSA1RCBBNCBGQiBGQyAwRSAxMSAwOCBBOCBGRCAxNyBCNCA0OCBBNiA4NSA1NCAxOSA5QyA0NyBEMCA4RiBGQiAxMCBENCBCOAovLyBMaXR0bGUtZW5kaWFuIHJldmVyc2FsOgpjb25zdCBHWV9CWVRFUzogdThbXSA9IFsKICAgIDB4YjgsIDB4ZDQsIDB4MTAsIDB4ZmIsIDB4OGYsIDB4ZDAsIDB4NDcsIDB4OWMsCiAgICAweDE5LCAweDU0LCAweDg1LCAweGE2LCAweDQ4LCAweGI0LCAweDE3LCAweGZkLAogICAgMHhhOCwgMHgwOCwgMHgxMSwgMHgwZSwgMHhmYywgMHhmYiwgMHhhNCwgMHg1ZCwKICAgIDB4NjUsIDB4YzQsIDB4YTMsIDB4MjYsIDB4NzcsIDB4ZGEsIDB4M2EsIDB4NDgsCl07CgpleHBvcnQgY29uc3QgUCA9IHUyNTYuZnJvbUJ5dGVzTEUoUF9CWVRFUyk7CmV4cG9ydCBjb25zdCBHWCA9IHUyNTYuZnJvbUJ5dGVzTEUoR1hfQllURVMpOwpleHBvcnQgY29uc3QgR1kgPSB1MjU2LmZyb21CeXRlc0xFKEdZX0JZVEVTKTsKCi8vIFJlcHJlc2VudGluZyBhIHBvaW50ICh4LCB5KSBvbiBzZWNwMjU2azEKZXhwb3J0IGNsYXNzIEVDUG9pbnQgewogICAgeDogdTI1NjsKICAgIHk6IHUyNTY7CgogICAgY29uc3RydWN0b3IoeDogdTI1NiwgeTogdTI1NikgewogICAgICAgIHRoaXMueCA9IHg7CiAgICAgICAgdGhpcy55ID0geTsKICAgIH0KCiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAvLyBQb2ludCBEb3VibGluZzogMlAgPSBQICsgUAogICAgLy8gKGZvciB5XjIgPSB4XjMgKyA3IHdpdGggYT0wKQogICAgLy8gzrsgPSAoMyp4XjIpIC8gKDIqeSkgbW9kIFAKICAgIC8vIHgzID0gzrteMiAtIDJ4IG1vZCBQCiAgICAvLyB5MyA9IM67Kih4IC0geDMpIC0geSBtb2QgUAogICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgc3RhdGljIGRvdWJsZShwOiBFQ1BvaW50KTogRUNQb2ludCB7CiAgICAgICAgLy8gSWYgeT0wLCByZXR1cm4gaW5maW5pdHkKICAgICAgICBpZiAocC55ID09IHUyNTYuWmVybykgewogICAgICAgICAgICByZXR1cm4gbmV3IEVDUG9pbnQodTI1Ni5aZXJvLCB1MjU2Llplcm8pOyAvLyAiUG9pbnQgYXQgaW5maW5pdHkiIGNvbnZlbnRpb24KICAgICAgICB9CgogICAgICAgIGNvbnN0IHR3byA9IHUyNTYuZnJvbVU2NCgyKTsKICAgICAgICBjb25zdCB0aHJlZSA9IHUyNTYuZnJvbVU2NCgzKTsKCiAgICAgICAgLy8gbnVtZXJhdG9yID0gMyp4XjIgbW9kIFAKICAgICAgICBjb25zdCB4U3F1YXJlZCA9IFNhZmVNYXRoLnBvdyhwLngsIHR3byk7CiAgICAgICAgY29uc3QgbnVtZXJhdG9yID0gU2FmZU1hdGgubW9kKFNhZmVNYXRoLm11bCh0aHJlZSwgeFNxdWFyZWQpLCBQKTsKCiAgICAgICAgLy8gZGVub21pbmF0b3IgPSAoMip5KV4tMSBtb2QgUAogICAgICAgIGNvbnN0IHR3b1kgPSBTYWZlTWF0aC5tdWwodHdvLCBwLnkpOwogICAgICAgIGNvbnN0IGRlbm9taW5hdG9ySW52ID0gU2FmZU1hdGgubW9kSW52ZXJzZSh0d29ZLCBQKTsKCiAgICAgICAgLy8gzrsgPSBudW1lcmF0b3IgKiBkZW5vbWluYXRvcl4tMSBtb2QgUAogICAgICAgIGNvbnN0IGxhbWJkYSA9IFNhZmVNYXRoLm1vZChTYWZlTWF0aC5tdWwobnVtZXJhdG9yLCBkZW5vbWluYXRvckludiksIFApOwoKICAgICAgICAvLyB4ciA9IM67XjIgLSAyeCBtb2QgUAogICAgICAgIGNvbnN0IGxhbWJkYVNxdWFyZWQgPSBTYWZlTWF0aC5wb3cobGFtYmRhLCB0d28pOwogICAgICAgIGNvbnN0IHR3b1ggPSBTYWZlTWF0aC5tdWwodHdvLCBwLngpOwogICAgICAgIGNvbnN0IHhyID0gU2FmZU1hdGgubW9kKFNhZmVNYXRoLnN1YihsYW1iZGFTcXVhcmVkLCB0d29YKSwgUCk7CgogICAgICAgIC8vIHlyID0gzrsqKHggLSB4cikgLSB5IG1vZCBQCiAgICAgICAgY29uc3QgeE1pbnVzWHIgPSBTYWZlTWF0aC5zdWIocC54LCB4cik7CiAgICAgICAgY29uc3QgbGFtYmRhVGltZXNYRGlmZiA9IFNhZmVNYXRoLm11bChsYW1iZGEsIHhNaW51c1hyKTsKICAgICAgICBjb25zdCB5ciA9IFNhZmVNYXRoLm1vZChTYWZlTWF0aC5zdWIobGFtYmRhVGltZXNYRGlmZiwgcC55KSwgUCk7CgogICAgICAgIHJldHVybiBuZXcgRUNQb2ludCh4ciwgeXIpOwogICAgfQoKICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgIC8vIFBvaW50IEFkZGl0aW9uOiBSID0gUCArIFEKICAgIC8vIM67ID0gKHkyIC0geTEpIC8gKHgyIC0geDEpIG1vZCBQCiAgICAvLyB4MyA9IM67XjIgLSB4MSAtIHgyIG1vZCBQCiAgICAvLyB5MyA9IM67Kih4MSAtIHgzKSAtIHkxIG1vZCBQCiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICBzdGF0aWMgYWRkKHA6IEVDUG9pbnQsIHE6IEVDUG9pbnQpOiBFQ1BvaW50IHsKICAgICAgICAvLyAxKSBDaGVjayBmb3IgaW5maW5pdHkgY2FzZXMKICAgICAgICBjb25zdCBpc1BJbmZpbml0eSA9IHAueC5pc1plcm8oKSAmJiBwLnkuaXNaZXJvKCk7CiAgICAgICAgY29uc3QgaXNRSW5maW5pdHkgPSBxLnguaXNaZXJvKCkgJiYgcS55LmlzWmVybygpOwoKICAgICAgICBpZiAoaXNQSW5maW5pdHkpIHJldHVybiBxOyAvLyDiiJ4gKyBRID0gUQogICAgICAgIGlmIChpc1FJbmZpbml0eSkgcmV0dXJuIHA7IC8vIFAgKyDiiJ4gPSBQCgogICAgICAgIC8vIDIpIENoZWNrIGlmIFAgPT0gUSA9PiBkb3VibGluZwogICAgICAgIGlmIChwLnggPT0gcS54ICYmIHAueSA9PSBxLnkpIHsKICAgICAgICAgICAgcmV0dXJuIEVDUG9pbnQuZG91YmxlKHApOwogICAgICAgIH0KCiAgICAgICAgLy8gMykgQ2hlY2sgaWYgUCA9PSAtUSA9PiByZXR1cm4gaW5maW5pdHkKICAgICAgICAvLyAoeDEgPT0geDIsIGJ1dCB5MSAhPSB5MiA9PiBQICsgUSA9IOKInikKICAgICAgICBpZiAocC54ID09IHEueCAmJiBwLnkgIT0gcS55KSB7CiAgICAgICAgICAgIHJldHVybiBuZXcgRUNQb2ludCh1MjU2Llplcm8sIHUyNTYuWmVybyk7CiAgICAgICAgfQoKICAgICAgICBjb25zdCBudW1lcmF0b3IgPSBTYWZlTWF0aC5zdWIocS55LCBwLnkpOwogICAgICAgIGNvbnN0IGRlbm9taW5hdG9yID0gU2FmZU1hdGguc3ViKHEueCwgcC54KTsKICAgICAgICBjb25zdCBkZW5vbWluYXRvckludiA9IFNhZmVNYXRoLm1vZEludmVyc2UoZGVub21pbmF0b3IsIFApOwogICAgICAgIGNvbnN0IGxhbWJkYSA9IFNhZmVNYXRoLm1vZChTYWZlTWF0aC5tdWwobnVtZXJhdG9yLCBkZW5vbWluYXRvckludiksIFApOwoKICAgICAgICAvLyB4MyA9IM67XjIgLSAoeDEgKyB4MikgbW9kIFAKICAgICAgICBjb25zdCBsYW1iZGFTcSA9IFNhZmVNYXRoLnBvdyhsYW1iZGEsIHUyNTYuZnJvbVU2NCgyKSk7CiAgICAgICAgbGV0IHhyID0gU2FmZU1hdGguc3ViKGxhbWJkYVNxLCBTYWZlTWF0aC5hZGQocC54LCBxLngpKTsKICAgICAgICB4ciA9IFNhZmVNYXRoLm1vZCh4ciwgUCk7CgogICAgICAgIC8vIHkzID0gzrsqKHgxIC0geDMpIC0geTEgbW9kIFAKICAgICAgICBjb25zdCB4RGlmZiA9IFNhZmVNYXRoLnN1YihwLngsIHhyKTsKICAgICAgICBsZXQgeXIgPSBTYWZlTWF0aC5tdWwobGFtYmRhLCB4RGlmZik7CiAgICAgICAgeXIgPSBTYWZlTWF0aC5zdWIoeXIsIHAueSk7CiAgICAgICAgeXIgPSBTYWZlTWF0aC5tb2QoeXIsIFApOwoKICAgICAgICByZXR1cm4gbmV3IEVDUG9pbnQoeHIsIHlyKTsKICAgIH0KCiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAvLyBTY2FsYXIgTXVsdGlwbGljYXRpb246IGsqUAogICAgLy8gRG91YmxlLWFuZC1hZGQgYXBwcm9hY2gKICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgIHN0YXRpYyBzY2FsYXJNdWx0aXBseShwOiBFQ1BvaW50LCBrOiB1MjU2KTogRUNQb2ludCB7CiAgICAgICAgbGV0IHJlc3VsdCA9IG5ldyBFQ1BvaW50KHUyNTYuWmVybywgdTI1Ni5aZXJvKTsgLy8g4oieCiAgICAgICAgbGV0IGFkZGVuZCA9IHA7CiAgICAgICAgY29uc3QgdHdvID0gdTI1Ni5mcm9tVTY0KDIpOwoKICAgICAgICAvLyBXaGlsZSBrICE9IDAKICAgICAgICB3aGlsZSAoIWsuaXNaZXJvKCkpIHsKICAgICAgICAgICAgLy8gSWYgayBpcyBvZGQgPT4gYWRkCiAgICAgICAgICAgIGlmICghU2FmZU1hdGguaXNFdmVuKGspKSB7CiAgICAgICAgICAgICAgICByZXN1bHQgPSBFQ1BvaW50LmFkZChyZXN1bHQsIGFkZGVuZCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8gRG91YmxlIHRoZSBwb2ludAogICAgICAgICAgICBhZGRlbmQgPSBFQ1BvaW50LmRvdWJsZShhZGRlbmQpOwogICAgICAgICAgICAvLyAiRGl2aWRlIiBrIGJ5IDIgPT4gc2hpZnQgcmlnaHQgYnkgMQogICAgICAgICAgICBrID0gU2FmZU1hdGguZGl2KGssIHR3byk7CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9Cn0K",
  "node_modules/@btc-vision/btc-runtime/runtime/shared-libraries/OP20Utils.ts": "aW1wb3J0IHsgdTI1NiB9IGZyb20gJ0BidGMtdmlzaW9uL2FzLWJpZ251bS9hc3NlbWJseSc7CmltcG9ydCB7IEJ5dGVzV3JpdGVyIH0gZnJvbSAnLi4vYnVmZmVyL0J5dGVzV3JpdGVyJzsKaW1wb3J0IHsgQmxvY2tjaGFpbiB9IGZyb20gJy4uL2Vudic7CmltcG9ydCB7IGVuY29kZVNlbGVjdG9yLCBTZWxlY3RvciB9IGZyb20gJy4uL21hdGgvYWJpJzsKaW1wb3J0IHsgQWRkcmVzcyB9IGZyb20gJy4uL3R5cGVzL0FkZHJlc3MnOwppbXBvcnQgeyBBRERSRVNTX0JZVEVfTEVOR1RILCBTRUxFQ1RPUl9CWVRFX0xFTkdUSCB9IGZyb20gJy4uL3V0aWxzJzsKCmV4cG9ydCBjbGFzcyBPUDIwVXRpbHMgewogICAgcHVibGljIHN0YXRpYyBnZXQgQkFMQU5DRV9PRl9TRUxFQ1RPUigpOiBTZWxlY3RvciB7CiAgICAgICAgcmV0dXJuIGVuY29kZVNlbGVjdG9yKCdiYWxhbmNlT2YoYWRkcmVzcyknKTsKICAgIH0KCiAgICBwdWJsaWMgc3RhdGljIGJhbGFuY2VPZih0b2tlbjogQWRkcmVzcywgb3duZXI6IEFkZHJlc3MpOiB1MjU2IHsKICAgICAgICBjb25zdCBjYWxsZGF0YTogQnl0ZXNXcml0ZXIgPSBuZXcgQnl0ZXNXcml0ZXIoU0VMRUNUT1JfQllURV9MRU5HVEggKyBBRERSRVNTX0JZVEVfTEVOR1RIKTsKICAgICAgICBjYWxsZGF0YS53cml0ZVNlbGVjdG9yKE9QMjBVdGlscy5CQUxBTkNFX09GX1NFTEVDVE9SKTsKICAgICAgICBjYWxsZGF0YS53cml0ZUFkZHJlc3Mob3duZXIpOwoKICAgICAgICBjb25zdCByZXNwb25zZSA9IEJsb2NrY2hhaW4uY2FsbCh0b2tlbiwgY2FsbGRhdGEpOwoKICAgICAgICByZXR1cm4gcmVzcG9uc2UucmVhZFUyNTYoKTsKICAgIH0KfQo=",
  "node_modules/@btc-vision/btc-runtime/runtime/shared-libraries/TransferHelper.ts": "aW1wb3J0IHsgdTI1NiB9IGZyb20gJ0BidGMtdmlzaW9uL2FzLWJpZ251bS9hc3NlbWJseSc7CmltcG9ydCB7IEJ5dGVzV3JpdGVyIH0gZnJvbSAnLi4vYnVmZmVyL0J5dGVzV3JpdGVyJzsKaW1wb3J0IHsgQmxvY2tjaGFpbiB9IGZyb20gJy4uL2Vudic7CmltcG9ydCB7IGVuY29kZVNlbGVjdG9yLCBTZWxlY3RvciB9IGZyb20gJy4uL21hdGgvYWJpJzsKaW1wb3J0IHsgQWRkcmVzcyB9IGZyb20gJy4uL3R5cGVzL0FkZHJlc3MnOwppbXBvcnQgeyBSZXZlcnQgfSBmcm9tICcuLi90eXBlcy9SZXZlcnQnOwppbXBvcnQgeyBBRERSRVNTX0JZVEVfTEVOR1RILCBTRUxFQ1RPUl9CWVRFX0xFTkdUSCwgVTI1Nl9CWVRFX0xFTkdUSCB9IGZyb20gJy4uL3V0aWxzJzsKCmV4cG9ydCBjb25zdCBUcmFuc2ZlclN0ciA9ICd0cmFuc2ZlcihhZGRyZXNzLHVpbnQyNTYpJzsKZXhwb3J0IGNvbnN0IEFwcHJvdmVTdHIgPSAnYXBwcm92ZShhZGRyZXNzLHVpbnQyNTYpJzsKZXhwb3J0IGNvbnN0IFRyYW5zZmVyRnJvbVN0ciA9ICd0cmFuc2ZlckZyb20oYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYpJzsKCmV4cG9ydCBjbGFzcyBUcmFuc2ZlckhlbHBlciB7CiAgICBwdWJsaWMgc3RhdGljIGdldCBBUFBST1ZFX1NFTEVDVE9SKCk6IFNlbGVjdG9yIHsKICAgICAgICByZXR1cm4gZW5jb2RlU2VsZWN0b3IoQXBwcm92ZVN0cik7CiAgICB9CgogICAgcHVibGljIHN0YXRpYyBnZXQgVFJBTlNGRVJfU0VMRUNUT1IoKTogU2VsZWN0b3IgewogICAgICAgIHJldHVybiBlbmNvZGVTZWxlY3RvcihUcmFuc2ZlclN0cik7CiAgICB9CgogICAgcHVibGljIHN0YXRpYyBnZXQgVFJBTlNGRVJfRlJPTV9TRUxFQ1RPUigpOiBTZWxlY3RvciB7CiAgICAgICAgcmV0dXJuIGVuY29kZVNlbGVjdG9yKFRyYW5zZmVyRnJvbVN0cik7CiAgICB9CgogICAgcHVibGljIHN0YXRpYyBzYWZlQXBwcm92ZSh0b2tlbjogQWRkcmVzcywgc3BlbmRlcjogQWRkcmVzcywgYW1vdW50OiB1MjU2KTogdm9pZCB7CiAgICAgICAgY29uc3QgY2FsbGRhdGEgPSBuZXcgQnl0ZXNXcml0ZXIoCiAgICAgICAgICAgIFNFTEVDVE9SX0JZVEVfTEVOR1RIICsgQUREUkVTU19CWVRFX0xFTkdUSCArIFUyNTZfQllURV9MRU5HVEgsCiAgICAgICAgKTsKICAgICAgICBjYWxsZGF0YS53cml0ZVNlbGVjdG9yKHRoaXMuQVBQUk9WRV9TRUxFQ1RPUik7CiAgICAgICAgY2FsbGRhdGEud3JpdGVBZGRyZXNzKHNwZW5kZXIpOwogICAgICAgIGNhbGxkYXRhLndyaXRlVTI1NihhbW91bnQpOwoKICAgICAgICBjb25zdCByZXNwb25zZSA9IEJsb2NrY2hhaW4uY2FsbCh0b2tlbiwgY2FsbGRhdGEpOwogICAgICAgIGNvbnN0IGlzT2sgPSByZXNwb25zZS5yZWFkQm9vbGVhbigpOwoKICAgICAgICBpZiAoIWlzT2spIHsKICAgICAgICAgICAgdGhyb3cgbmV3IFJldmVydChgVHJhbnNmZXJIZWxwZXI6IEFQUFJPVkVfRkFJTEVEYCk7CiAgICAgICAgfQogICAgfQoKICAgIHB1YmxpYyBzdGF0aWMgc2FmZVRyYW5zZmVyKHRva2VuOiBBZGRyZXNzLCB0bzogQWRkcmVzcywgYW1vdW50OiB1MjU2KTogdm9pZCB7CiAgICAgICAgY29uc3QgY2FsbGRhdGEgPSBuZXcgQnl0ZXNXcml0ZXIoCiAgICAgICAgICAgIFNFTEVDVE9SX0JZVEVfTEVOR1RIICsgQUREUkVTU19CWVRFX0xFTkdUSCArIFUyNTZfQllURV9MRU5HVEgsCiAgICAgICAgKTsKICAgICAgICBjYWxsZGF0YS53cml0ZVNlbGVjdG9yKHRoaXMuVFJBTlNGRVJfU0VMRUNUT1IpOwogICAgICAgIGNhbGxkYXRhLndyaXRlQWRkcmVzcyh0byk7CiAgICAgICAgY2FsbGRhdGEud3JpdGVVMjU2KGFtb3VudCk7CgogICAgICAgIGNvbnN0IHJlc3BvbnNlID0gQmxvY2tjaGFpbi5jYWxsKHRva2VuLCBjYWxsZGF0YSk7CiAgICAgICAgY29uc3QgaXNPayA9IHJlc3BvbnNlLnJlYWRCb29sZWFuKCk7CgogICAgICAgIGlmICghaXNPaykgewogICAgICAgICAgICB0aHJvdyBuZXcgUmV2ZXJ0KGBUcmFuc2ZlckhlbHBlcjogVFJBTlNGRVJfRkFJTEVEYCk7CiAgICAgICAgfQogICAgfQoKICAgIHB1YmxpYyBzdGF0aWMgc2FmZVRyYW5zZmVyRnJvbSh0b2tlbjogQWRkcmVzcywgZnJvbTogQWRkcmVzcywgdG86IEFkZHJlc3MsIGFtb3VudDogdTI1Nik6IHZvaWQgewogICAgICAgIGNvbnN0IGNhbGxkYXRhID0gbmV3IEJ5dGVzV3JpdGVyKAogICAgICAgICAgICBTRUxFQ1RPUl9CWVRFX0xFTkdUSCArIEFERFJFU1NfQllURV9MRU5HVEggKiAyICsgVTI1Nl9CWVRFX0xFTkdUSCwKICAgICAgICApOwogICAgICAgIGNhbGxkYXRhLndyaXRlU2VsZWN0b3IodGhpcy5UUkFOU0ZFUl9GUk9NX1NFTEVDVE9SKTsKICAgICAgICBjYWxsZGF0YS53cml0ZUFkZHJlc3MoZnJvbSk7CiAgICAgICAgY2FsbGRhdGEud3JpdGVBZGRyZXNzKHRvKTsKICAgICAgICBjYWxsZGF0YS53cml0ZVUyNTYoYW1vdW50KTsKCiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBCbG9ja2NoYWluLmNhbGwodG9rZW4sIGNhbGxkYXRhKTsKICAgICAgICBjb25zdCBpc09rID0gcmVzcG9uc2UucmVhZEJvb2xlYW4oKTsKCiAgICAgICAgaWYgKCFpc09rKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBSZXZlcnQoYFRyYW5zZmVySGVscGVyOiBUUkFOU0ZFUl9GUk9NX0ZBSUxFRGApOwogICAgICAgIH0KICAgIH0KfQo=",
  "node_modules/@btc-vision/btc-runtime/runtime/storage/arrays/StoredAddressArray.ts": "",
  "node_modules/@btc-vision/btc-runtime/runtime/storage/arrays/StoredBooleanArray.ts": "",
  "node_modules/@btc-vision/btc-runtime/runtime/storage/arrays/StoredPackedArray.ts": "",
  "node_modules/@btc-vision/btc-runtime/runtime/storage/arrays/StoredU128Array.ts": "aW1wb3J0IHsgU3RvcmVkUGFja2VkQXJyYXkgfSBmcm9tICcuL1N0b3JlZFBhY2tlZEFycmF5JzsKaW1wb3J0IHsgdTEyOCB9IGZyb20gJ0BidGMtdmlzaW9uL2FzLWJpZ251bS9hc3NlbWJseSc7CmltcG9ydCB7IGJpZ0VuZGlhbkFkZCB9IGZyb20gJy4uLy4uL21hdGgvYnl0ZXMnOwoKLyoqCiAqIFN0b3JlZFUxMjhBcnJheQogKiAgLSAyIGl0ZW1zIG9mIHR5cGUgYHUxMjhgIGZpdCBpbiBvbmUgMzItYnl0ZSBzbG90LgogKiAgICAoRWFjaCB1MTI4IGlzIDE2IGJ5dGVzLikKICovCkBmaW5hbApleHBvcnQgY2xhc3MgU3RvcmVkVTEyOEFycmF5IGV4dGVuZHMgU3RvcmVkUGFja2VkQXJyYXk8dTEyOD4gewogICAgcHVibGljIGNvbnN0cnVjdG9yKHBvaW50ZXI6IHUxNiwgc3ViUG9pbnRlcjogVWludDhBcnJheSkgewogICAgICAgIHN1cGVyKHBvaW50ZXIsIHN1YlBvaW50ZXIsIHUxMjguWmVybyk7CiAgICB9CgogICAgcHJvdGVjdGVkIGdldFNsb3RDYXBhY2l0eSgpOiB1NjQgewogICAgICAgIHJldHVybiAyOyAvLyAyIHggdTEyOCA9PiAzMiBieXRlcwogICAgfQoKICAgIHByb3RlY3RlZCB6ZXJvVmFsdWUoKTogdTEyOCB7CiAgICAgICAgcmV0dXJuIHUxMjguWmVybzsgIC8vIGZyb20gdGhlIGFzLWJpZ251bSBsaWJyYXJ5CiAgICB9CgogICAgcHJvdGVjdGVkIGVxKGE6IHUxMjgsIGI6IHUxMjgpOiBib29sIHsKICAgICAgICByZXR1cm4gYSA9PSBiOwogICAgfQoKICAgIHByb3RlY3RlZCBwYWNrU2xvdCh2YWx1ZXM6IHUxMjhbXSk6IFVpbnQ4QXJyYXkgewogICAgICAgIGNvbnN0IG91dCA9IG5ldyBVaW50OEFycmF5KDMyKTsKICAgICAgICBjb25zdCBmaXJzdEJ5dGVzID0gdmFsdWVzWzBdLnRvQnl0ZXModHJ1ZSk7CiAgICAgICAgY29uc3Qgc2Vjb25kQnl0ZXMgPSB2YWx1ZXNbMV0udG9CeXRlcyh0cnVlKTsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyBpKyspIHsKICAgICAgICAgICAgb3V0W2ldID0gZmlyc3RCeXRlc1tpXTsKICAgICAgICB9CgogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7IGkrKykgewogICAgICAgICAgICBvdXRbMTYgKyBpXSA9IHNlY29uZEJ5dGVzW2ldOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIG91dDsKICAgIH0KCiAgICBwcm90ZWN0ZWQgdW5wYWNrU2xvdChzbG90RGF0YTogVWludDhBcnJheSk6IHUxMjhbXSB7CiAgICAgICAgLy8gc2xvdERhdGEubGVuZ3RoID09IDMyCiAgICAgICAgY29uc3QgZmlyc3QgPSBuZXcgVWludDhBcnJheSgxNik7CiAgICAgICAgY29uc3Qgc2Vjb25kID0gbmV3IFVpbnQ4QXJyYXkoMTYpOwogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7IGkrKykgewogICAgICAgICAgICBmaXJzdFtpXSA9IHNsb3REYXRhW2ldOwogICAgICAgIH0KCiAgICAgICAgZm9yIChsZXQgaSA9IDE2OyBpIDwgMzI7IGkrKykgewogICAgICAgICAgICBzZWNvbmRbaSAtIDE2XSA9IHNsb3REYXRhW2ldOwogICAgICAgIH0KCiAgICAgICAgY29uc3QgdmFsMCA9IHUxMjguZnJvbVVpbnQ4QXJyYXlCRShmaXJzdCk7CiAgICAgICAgY29uc3QgdmFsMSA9IHUxMjguZnJvbVVpbnQ4QXJyYXlCRShzZWNvbmQpOwoKICAgICAgICByZXR1cm4gW3ZhbDAsIHZhbDFdOwogICAgfQoKICAgIHByb3RlY3RlZCBjYWxjdWxhdGVTdG9yYWdlUG9pbnRlcihzbG90SW5kZXg6IHU2NCk6IFVpbnQ4QXJyYXkgewogICAgICAgIHJldHVybiBiaWdFbmRpYW5BZGQodGhpcy5iYXNlUG9pbnRlciwgc2xvdEluZGV4KTsKICAgIH0KfQ==",
  "node_modules/@btc-vision/btc-runtime/runtime/storage/arrays/StoredU16Array.ts": "aW1wb3J0IHsgU3RvcmVkUGFja2VkQXJyYXkgfSBmcm9tICcuL1N0b3JlZFBhY2tlZEFycmF5JzsKaW1wb3J0IHsgYmlnRW5kaWFuQWRkIH0gZnJvbSAnLi4vLi4vbWF0aC9ieXRlcyc7CgovKioKICogRWFjaCAzMi1ieXRlIHNsb3QgY2FuIHN0b3JlIDE2IHUxNiB2YWx1ZXMgKDIgYnl0ZXMgZWFjaCkuCiAqLwpAZmluYWwKZXhwb3J0IGNsYXNzIFN0b3JlZFUxNkFycmF5IGV4dGVuZHMgU3RvcmVkUGFja2VkQXJyYXk8dTE2PiB7CiAgICBwdWJsaWMgY29uc3RydWN0b3IocG9pbnRlcjogdTE2LCBzdWJQb2ludGVyOiBVaW50OEFycmF5KSB7CiAgICAgICAgc3VwZXIocG9pbnRlciwgc3ViUG9pbnRlciwgMCk7CiAgICB9CgogICAgcHJvdGVjdGVkIGdldFNsb3RDYXBhY2l0eSgpOiB1NjQgewogICAgICAgIHJldHVybiAxNjsgLy8gMTYgeCB1MTYgPSAzMiBieXRlcwogICAgfQoKICAgIHByb3RlY3RlZCB6ZXJvVmFsdWUoKTogdTE2IHsKICAgICAgICByZXR1cm4gMDsKICAgIH0KCiAgICBwcm90ZWN0ZWQgZXEoYTogdTE2LCBiOiB1MTYpOiBib29sIHsKICAgICAgICByZXR1cm4gYSA9PSBiOwogICAgfQoKICAgIC8qKgogICAgICogUGFjayBhbiBhcnJheSBvZiAxNiB1MTZzIGludG8gYSAzMi1ieXRlIGJ1ZmZlci4KICAgICAqLwogICAgcHJvdGVjdGVkIHBhY2tTbG90KHZhbHVlczogdTE2W10pOiBVaW50OEFycmF5IHsKICAgICAgICBjb25zdCBvdXQgPSBuZXcgVWludDhBcnJheSgzMik7CiAgICAgICAgbGV0IG9mZnNldCA9IDA7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgaSsrKSB7CiAgICAgICAgICAgIGNvbnN0IHYgPSB2YWx1ZXNbaV07CiAgICAgICAgICAgIG91dFtvZmZzZXRdID0gPHU4PigodiA+PiA4KSAmIDB4ZmYpOyAgIC8vIGhpZ2ggYnl0ZQogICAgICAgICAgICBvdXRbb2Zmc2V0ICsgMV0gPSA8dTg+KHYgJiAweGZmKTsgICAgICAgICAvLyBsb3cgYnl0ZQogICAgICAgICAgICBvZmZzZXQgKz0gMjsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG91dDsKICAgIH0KCiAgICAvKioKICAgICAqIFVucGFjayBhIDMyLWJ5dGUgYnVmZmVyIGludG8gYW4gYXJyYXkgb2YgMTYgdTE2LgogICAgICovCiAgICBwcm90ZWN0ZWQgdW5wYWNrU2xvdChzbG90RGF0YTogVWludDhBcnJheSk6IHUxNltdIHsKICAgICAgICBjb25zdCBvdXQgPSBuZXcgQXJyYXk8dTE2PigxNik7CiAgICAgICAgbGV0IG9mZnNldCA9IDA7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgaSsrKSB7CiAgICAgICAgICAgIGNvbnN0IGhpID0gc2xvdERhdGFbb2Zmc2V0XTsKICAgICAgICAgICAgY29uc3QgbG8gPSBzbG90RGF0YVtvZmZzZXQgKyAxXTsKICAgICAgICAgICAgb3V0W2ldID0gKChoaSA8PCA4KSB8IGxvKSBhcyB1MTY7CiAgICAgICAgICAgIG9mZnNldCArPSAyOwogICAgICAgIH0KICAgICAgICByZXR1cm4gb3V0OwogICAgfQoKICAgIHByb3RlY3RlZCBjYWxjdWxhdGVTdG9yYWdlUG9pbnRlcihzbG90SW5kZXg6IHU2NCk6IFVpbnQ4QXJyYXkgewogICAgICAgIHJldHVybiBiaWdFbmRpYW5BZGQodGhpcy5iYXNlUG9pbnRlciwgc2xvdEluZGV4KTsKICAgIH0KfQo=",
  "node_modules/@btc-vision/btc-runtime/runtime/storage/arrays/StoredU256Array.ts": "aW1wb3J0IHsgU3RvcmVkUGFja2VkQXJyYXkgfSBmcm9tICcuL1N0b3JlZFBhY2tlZEFycmF5JzsKaW1wb3J0IHsgdTI1NiB9IGZyb20gJ0BidGMtdmlzaW9uL2FzLWJpZ251bS9hc3NlbWJseSc7CmltcG9ydCB7IGJpZ0VuZGlhbkFkZCB9IGZyb20gJy4uLy4uL21hdGgvYnl0ZXMnOwoKLyoqCiAqIFN0b3JlZFUyNTZBcnJheQogKiAgLSAxIGl0ZW0gb2YgdHlwZSBgdTI1NmAgZml0cyBpbiBvbmUgMzItYnl0ZSBzbG90LgogKi8KQGZpbmFsCmV4cG9ydCBjbGFzcyBTdG9yZWRVMjU2QXJyYXkgZXh0ZW5kcyBTdG9yZWRQYWNrZWRBcnJheTx1MjU2PiB7CiAgICBwdWJsaWMgY29uc3RydWN0b3IocG9pbnRlcjogdTE2LCBzdWJQb2ludGVyOiBVaW50OEFycmF5KSB7CiAgICAgICAgc3VwZXIocG9pbnRlciwgc3ViUG9pbnRlciwgdTI1Ni5aZXJvKTsKICAgIH0KCiAgICBwcm90ZWN0ZWQgZ2V0U2xvdENhcGFjaXR5KCk6IHU2NCB7CiAgICAgICAgcmV0dXJuIDE7IC8vIDEgeCB1MjU2ID0+IDMyIGJ5dGVzCiAgICB9CgogICAgcHJvdGVjdGVkIHplcm9WYWx1ZSgpOiB1MjU2IHsKICAgICAgICByZXR1cm4gdTI1Ni5aZXJvOwogICAgfQoKICAgIHByb3RlY3RlZCBlcShhOiB1MjU2LCBiOiB1MjU2KTogYm9vbCB7CiAgICAgICAgcmV0dXJuIGEgPT0gYjsKICAgIH0KCiAgICBwcm90ZWN0ZWQgcGFja1Nsb3QodmFsdWVzOiB1MjU2W10pOiBVaW50OEFycmF5IHsKICAgICAgICByZXR1cm4gdmFsdWVzWzBdLnRvVWludDhBcnJheSh0cnVlKTsKICAgIH0KCiAgICBwcm90ZWN0ZWQgdW5wYWNrU2xvdChzbG90RGF0YTogVWludDhBcnJheSk6IHUyNTZbXSB7CiAgICAgICAgY29uc3QgdmFsID0gdTI1Ni5mcm9tQnl0ZXMoc2xvdERhdGEsIHRydWUpOwogICAgICAgIHJldHVybiBbdmFsXTsKICAgIH0KCiAgICBwcm90ZWN0ZWQgY2FsY3VsYXRlU3RvcmFnZVBvaW50ZXIoc2xvdEluZGV4OiB1NjQpOiBVaW50OEFycmF5IHsKICAgICAgICByZXR1cm4gYmlnRW5kaWFuQWRkKHRoaXMuYmFzZVBvaW50ZXIsIHNsb3RJbmRleCk7CiAgICB9Cn0=",
  "node_modules/@btc-vision/btc-runtime/runtime/storage/arrays/StoredU32Array.ts": "aW1wb3J0IHsgU3RvcmVkUGFja2VkQXJyYXkgfSBmcm9tICcuL1N0b3JlZFBhY2tlZEFycmF5JzsKaW1wb3J0IHsgYmlnRW5kaWFuQWRkIH0gZnJvbSAnLi4vLi4vbWF0aC9ieXRlcyc7CgovKioKICogU3RvcmVkVTMyQXJyYXkKICogIC0gOCBpdGVtcyBvZiB0eXBlIGB1MzJgIGZpdCBpbiBvbmUgMzItYnl0ZSBzbG90LgogKi8KQGZpbmFsCmV4cG9ydCBjbGFzcyBTdG9yZWRVMzJBcnJheSBleHRlbmRzIFN0b3JlZFBhY2tlZEFycmF5PHUzMj4gewogICAgcHVibGljIGNvbnN0cnVjdG9yKHBvaW50ZXI6IHUxNiwgc3ViUG9pbnRlcjogVWludDhBcnJheSkgewogICAgICAgIHN1cGVyKHBvaW50ZXIsIHN1YlBvaW50ZXIsIDApOwogICAgfQoKICAgIHByb3RlY3RlZCBnZXRTbG90Q2FwYWNpdHkoKTogdTY0IHsKICAgICAgICByZXR1cm4gODsgLy8gOCB4IHUzMiA9PiAzMiBieXRlcwogICAgfQoKICAgIHByb3RlY3RlZCB6ZXJvVmFsdWUoKTogdTMyIHsKICAgICAgICByZXR1cm4gMDsKICAgIH0KCiAgICBwcm90ZWN0ZWQgZXEoYTogdTMyLCBiOiB1MzIpOiBib29sIHsKICAgICAgICByZXR1cm4gYSA9PSBiOwogICAgfQoKICAgIHByb3RlY3RlZCBwYWNrU2xvdCh2YWx1ZXM6IHUzMltdKTogVWludDhBcnJheSB7CiAgICAgICAgY29uc3Qgb3V0ID0gbmV3IFVpbnQ4QXJyYXkoMzIpOwogICAgICAgIGxldCBvZmZzZXQgPSAwOwogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgODsgaSsrKSB7CiAgICAgICAgICAgIGNvbnN0IHYgPSB2YWx1ZXNbaV07CiAgICAgICAgICAgIG91dFtvZmZzZXRdID0gPHU4PigodiA+PiAyNCkgJiAweGZmKTsKICAgICAgICAgICAgb3V0W29mZnNldCArIDFdID0gPHU4PigodiA+PiAxNikgJiAweGZmKTsKICAgICAgICAgICAgb3V0W29mZnNldCArIDJdID0gPHU4PigodiA+PiA4KSAmIDB4ZmYpOwogICAgICAgICAgICBvdXRbb2Zmc2V0ICsgM10gPSA8dTg+KHYgJiAweGZmKTsKICAgICAgICAgICAgb2Zmc2V0ICs9IDQ7CiAgICAgICAgfQogICAgICAgIHJldHVybiBvdXQ7CiAgICB9CgogICAgcHJvdGVjdGVkIHVucGFja1Nsb3Qoc2xvdERhdGE6IFVpbnQ4QXJyYXkpOiB1MzJbXSB7CiAgICAgICAgY29uc3Qgb3V0ID0gbmV3IEFycmF5PHUzMj4oOCk7CiAgICAgICAgbGV0IG9mZnNldCA9IDA7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA4OyBpKyspIHsKICAgICAgICAgICAgY29uc3QgYjAgPSBzbG90RGF0YVtvZmZzZXRdOwogICAgICAgICAgICBjb25zdCBiMSA9IHNsb3REYXRhW29mZnNldCArIDFdOwogICAgICAgICAgICBjb25zdCBiMiA9IHNsb3REYXRhW29mZnNldCArIDJdOwogICAgICAgICAgICBjb25zdCBiMyA9IHNsb3REYXRhW29mZnNldCArIDNdOwogICAgICAgICAgICBvdXRbaV0gPSAoKDx1MzI+YjAgPDwgMjQpIHwgKDx1MzI+YjEgPDwgMTYpIHwgKDx1MzI+YjIgPDwgOCkgfCBiMykgYXMgdTMyOwogICAgICAgICAgICBvZmZzZXQgKz0gNDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG91dDsKICAgIH0KCiAgICBwcm90ZWN0ZWQgY2FsY3VsYXRlU3RvcmFnZVBvaW50ZXIoc2xvdEluZGV4OiB1NjQpOiBVaW50OEFycmF5IHsKICAgICAgICByZXR1cm4gYmlnRW5kaWFuQWRkKHRoaXMuYmFzZVBvaW50ZXIsIHNsb3RJbmRleCk7CiAgICB9Cn0K",
  "node_modules/@btc-vision/btc-runtime/runtime/storage/arrays/StoredU64Array.ts": "aW1wb3J0IHsgU3RvcmVkUGFja2VkQXJyYXkgfSBmcm9tICcuL1N0b3JlZFBhY2tlZEFycmF5JzsKaW1wb3J0IHsgYmlnRW5kaWFuQWRkIH0gZnJvbSAnLi4vLi4vbWF0aC9ieXRlcyc7CgovKioKICogU3RvcmVkVTY0QXJyYXkKICogIC0gNCBpdGVtcyBvZiB0eXBlIGB1NjRgIGZpdCBpbiBvbmUgMzItYnl0ZSBzbG90LgogKi8KQGZpbmFsCmV4cG9ydCBjbGFzcyBTdG9yZWRVNjRBcnJheSBleHRlbmRzIFN0b3JlZFBhY2tlZEFycmF5PHU2ND4gewogICAgcHVibGljIGNvbnN0cnVjdG9yKHBvaW50ZXI6IHUxNiwgc3ViUG9pbnRlcjogVWludDhBcnJheSkgewogICAgICAgIHN1cGVyKHBvaW50ZXIsIHN1YlBvaW50ZXIsIDApOwogICAgfQoKICAgIHByb3RlY3RlZCBnZXRTbG90Q2FwYWNpdHkoKTogdTY0IHsKICAgICAgICByZXR1cm4gNDsgLy8gNCB4IHU2NCA9PiAzMiBieXRlcwogICAgfQoKICAgIHByb3RlY3RlZCB6ZXJvVmFsdWUoKTogdTY0IHsKICAgICAgICByZXR1cm4gMDsKICAgIH0KCiAgICBwcm90ZWN0ZWQgZXEoYTogdTY0LCBiOiB1NjQpOiBib29sIHsKICAgICAgICByZXR1cm4gYSA9PSBiOwogICAgfQoKICAgIHByb3RlY3RlZCBwYWNrU2xvdCh2YWx1ZXM6IHU2NFtdKTogVWludDhBcnJheSB7CiAgICAgICAgY29uc3Qgb3V0ID0gbmV3IFVpbnQ4QXJyYXkoMzIpOwogICAgICAgIGxldCBvZmZzZXQgPSAwOwogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB7CiAgICAgICAgICAgIGNvbnN0IHYgPSB2YWx1ZXNbaV07CiAgICAgICAgICAgIG91dFtvZmZzZXRdID0gPHU4PigodiA+PiA1NikgJiAweGZmKTsKICAgICAgICAgICAgb3V0W29mZnNldCArIDFdID0gPHU4PigodiA+PiA0OCkgJiAweGZmKTsKICAgICAgICAgICAgb3V0W29mZnNldCArIDJdID0gPHU4PigodiA+PiA0MCkgJiAweGZmKTsKICAgICAgICAgICAgb3V0W29mZnNldCArIDNdID0gPHU4PigodiA+PiAzMikgJiAweGZmKTsKICAgICAgICAgICAgb3V0W29mZnNldCArIDRdID0gPHU4PigodiA+PiAyNCkgJiAweGZmKTsKICAgICAgICAgICAgb3V0W29mZnNldCArIDVdID0gPHU4PigodiA+PiAxNikgJiAweGZmKTsKICAgICAgICAgICAgb3V0W29mZnNldCArIDZdID0gPHU4PigodiA+PiA4KSAmIDB4ZmYpOwogICAgICAgICAgICBvdXRbb2Zmc2V0ICsgN10gPSA8dTg+KHYgJiAweGZmKTsKICAgICAgICAgICAgb2Zmc2V0ICs9IDg7CiAgICAgICAgfQogICAgICAgIHJldHVybiBvdXQ7CiAgICB9CgogICAgcHJvdGVjdGVkIHVucGFja1Nsb3Qoc2xvdERhdGE6IFVpbnQ4QXJyYXkpOiB1NjRbXSB7CiAgICAgICAgY29uc3Qgb3V0ID0gbmV3IEFycmF5PHU2ND4oNCk7CiAgICAgICAgbGV0IG9mZnNldCA9IDA7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHsKICAgICAgICAgICAgY29uc3QgYjAgPSA8dTY0PnNsb3REYXRhW29mZnNldF07CiAgICAgICAgICAgIGNvbnN0IGIxID0gPHU2ND5zbG90RGF0YVtvZmZzZXQgKyAxXTsKICAgICAgICAgICAgY29uc3QgYjIgPSA8dTY0PnNsb3REYXRhW29mZnNldCArIDJdOwogICAgICAgICAgICBjb25zdCBiMyA9IDx1NjQ+c2xvdERhdGFbb2Zmc2V0ICsgM107CiAgICAgICAgICAgIGNvbnN0IGI0ID0gPHU2ND5zbG90RGF0YVtvZmZzZXQgKyA0XTsKICAgICAgICAgICAgY29uc3QgYjUgPSA8dTY0PnNsb3REYXRhW29mZnNldCArIDVdOwogICAgICAgICAgICBjb25zdCBiNiA9IDx1NjQ+c2xvdERhdGFbb2Zmc2V0ICsgNl07CiAgICAgICAgICAgIGNvbnN0IGI3ID0gPHU2ND5zbG90RGF0YVtvZmZzZXQgKyA3XTsKICAgICAgICAgICAgb3V0W2ldID0gKGIwIDw8IDU2KSB8IChiMSA8PCA0OCkgfCAoYjIgPDwgNDApIHwgKGIzIDw8IDMyKSB8CiAgICAgICAgICAgICAgICAoYjQgPDwgMjQpIHwgKGI1IDw8IDE2KSB8IChiNiA8PCA4KSB8IGI3OwogICAgICAgICAgICBvZmZzZXQgKz0gODsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG91dDsKICAgIH0KCiAgICBwcm90ZWN0ZWQgY2FsY3VsYXRlU3RvcmFnZVBvaW50ZXIoc2xvdEluZGV4OiB1NjQpOiBVaW50OEFycmF5IHsKICAgICAgICByZXR1cm4gYmlnRW5kaWFuQWRkKHRoaXMuYmFzZVBvaW50ZXIsIHNsb3RJbmRleCk7CiAgICB9Cn0=",
  "node_modules/@btc-vision/btc-runtime/runtime/storage/arrays/StoredU8Array.ts": "aW1wb3J0IHsgU3RvcmVkUGFja2VkQXJyYXkgfSBmcm9tICcuL1N0b3JlZFBhY2tlZEFycmF5JzsKaW1wb3J0IHsgYmlnRW5kaWFuQWRkIH0gZnJvbSAnLi4vLi4vbWF0aC9ieXRlcyc7CgovKioKICogU3RvcmVkVThBcnJheQogKiAgLSAzMiBpdGVtcyBvZiB0eXBlIGB1OGAgZml0IGluIG9uZSAzMi1ieXRlIHNsb3QuCiAqLwpAZmluYWwKZXhwb3J0IGNsYXNzIFN0b3JlZFU4QXJyYXkgZXh0ZW5kcyBTdG9yZWRQYWNrZWRBcnJheTx1OD4gewogICAgcHVibGljIGNvbnN0cnVjdG9yKHBvaW50ZXI6IHUxNiwgc3ViUG9pbnRlcjogVWludDhBcnJheSkgewogICAgICAgIHN1cGVyKHBvaW50ZXIsIHN1YlBvaW50ZXIsIDApOwogICAgfQoKICAgIHByb3RlY3RlZCBnZXRTbG90Q2FwYWNpdHkoKTogdTY0IHsKICAgICAgICByZXR1cm4gMzI7IC8vIDMyIGJ5dGVzID0+IDMyIHggdTgKICAgIH0KCiAgICBwcm90ZWN0ZWQgemVyb1ZhbHVlKCk6IHU4IHsKICAgICAgICByZXR1cm4gMDsKICAgIH0KCiAgICBwcm90ZWN0ZWQgZXEoYTogdTgsIGI6IHU4KTogYm9vbCB7CiAgICAgICAgcmV0dXJuIGEgPT0gYjsKICAgIH0KCiAgICBwcm90ZWN0ZWQgcGFja1Nsb3QodmFsdWVzOiB1OFtdKTogVWludDhBcnJheSB7CiAgICAgICAgLy8gdmFsdWVzLmxlbmd0aCA9PSAzMgogICAgICAgIGNvbnN0IG91dCA9IG5ldyBVaW50OEFycmF5KDMyKTsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDMyOyBpKyspIHsKICAgICAgICAgICAgb3V0W2ldID0gdmFsdWVzW2ldOwogICAgICAgIH0KICAgICAgICByZXR1cm4gb3V0OwogICAgfQoKICAgIHByb3RlY3RlZCB1bnBhY2tTbG90KHNsb3REYXRhOiBVaW50OEFycmF5KTogdThbXSB7CiAgICAgICAgLy8gc2xvdERhdGEubGVuZ3RoID09IDMyCiAgICAgICAgY29uc3Qgb3V0ID0gbmV3IEFycmF5PHU4PigzMik7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzMjsgaSsrKSB7CiAgICAgICAgICAgIG91dFtpXSA9IHNsb3REYXRhW2ldOwogICAgICAgIH0KICAgICAgICByZXR1cm4gb3V0OwogICAgfQoKICAgIHByb3RlY3RlZCBjYWxjdWxhdGVTdG9yYWdlUG9pbnRlcihzbG90SW5kZXg6IHU2NCk6IFVpbnQ4QXJyYXkgewogICAgICAgIC8vIGJhc2VQb2ludGVyICsgKHNsb3RJbmRleCsxKSBpbiBiaWctZW5kaWFuCiAgICAgICAgcmV0dXJuIGJpZ0VuZGlhbkFkZCh0aGlzLmJhc2VQb2ludGVyLCBzbG90SW5kZXgpOwogICAgfQp9",
  "node_modules/@btc-vision/btc-runtime/runtime/storage/StoredAddress.ts": "aW1wb3J0IHsgQmxvY2tjaGFpbiB9IGZyb20gJy4uL2Vudic7CmltcG9ydCB7IGVuY29kZVBvaW50ZXIgfSBmcm9tICcuLi9tYXRoL2FiaSc7CmltcG9ydCB7IEFkZHJlc3MgfSBmcm9tICcuLi90eXBlcy9BZGRyZXNzJzsKaW1wb3J0IHsgRU1QVFlfUE9JTlRFUiB9IGZyb20gJy4uL21hdGgvYnl0ZXMnOwppbXBvcnQgeyBlcVVpbnQgfSBmcm9tICcuLi9nZW5lcmljL01hcFVpbnQ4QXJyYXknOwoKLyoqCiAqIERlZmF1bHQgaXMgQWRkcmVzcy5kZWFkKCk7CiAqLwpAZmluYWwKZXhwb3J0IGNsYXNzIFN0b3JlZEFkZHJlc3MgewogICAgcHJpdmF0ZSByZWFkb25seSBhZGRyZXNzUG9pbnRlcjogVWludDhBcnJheTsKCiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgcG9pbnRlcjogdTE2KSB7CiAgICAgICAgdGhpcy5hZGRyZXNzUG9pbnRlciA9IGVuY29kZVBvaW50ZXIocG9pbnRlciwgRU1QVFlfUE9JTlRFUik7CiAgICB9CgogICAgcHJpdmF0ZSBfdmFsdWU6IEFkZHJlc3MgPSBBZGRyZXNzLmRlYWQoKTsKCiAgICBwdWJsaWMgZ2V0IHZhbHVlKCk6IEFkZHJlc3MgewogICAgICAgIHRoaXMuZW5zdXJlVmFsdWUoKTsKCiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlOwogICAgfQoKICAgIHB1YmxpYyBzZXQgdmFsdWUodmFsdWU6IEFkZHJlc3MpIHsKICAgICAgICBpZiAodmFsdWUgPT09IHRoaXMudmFsdWUpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTsKCiAgICAgICAgQmxvY2tjaGFpbi5zZXRTdG9yYWdlQXQodGhpcy5hZGRyZXNzUG9pbnRlciwgdGhpcy5fdmFsdWUpOwogICAgfQoKICAgIHB1YmxpYyBpc0RlYWQoKTogYm9vbCB7CiAgICAgICAgcmV0dXJuIGVxVWludChBZGRyZXNzLmRlYWQoKSwgdGhpcy52YWx1ZSk7CiAgICB9CgogICAgcHJpdmF0ZSBlbnN1cmVWYWx1ZSgpOiB2b2lkIHsKICAgICAgICBjb25zdCB2YWx1ZSA9IEJsb2NrY2hhaW4uZ2V0U3RvcmFnZUF0KHRoaXMuYWRkcmVzc1BvaW50ZXIpOwogICAgICAgIHRoaXMuX3ZhbHVlLnNldCh2YWx1ZSk7CiAgICB9Cn0K",
  "node_modules/@btc-vision/btc-runtime/runtime/storage/StoredBoolean.ts": "aW1wb3J0IHsgQmxvY2tjaGFpbiB9IGZyb20gJy4uL2Vudic7CmltcG9ydCB7IEdFVF9FTVBUWV9CVUZGRVIgfSBmcm9tICcuLi9tYXRoL2J5dGVzJzsKaW1wb3J0IHsgUmV2ZXJ0IH0gZnJvbSAnLi4vdHlwZXMvUmV2ZXJ0JzsKCkBmaW5hbApleHBvcnQgY2xhc3MgU3RvcmVkQm9vbGVhbiB7CiAgICBwcml2YXRlIHJlYWRvbmx5IHBvaW50ZXJCdWZmZXI6IFVpbnQ4QXJyYXk7CgogICAgY29uc3RydWN0b3IoCiAgICAgICAgcHVibGljIHBvaW50ZXI6IHUxNiwKICAgICAgICBkZWZhdWx0VmFsdWU6IGJvb2wsCiAgICApIHsKICAgICAgICBjb25zdCBwb2ludGVyQnVmZmVyID0gR0VUX0VNUFRZX0JVRkZFUigpOwogICAgICAgIHBvaW50ZXJCdWZmZXJbMF0gPSBwb2ludGVyICYgMjU1OwogICAgICAgIHBvaW50ZXJCdWZmZXJbMV0gPSAocG9pbnRlciA8PCA4KSAmIDI1NTsKCiAgICAgICAgdGhpcy5wb2ludGVyQnVmZmVyID0gcG9pbnRlckJ1ZmZlcjsKCiAgICAgICAgY29uc3QgdmFsdWUgPSBHRVRfRU1QVFlfQlVGRkVSKCk7CiAgICAgICAgaWYgKGRlZmF1bHRWYWx1ZSkgewogICAgICAgICAgICB2YWx1ZVswXSA9IDE7CiAgICAgICAgfQoKICAgICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlOwogICAgfQoKICAgIHByaXZhdGUgX3ZhbHVlOiBVaW50OEFycmF5OwoKICAgIEBpbmxpbmUKICAgIHB1YmxpYyBnZXQgdmFsdWUoKTogYm9vbCB7CiAgICAgICAgdGhpcy5lbnN1cmVWYWx1ZSgpOwoKICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWVbMF0gPT09IDE7CiAgICB9CgogICAgcHVibGljIHNldCB2YWx1ZSh2YWx1ZTogYm9vbCkgewogICAgICAgIHRoaXMuX3ZhbHVlWzBdID0gdmFsdWUgPyAxIDogMDsKCiAgICAgICAgQmxvY2tjaGFpbi5zZXRTdG9yYWdlQXQodGhpcy5wb2ludGVyQnVmZmVyLCB0aGlzLl92YWx1ZSk7CiAgICB9CgogICAgQGlubGluZQogICAgcHVibGljIHRvVWludDhBcnJheSgpOiBVaW50OEFycmF5IHsKICAgICAgICBpZiAoIXRoaXMuX3ZhbHVlKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBSZXZlcnQoYE5vdCBkZWZpbmVkLmApOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlOwogICAgfQoKICAgIHByaXZhdGUgZW5zdXJlVmFsdWUoKTogdm9pZCB7CiAgICAgICAgdGhpcy5fdmFsdWUgPSBCbG9ja2NoYWluLmdldFN0b3JhZ2VBdCgKICAgICAgICAgICAgdGhpcy5wb2ludGVyQnVmZmVyLAogICAgICAgICk7CiAgICB9Cn0K",
  "node_modules/@btc-vision/btc-runtime/runtime/storage/StoredString.ts": "aW1wb3J0IHsgQmxvY2tjaGFpbiB9IGZyb20gJy4uL2Vudic7CmltcG9ydCB7IGVuY29kZVBvaW50ZXIgfSBmcm9tICcuLi9tYXRoL2FiaSc7CmltcG9ydCB7IGJpZ0VuZGlhbkFkZCB9IGZyb20gJy4uL21hdGgvYnl0ZXMnOwppbXBvcnQgeyBSZXZlcnQgfSBmcm9tICcuLi90eXBlcy9SZXZlcnQnOwppbXBvcnQgeyB1MjU2IH0gZnJvbSAnQGJ0Yy12aXNpb24vYXMtYmlnbnVtL2Fzc2VtYmx5JzsKaW1wb3J0IHsgU2FmZU1hdGggfSBmcm9tICcuLi90eXBlcy9TYWZlTWF0aCc7Cgpjb25zdCBNQVhfTEVOR1RIID0gPHUzMj51MTYuTUFYX1ZBTFVFOwpjb25zdCBNQVhfTEVOR1RIX1UyNTYgPSB1MjU2LmZyb21VMzIoPHUzMj5NQVhfTEVOR1RIKTsKCi8qKgogKiBAY2xhc3MgU3RvcmVkU3RyaW5nCiAqIEBkZXNjcmlwdGlvbgogKiBTdG9yZXMgYSBzdHJpbmcgaW4gYSBzZXF1ZW5jZSBvZiAzMi1ieXRlIHN0b3JhZ2Ugc2xvdHMsIGluIFVURi04IGZvcm1hdDoKICogIC0gU2xvdCAwOiBmaXJzdCA0IGJ5dGVzID0gbGVuZ3RoIChiaWctZW5kaWFuKSwgbmV4dCAyOCBieXRlcyA9IHBhcnRpYWwgZGF0YQogKiAgLSBTbG90IE4+MDogMzIgYnl0ZXMgb2YgZGF0YSBlYWNoCiAqCiAqIFRoZSBtYXhpbXVtIGlzIDY1LDUzNSBieXRlcyBpbiBVVEYtOCBmb3JtIChub3QgbmVjZXNzYXJpbHkgdGhlIHNhbWUgYXMgY29kZSBwb2ludHMpLgogKi8KQGZpbmFsCmV4cG9ydCBjbGFzcyBTdG9yZWRTdHJpbmcgewogICAgcHJpdmF0ZSByZWFkb25seSBzdWJQb2ludGVyOiBVaW50OEFycmF5OwoKICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBwb2ludGVyOiB1MTYsIGluZGV4OiB1NjQgPSAwKSB7CiAgICAgICAgY29uc3QgaW5kZXhlZCA9IFNhZmVNYXRoLm11bCh1MjU2LmZyb21VNjQoaW5kZXgpLCBNQVhfTEVOR1RIX1UyNTYpOwogICAgICAgIHRoaXMuc3ViUG9pbnRlciA9IGluZGV4ZWQudG9VaW50OEFycmF5KHRydWUpLnNsaWNlKDAsIDMwKTsKICAgIH0KCiAgICBwcml2YXRlIF92YWx1ZTogc3RyaW5nID0gJyc7CgogICAgLyoqCiAgICAgKiBDYWNoZWQgc3RyaW5nIHZhbHVlLiBJZiBgX3ZhbHVlYCBpcyBlbXB0eSwgd2UgY2FsbCBgbG9hZCgpYCBvbiBmaXJzdCBhY2Nlc3MuCiAgICAgKi8KICAgIHB1YmxpYyBnZXQgdmFsdWUoKTogc3RyaW5nIHsKICAgICAgICBpZiAoIXRoaXMuX3ZhbHVlKSB7CiAgICAgICAgICAgIHRoaXMubG9hZCgpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7CiAgICB9CgogICAgcHVibGljIHNldCB2YWx1ZSh2OiBzdHJpbmcpIHsKICAgICAgICB0aGlzLl92YWx1ZSA9IHY7CgogICAgICAgIHRoaXMuc2F2ZSgpOwogICAgfQoKICAgIC8qKgogICAgICogRGVyaXZlcyBhIDMyLWJ5dGUgcG9pbnRlciBmb3IgdGhlIGdpdmVuIGNodW5rSW5kZXggYW5kIHBlcmZvcm1zIGJpZy1lbmRpYW4gYWRkaXRpb24uCiAgICAgKiBjaHVua0luZGV4PTAgPT4gaGVhZGVyIHNsb3QsIDEgPT4gc2Vjb25kIHNsb3QsIGV0Yy4KICAgICAqLwogICAgcHJpdmF0ZSBnZXRQb2ludGVyKGNodW5rSW5kZXg6IHU2NCk6IFVpbnQ4QXJyYXkgewogICAgICAgIGNvbnN0IGJhc2UgPSBlbmNvZGVQb2ludGVyKHRoaXMucG9pbnRlciwgdGhpcy5zdWJQb2ludGVyKTsKICAgICAgICByZXR1cm4gYmlnRW5kaWFuQWRkKGJhc2UsIGNodW5rSW5kZXgpOwogICAgfQoKICAgIC8qKgogICAgICogUmVhZHMgdGhlIGZpcnN0IHNsb3QgYW5kIHJldHVybnMgdGhlIHN0b3JlZCBieXRlIGxlbmd0aCAoYmlnLWVuZGlhbikuCiAgICAgKiBSZXR1cm5zIDAgaWYgdGhlIHNsb3QgaXMgYWxsIHplcm8uCiAgICAgKi8KICAgIHByaXZhdGUgZ2V0U3RvcmVkTGVuZ3RoKCk6IHUzMiB7CiAgICAgICAgY29uc3QgaGVhZGVyU2xvdCA9IEJsb2NrY2hhaW4uZ2V0U3RvcmFnZUF0KHRoaXMuZ2V0UG9pbnRlcigwKSk7CiAgICAgICAgY29uc3QgYjAgPSA8dTMyPmhlYWRlclNsb3RbMF07CiAgICAgICAgY29uc3QgYjEgPSA8dTMyPmhlYWRlclNsb3RbMV07CiAgICAgICAgY29uc3QgYjIgPSA8dTMyPmhlYWRlclNsb3RbMl07CiAgICAgICAgY29uc3QgYjMgPSA8dTMyPmhlYWRlclNsb3RbM107CiAgICAgICAgcmV0dXJuIChiMCA8PCAyNCkgfCAoYjEgPDwgMTYpIHwgKGIyIDw8IDgpIHwgYjM7CiAgICB9CgogICAgLyoqCiAgICAgKiBDbGVhcnMgb2xkIGRhdGEgZnJvbSBzdG9yYWdlLiBCYXNlZCBvbiBgb2xkTGVuZ3RoYCwgZGV0ZXJtaW5lcyBob3cgbWFueSBzbG90cwogICAgICogd2VyZSB1c2VkLCBhbmQgd3JpdGVzIHplcm9lZCAzMi1ieXRlIGFycmF5cyB0byBlYWNoLgogICAgICovCiAgICBwcml2YXRlIGNsZWFyT2xkU3RvcmFnZShvbGRMZW5ndGg6IHUzMik6IHZvaWQgewogICAgICAgIGlmIChvbGRMZW5ndGggPT0gMCkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICAvLyBXZSBhbHdheXMgdXNlIGF0IGxlYXN0IDEgc2xvdCAodGhlIGhlYWRlciBzbG90KS4KICAgICAgICBsZXQgY2h1bmtDb3VudDogdTY0ID0gMTsKCiAgICAgICAgLy8gSW4gdGhlIGhlYWRlciBzbG90LCB3ZSBjYW4gc3RvcmUgdXAgdG8gMjggYnl0ZXMgb2YgZGF0YS4KICAgICAgICBjb25zdCByZW1haW5pbmcgPSBvbGRMZW5ndGggPiAyOCA/IG9sZExlbmd0aCAtIDI4IDogMDsKICAgICAgICBpZiAocmVtYWluaW5nID4gMCkgewogICAgICAgICAgICAvLyBFYWNoIGFkZGl0aW9uYWwgY2h1bmsgaXMgMzIgYnl0ZXMuCiAgICAgICAgICAgIC8vIFVzZSBpbnRlZ2VyIG1hdGggY2VpbGluZzogKHJlbWFpbmluZyArIDMyIC0gMSkgLyAzMgogICAgICAgICAgICBjaHVua0NvdW50ICs9IChyZW1haW5pbmcgKyAzMiAtIDEpIC8gMzI7CiAgICAgICAgfQoKICAgICAgICAvLyBaZXJvIG91dCBlYWNoIHByZXZpb3VzbHkgdXNlZCBzbG90CiAgICAgICAgZm9yIChsZXQgaTogdTY0ID0gMDsgaSA8IGNodW5rQ291bnQ7IGkrKykgewogICAgICAgICAgICBCbG9ja2NoYWluLnNldFN0b3JhZ2VBdCh0aGlzLmdldFBvaW50ZXIoaSksIG5ldyBVaW50OEFycmF5KDMyKSk7CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogU2F2ZXMgdGhlIGN1cnJlbnQgc3RyaW5nIHRvIHN0b3JhZ2UgaW4gVVRGLTggZm9ybS4KICAgICAqLwogICAgcHJpdmF0ZSBzYXZlKCk6IHZvaWQgewogICAgICAgIC8vIDEpIENsZWFyIG9sZCBkYXRhCiAgICAgICAgY29uc3Qgb2xkTGVuID0gdGhpcy5nZXRTdG9yZWRMZW5ndGgoKTsKICAgICAgICB0aGlzLmNsZWFyT2xkU3RvcmFnZShvbGRMZW4pOwoKICAgICAgICAvLyAyKSBFbmNvZGUgbmV3IHN0cmluZyBhcyBVVEYtOAogICAgICAgIGNvbnN0IHV0ZjhEYXRhID0gU3RyaW5nLlVURjguZW5jb2RlKHRoaXMuX3ZhbHVlLCBmYWxzZSk7CiAgICAgICAgY29uc3QgbGVuZ3RoID0gPHUzMj51dGY4RGF0YS5ieXRlTGVuZ3RoOwoKICAgICAgICAvLyBFbmZvcmNlIG1heCBsZW5ndGgKICAgICAgICBpZiAobGVuZ3RoID4gTUFYX0xFTkdUSCkgewogICAgICAgICAgICB0aHJvdyBuZXcgUmV2ZXJ0KGBTdG9yZWRTdHJpbmc6IHZhbHVlIGlzIHRvbyBsb25nIChtYXg9JHtNQVhfTEVOR1RIfSlgKTsKICAgICAgICB9CgogICAgICAgIC8vIDMpIElmIG5ldyBzdHJpbmcgaXMgZW1wdHksIGp1c3Qgc3RvcmUgYSB6ZXJvZWQgaGVhZGVyIGFuZCByZXR1cm4KICAgICAgICBpZiAobGVuZ3RoID09IDApIHsKICAgICAgICAgICAgLy8gQSB6ZXJvZWQgMzItYnl0ZSBhcnJheSA9PiBpbmRpY2F0ZXMgbGVuZ3RoPTAKICAgICAgICAgICAgQmxvY2tjaGFpbi5zZXRTdG9yYWdlQXQodGhpcy5nZXRQb2ludGVyKDApLCBuZXcgVWludDhBcnJheSgzMikpOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICAvLyA0KSBXcml0ZSB0aGUgZmlyc3Qgc2xvdDogbGVuZ3RoICsgdXAgdG8gMjggYnl0ZXMKICAgICAgICBsZXQgcmVtYWluaW5nOiB1MzIgPSBsZW5ndGg7CiAgICAgICAgbGV0IG9mZnNldDogdTMyID0gMDsKICAgICAgICBjb25zdCBmaXJzdFNsb3QgPSBuZXcgVWludDhBcnJheSgzMik7CiAgICAgICAgZmlyc3RTbG90WzBdID0gPHU4PigobGVuZ3RoID4+IDI0KSAmIDB4ZmYpOwogICAgICAgIGZpcnN0U2xvdFsxXSA9IDx1OD4oKGxlbmd0aCA+PiAxNikgJiAweGZmKTsKICAgICAgICBmaXJzdFNsb3RbMl0gPSA8dTg+KChsZW5ndGggPj4gOCkgJiAweGZmKTsKICAgICAgICBmaXJzdFNsb3RbM10gPSA8dTg+KGxlbmd0aCAmIDB4ZmYpOwoKICAgICAgICBjb25zdCBieXRlcyA9IFVpbnQ4QXJyYXkud3JhcCh1dGY4RGF0YSk7CiAgICAgICAgY29uc3QgZmlyc3RDaHVua1NpemUgPSByZW1haW5pbmcgPCAyOCA/IHJlbWFpbmluZyA6IDI4OwogICAgICAgIGZvciAobGV0IGk6IHUzMiA9IDA7IGkgPCBmaXJzdENodW5rU2l6ZTsgaSsrKSB7CiAgICAgICAgICAgIGZpcnN0U2xvdFs0ICsgaV0gPSBieXRlc1tpXTsKICAgICAgICB9CiAgICAgICAgQmxvY2tjaGFpbi5zZXRTdG9yYWdlQXQodGhpcy5nZXRQb2ludGVyKDApLCBmaXJzdFNsb3QpOwoKICAgICAgICByZW1haW5pbmcgLT0gZmlyc3RDaHVua1NpemU7CiAgICAgICAgb2Zmc2V0ICs9IGZpcnN0Q2h1bmtTaXplOwoKICAgICAgICAvLyA1KSBXcml0ZSBzdWJzZXF1ZW50IHNsb3RzICgzMiBieXRlcyBlYWNoKQogICAgICAgIGxldCBjaHVua0luZGV4OiB1NjQgPSAxOwogICAgICAgIHdoaWxlIChyZW1haW5pbmcgPiAwKSB7CiAgICAgICAgICAgIGNvbnN0IHNsb3REYXRhID0gbmV3IFVpbnQ4QXJyYXkoMzIpOwogICAgICAgICAgICBjb25zdCBjaHVua1NpemUgPSByZW1haW5pbmcgPCB1MzIoMzIpID8gcmVtYWluaW5nIDogdTMyKDMyKTsKICAgICAgICAgICAgZm9yIChsZXQgaTogdTMyID0gMDsgaSA8IGNodW5rU2l6ZTsgaSsrKSB7CiAgICAgICAgICAgICAgICBzbG90RGF0YVtpXSA9IGJ5dGVzW29mZnNldCArIGldOwogICAgICAgICAgICB9CiAgICAgICAgICAgIEJsb2NrY2hhaW4uc2V0U3RvcmFnZUF0KHRoaXMuZ2V0UG9pbnRlcihjaHVua0luZGV4KSwgc2xvdERhdGEpOwoKICAgICAgICAgICAgcmVtYWluaW5nIC09IGNodW5rU2l6ZTsKICAgICAgICAgICAgb2Zmc2V0ICs9IGNodW5rU2l6ZTsKICAgICAgICAgICAgY2h1bmtJbmRleCsrOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIExvYWRzIHRoZSBzdHJpbmcgZnJvbSBzdG9yYWdlIGJ5IHJlYWRpbmcgdGhlIHN0b3JlZCBieXRlIGxlbmd0aCwgdGhlbiBkZWNvZGluZwogICAgICogdGhlIGNvcnJlc3BvbmRpbmcgVVRGLTggZGF0YSBmcm9tIHRoZSBzbG90cy4KICAgICAqLwogICAgcHJpdmF0ZSBsb2FkKCk6IHZvaWQgewogICAgICAgIC8vIFJlYWQgdGhlIGhlYWRlciBzbG90IGZpcnN0CiAgICAgICAgY29uc3QgaGVhZGVyU2xvdCA9IEJsb2NrY2hhaW4uZ2V0U3RvcmFnZUF0KHRoaXMuZ2V0UG9pbnRlcigwKSk7CgogICAgICAgIC8vIFBhcnNlIHRoZSBiaWctZW5kaWFuIGxlbmd0aAogICAgICAgIGNvbnN0IGIwID0gPHUzMj5oZWFkZXJTbG90WzBdOwogICAgICAgIGNvbnN0IGIxID0gPHUzMj5oZWFkZXJTbG90WzFdOwogICAgICAgIGNvbnN0IGIyID0gPHUzMj5oZWFkZXJTbG90WzJdOwogICAgICAgIGNvbnN0IGIzID0gPHUzMj5oZWFkZXJTbG90WzNdOwogICAgICAgIGNvbnN0IGxlbmd0aDogdTMyID0gKGIwIDw8IDI0KSB8IChiMSA8PCAxNikgfCAoYjIgPDwgOCkgfCBiMzsKCiAgICAgICAgLy8gSWYgbGVuZ3RoPTAsIHRoZW4gdGhlIHN0cmluZyBpcyBlbXB0eQogICAgICAgIGlmIChsZW5ndGggPT0gMCkgewogICAgICAgICAgICB0aGlzLl92YWx1ZSA9ICcnOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICAvLyBSZWFkIHRoZSBVVEYtOCBieXRlcyBmcm9tIHN0b3JhZ2UKICAgICAgICBsZXQgcmVtYWluaW5nOiB1MzIgPSBsZW5ndGg7CiAgICAgICAgbGV0IG9mZnNldDogdTMyID0gMDsKICAgICAgICBjb25zdCBvdXQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpOwoKICAgICAgICAvLyBGaXJzdCBzbG90IGNhbiBob2xkIHVwIHRvIDI4IGJ5dGVzIGFmdGVyIHRoZSBsZW5ndGgKICAgICAgICBjb25zdCBmaXJzdENodW5rU2l6ZSA9IHJlbWFpbmluZyA8IDI4ID8gcmVtYWluaW5nIDogMjg7CiAgICAgICAgZm9yIChsZXQgaTogdTMyID0gMDsgaSA8IGZpcnN0Q2h1bmtTaXplOyBpKyspIHsKICAgICAgICAgICAgb3V0W2ldID0gaGVhZGVyU2xvdFs0ICsgaV07CiAgICAgICAgfQogICAgICAgIHJlbWFpbmluZyAtPSBmaXJzdENodW5rU2l6ZTsKICAgICAgICBvZmZzZXQgKz0gZmlyc3RDaHVua1NpemU7CgogICAgICAgIC8vIFJlYWQgdGhlIHN1YnNlcXVlbnQgc2xvdHMgb2YgMzIgYnl0ZXMgZWFjaAogICAgICAgIGxldCBjaHVua0luZGV4OiB1NjQgPSAxOwogICAgICAgIHdoaWxlIChyZW1haW5pbmcgPiAwKSB7CiAgICAgICAgICAgIGNvbnN0IHNsb3REYXRhID0gQmxvY2tjaGFpbi5nZXRTdG9yYWdlQXQodGhpcy5nZXRQb2ludGVyKGNodW5rSW5kZXgpKTsKICAgICAgICAgICAgY29uc3QgY2h1bmtTaXplID0gcmVtYWluaW5nIDwgMzIgPyByZW1haW5pbmcgOiAzMjsKICAgICAgICAgICAgZm9yIChsZXQgaTogdTMyID0gMDsgaSA8IGNodW5rU2l6ZTsgaSsrKSB7CiAgICAgICAgICAgICAgICBvdXRbb2Zmc2V0ICsgaV0gPSBzbG90RGF0YVtpXTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZW1haW5pbmcgLT0gY2h1bmtTaXplOwogICAgICAgICAgICBvZmZzZXQgKz0gY2h1bmtTaXplOwogICAgICAgICAgICBjaHVua0luZGV4Kys7CiAgICAgICAgfQoKICAgICAgICAvLyBEZWNvZGUgVVRGLTggaW50byBhIG5vcm1hbCBzdHJpbmcKICAgICAgICB0aGlzLl92YWx1ZSA9IFN0cmluZy5VVEY4LmRlY29kZShvdXQuYnVmZmVyLCBmYWxzZSk7CiAgICB9Cn0=",
  "node_modules/@btc-vision/btc-runtime/runtime/storage/StoredU256.ts": "aW1wb3J0IHsgdTI1NiB9IGZyb20gJ0BidGMtdmlzaW9uL2FzLWJpZ251bS9hc3NlbWJseSc7CmltcG9ydCB7IEJsb2NrY2hhaW4gfSBmcm9tICcuLi9lbnYnOwppbXBvcnQgeyBlbmNvZGVQb2ludGVyIH0gZnJvbSAnLi4vbWF0aC9hYmknOwppbXBvcnQgeyBTYWZlTWF0aCB9IGZyb20gJy4uL3R5cGVzL1NhZmVNYXRoJzsKCkBmaW5hbApleHBvcnQgY2xhc3MgU3RvcmVkVTI1NiB7CiAgICBwcml2YXRlIHJlYWRvbmx5IHBvaW50ZXJCdWZmZXI6IFVpbnQ4QXJyYXk7CgogICAgY29uc3RydWN0b3IoCiAgICAgICAgcHVibGljIHBvaW50ZXI6IHUxNiwKICAgICAgICBwdWJsaWMgc3ViUG9pbnRlcjogVWludDhBcnJheSwKICAgICkgewogICAgICAgIGFzc2VydChzdWJQb2ludGVyLmxlbmd0aCA8PSAzMCwgYFlvdSBtdXN0IHBhc3MgYSAzMCBieXRlcyBzdWItcG9pbnRlci4gKEFkZHJlc3MsIGdvdCAke3N1YlBvaW50ZXIubGVuZ3RofSlgKTsKCiAgICAgICAgdGhpcy5wb2ludGVyQnVmZmVyID0gZW5jb2RlUG9pbnRlcihwb2ludGVyLCBzdWJQb2ludGVyKTsKICAgIH0KCiAgICBwcml2YXRlIF92YWx1ZTogdTI1NiA9IHUyNTYuWmVybzsKCiAgICBwdWJsaWMgZ2V0IHZhbHVlKCk6IHUyNTYgewogICAgICAgIHRoaXMuZW5zdXJlVmFsdWUoKTsKCiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlOwogICAgfQoKICAgIHB1YmxpYyBzZXQgdmFsdWUodmFsdWU6IHUyNTYpIHsKICAgICAgICBpZiAodTI1Ni5lcSh2YWx1ZSwgdGhpcy5fdmFsdWUpKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7CgogICAgICAgIEJsb2NrY2hhaW4uc2V0U3RvcmFnZUF0KHRoaXMucG9pbnRlckJ1ZmZlciwgdGhpcy5fX3ZhbHVlKTsKICAgIH0KCiAgICBwdWJsaWMgZ2V0IHRvQnl0ZXMoKTogVWludDhBcnJheSB7CiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlLnRvVWludDhBcnJheSh0cnVlKTsKICAgIH0KCiAgICBwcml2YXRlIGdldCBfX3ZhbHVlKCk6IFVpbnQ4QXJyYXkgewogICAgICAgIHJldHVybiB0aGlzLl92YWx1ZS50b1VpbnQ4QXJyYXkodHJ1ZSk7CiAgICB9CgogICAgQGlubGluZQogICAgcHVibGljIHRvU3RyaW5nKCk6IHN0cmluZyB7CiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlLnRvU3RyaW5nKCk7CiAgICB9CgogICAgQGlubGluZQogICAgQG9wZXJhdG9yKCcrJykKICAgIHB1YmxpYyBhZGQodmFsdWU6IHUyNTYpOiB0aGlzIHsKICAgICAgICB0aGlzLmVuc3VyZVZhbHVlKCk7CgogICAgICAgIHRoaXMuX3ZhbHVlID0gU2FmZU1hdGguYWRkKHRoaXMuX3ZhbHVlLCB2YWx1ZSk7CiAgICAgICAgQmxvY2tjaGFpbi5zZXRTdG9yYWdlQXQodGhpcy5wb2ludGVyQnVmZmVyLCB0aGlzLl9fdmFsdWUpOwoKICAgICAgICByZXR1cm4gdGhpczsKICAgIH0KCiAgICBAaW5saW5lCiAgICBwdWJsaWMgYWRkTm9Db21taXQodmFsdWU6IHUyNTYpOiB0aGlzIHsKICAgICAgICB0aGlzLl92YWx1ZSA9IFNhZmVNYXRoLmFkZCh0aGlzLl92YWx1ZSwgdmFsdWUpOwoKICAgICAgICByZXR1cm4gdGhpczsKICAgIH0KCiAgICBAaW5saW5lCiAgICBwdWJsaWMgc3ViTm9Db21taXQodmFsdWU6IHUyNTYpOiB0aGlzIHsKICAgICAgICB0aGlzLl92YWx1ZSA9IFNhZmVNYXRoLnN1Yih0aGlzLl92YWx1ZSwgdmFsdWUpOwoKICAgICAgICByZXR1cm4gdGhpczsKICAgIH0KCiAgICBAaW5saW5lCiAgICBwdWJsaWMgY29tbWl0KCk6IHRoaXMgewogICAgICAgIEJsb2NrY2hhaW4uc2V0U3RvcmFnZUF0KHRoaXMucG9pbnRlckJ1ZmZlciwgdGhpcy5fX3ZhbHVlKTsKCiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CgogICAgQGlubGluZQogICAgQG9wZXJhdG9yKCctJykKICAgIHB1YmxpYyBzdWIodmFsdWU6IHUyNTYpOiB0aGlzIHsKICAgICAgICB0aGlzLmVuc3VyZVZhbHVlKCk7CgogICAgICAgIHRoaXMuX3ZhbHVlID0gU2FmZU1hdGguc3ViKHRoaXMuX3ZhbHVlLCB2YWx1ZSk7CiAgICAgICAgQmxvY2tjaGFpbi5zZXRTdG9yYWdlQXQodGhpcy5wb2ludGVyQnVmZmVyLCB0aGlzLl9fdmFsdWUpOwoKICAgICAgICByZXR1cm4gdGhpczsKICAgIH0KCiAgICBAaW5saW5lCiAgICBAb3BlcmF0b3IoJyonKQogICAgcHVibGljIG11bCh2YWx1ZTogdTI1Nik6IHRoaXMgewogICAgICAgIHRoaXMuZW5zdXJlVmFsdWUoKTsKCiAgICAgICAgdGhpcy5fdmFsdWUgPSBTYWZlTWF0aC5tdWwodGhpcy5fdmFsdWUsIHZhbHVlKTsKICAgICAgICBCbG9ja2NoYWluLnNldFN0b3JhZ2VBdCh0aGlzLnBvaW50ZXJCdWZmZXIsIHRoaXMuX192YWx1ZSk7CgogICAgICAgIHJldHVybiB0aGlzOwogICAgfQoKICAgIEBpbmxpbmUKICAgIEBvcGVyYXRvcignPT0nKQogICAgcHVibGljIGVxKHZhbHVlOiB1MjU2KTogYm9vbGVhbiB7CiAgICAgICAgdGhpcy5lbnN1cmVWYWx1ZSgpOwoKICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWUgPT09IHZhbHVlOwogICAgfQoKICAgIEBpbmxpbmUKICAgIEBvcGVyYXRvcignIT0nKQogICAgcHVibGljIG5lKHZhbHVlOiB1MjU2KTogYm9vbGVhbiB7CiAgICAgICAgdGhpcy5lbnN1cmVWYWx1ZSgpOwoKICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWUgIT09IHZhbHVlOwogICAgfQoKICAgIEBpbmxpbmUKICAgIEBvcGVyYXRvcignPCcpCiAgICBwdWJsaWMgbHQodmFsdWU6IHUyNTYpOiBib29sZWFuIHsKICAgICAgICB0aGlzLmVuc3VyZVZhbHVlKCk7CgogICAgICAgIHJldHVybiB0aGlzLl92YWx1ZSA8IHZhbHVlOwogICAgfQoKICAgIEBpbmxpbmUKICAgIEBvcGVyYXRvcignPicpCiAgICBwdWJsaWMgZ3QodmFsdWU6IHUyNTYpOiBib29sZWFuIHsKICAgICAgICB0aGlzLmVuc3VyZVZhbHVlKCk7CgogICAgICAgIHJldHVybiB0aGlzLl92YWx1ZSA+IHZhbHVlOwogICAgfQoKICAgIEBpbmxpbmUKICAgIEBvcGVyYXRvcignPD0nKQogICAgcHVibGljIGxlKHZhbHVlOiB1MjU2KTogYm9vbGVhbiB7CiAgICAgICAgdGhpcy5lbnN1cmVWYWx1ZSgpOwoKICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWUgPD0gdmFsdWU7CiAgICB9CgogICAgQGlubGluZQogICAgQG9wZXJhdG9yKCc+PScpCiAgICBwdWJsaWMgZ2UodmFsdWU6IHUyNTYpOiBib29sZWFuIHsKICAgICAgICB0aGlzLmVuc3VyZVZhbHVlKCk7CgogICAgICAgIHJldHVybiB0aGlzLl92YWx1ZSA+PSB2YWx1ZTsKICAgIH0KCiAgICBAaW5saW5lCiAgICBAb3BlcmF0b3IoJz4+JykKICAgIHB1YmxpYyBzaHIodmFsdWU6IGkzMik6IHRoaXMgewogICAgICAgIHRoaXMuZW5zdXJlVmFsdWUoKTsKCiAgICAgICAgdGhpcy5fdmFsdWUgPSB1MjU2LnNocih0aGlzLl92YWx1ZSwgdmFsdWUpOwogICAgICAgIEJsb2NrY2hhaW4uc2V0U3RvcmFnZUF0KHRoaXMucG9pbnRlckJ1ZmZlciwgdGhpcy5fX3ZhbHVlKTsKCiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CgogICAgQGlubGluZQogICAgQG9wZXJhdG9yKCcmJykKICAgIHB1YmxpYyBhbmQodmFsdWU6IHUyNTYpOiB0aGlzIHsKICAgICAgICB0aGlzLmVuc3VyZVZhbHVlKCk7CgogICAgICAgIHRoaXMuX3ZhbHVlID0gdTI1Ni5hbmQodGhpcy5fdmFsdWUsIHZhbHVlKTsKICAgICAgICBCbG9ja2NoYWluLnNldFN0b3JhZ2VBdCh0aGlzLnBvaW50ZXJCdWZmZXIsIHRoaXMuX192YWx1ZSk7CgogICAgICAgIHJldHVybiB0aGlzOwogICAgfQoKICAgIEBpbmxpbmUKICAgIEBvcGVyYXRvcignfCcpCiAgICBwdWJsaWMgb3IodmFsdWU6IHUyNTYpOiB0aGlzIHsKICAgICAgICB0aGlzLmVuc3VyZVZhbHVlKCk7CgogICAgICAgIHRoaXMuX3ZhbHVlID0gdTI1Ni5vcih0aGlzLl92YWx1ZSwgdmFsdWUpOwogICAgICAgIEJsb2NrY2hhaW4uc2V0U3RvcmFnZUF0KHRoaXMucG9pbnRlckJ1ZmZlciwgdGhpcy5fX3ZhbHVlKTsKCiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CgogICAgQGlubGluZQogICAgQG9wZXJhdG9yKCdeJykKICAgIHB1YmxpYyB4b3IodmFsdWU6IHUyNTYpOiB0aGlzIHsKICAgICAgICB0aGlzLmVuc3VyZVZhbHVlKCk7CgogICAgICAgIHRoaXMuX3ZhbHVlID0gdTI1Ni54b3IodGhpcy5fdmFsdWUsIHZhbHVlKTsKICAgICAgICBCbG9ja2NoYWluLnNldFN0b3JhZ2VBdCh0aGlzLnBvaW50ZXJCdWZmZXIsIHRoaXMuX192YWx1ZSk7CgogICAgICAgIHJldHVybiB0aGlzOwogICAgfQoKICAgIEBpbmxpbmUKICAgIEBvcGVyYXRvcignKionKQogICAgcHVibGljIHBvdyhleHBvbmVudDogdTI1Nik6IHRoaXMgewogICAgICAgIHRoaXMuZW5zdXJlVmFsdWUoKTsKCiAgICAgICAgdGhpcy5fdmFsdWUgPSBTYWZlTWF0aC5wb3codGhpcy5fdmFsdWUsIGV4cG9uZW50KTsKICAgICAgICBCbG9ja2NoYWluLnNldFN0b3JhZ2VBdCh0aGlzLnBvaW50ZXJCdWZmZXIsIHRoaXMuX192YWx1ZSk7CgogICAgICAgIHJldHVybiB0aGlzOwogICAgfQoKICAgIEBpbmxpbmUKICAgIEBvcGVyYXRvcignJScpCiAgICBwdWJsaWMgbW9kKHZhbHVlOiB1MjU2KTogdGhpcyB7CiAgICAgICAgdGhpcy5lbnN1cmVWYWx1ZSgpOwoKICAgICAgICB0aGlzLl92YWx1ZSA9IFNhZmVNYXRoLm1vZCh0aGlzLl92YWx1ZSwgdmFsdWUpOwogICAgICAgIEJsb2NrY2hhaW4uc2V0U3RvcmFnZUF0KHRoaXMucG9pbnRlckJ1ZmZlciwgdGhpcy5fX3ZhbHVlKTsKCiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CgogICAgQGlubGluZQogICAgQG9wZXJhdG9yLnBvc3RmaXgoJysrJykKICAgIHB1YmxpYyBpbmMoKTogdGhpcyB7CiAgICAgICAgdGhpcy5lbnN1cmVWYWx1ZSgpOwoKICAgICAgICB0aGlzLl92YWx1ZSA9IFNhZmVNYXRoLmFkZCh0aGlzLl92YWx1ZSwgdTI1Ni5PbmUpOwogICAgICAgIEJsb2NrY2hhaW4uc2V0U3RvcmFnZUF0KHRoaXMucG9pbnRlckJ1ZmZlciwgdGhpcy5fX3ZhbHVlKTsKCiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CgogICAgQGlubGluZQogICAgQG9wZXJhdG9yLnBvc3RmaXgoJy0tJykKICAgIHB1YmxpYyBkZWMoKTogdGhpcyB7CiAgICAgICAgdGhpcy5lbnN1cmVWYWx1ZSgpOwoKICAgICAgICB0aGlzLl92YWx1ZSA9IFNhZmVNYXRoLnN1Yih0aGlzLl92YWx1ZSwgdTI1Ni5PbmUpOwogICAgICAgIEJsb2NrY2hhaW4uc2V0U3RvcmFnZUF0KHRoaXMucG9pbnRlckJ1ZmZlciwgdGhpcy5fX3ZhbHVlKTsKCiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CgogICAgQGlubGluZQogICAgcHVibGljIHNldCh2YWx1ZTogdTI1Nik6IHRoaXMgewogICAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7CgogICAgICAgIEJsb2NrY2hhaW4uc2V0U3RvcmFnZUF0KHRoaXMucG9pbnRlckJ1ZmZlciwgdGhpcy5fX3ZhbHVlKTsKCiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CgogICAgQGlubGluZQogICAgcHVibGljIHRvVWludDhBcnJheSgpOiBVaW50OEFycmF5IHsKICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWUudG9VaW50OEFycmF5KHRydWUpOwogICAgfQoKICAgIHByaXZhdGUgZW5zdXJlVmFsdWUoKTogdm9pZCB7CiAgICAgICAgY29uc3QgdmFsdWUgPSBCbG9ja2NoYWluLmdldFN0b3JhZ2VBdCh0aGlzLnBvaW50ZXJCdWZmZXIpOwogICAgICAgIHRoaXMuX3ZhbHVlID0gdTI1Ni5mcm9tVWludDhBcnJheUJFKHZhbHVlKTsKICAgIH0KfQo=",
  "node_modules/@btc-vision/btc-runtime/runtime/storage/StoredU64.ts": "aW1wb3J0IHsgdTI1NiB9IGZyb20gJ0BidGMtdmlzaW9uL2FzLWJpZ251bS9hc3NlbWJseSc7CmltcG9ydCB7IEJ5dGVzV3JpdGVyIH0gZnJvbSAnLi4vYnVmZmVyL0J5dGVzV3JpdGVyJzsKaW1wb3J0IHsgQmxvY2tjaGFpbiB9IGZyb20gJy4uL2Vudic7CmltcG9ydCB7IGVuY29kZVBvaW50ZXIgfSBmcm9tICcuLi9tYXRoL2FiaSc7CmltcG9ydCB7IEJ5dGVzUmVhZGVyIH0gZnJvbSAnLi4vYnVmZmVyL0J5dGVzUmVhZGVyJzsKCi8qKgogKiBAY2xhc3MgU3RvcmVkVTY0CiAqIEBkZXNjcmlwdGlvbiBNYW5hZ2VzIHVwIHRvIGZvdXIgdTY0IHZhbHVlcyB3aXRoaW4gYSBzaW5nbGUgdTI1NiBzdG9yYWdlIHNsb3QuCiAqLwpAZmluYWwKZXhwb3J0IGNsYXNzIFN0b3JlZFU2NCB7CiAgICBwcml2YXRlIHJlYWRvbmx5IGJ1ZmZlclBvaW50ZXI6IFVpbnQ4QXJyYXk7CgogICAgLy8gSW50ZXJuYWwgY2FjaGUgZm9yIGZvdXIgdTY0IHZhbHVlczogW2xvMSwgbG8yLCBoaTEsIGhpMl0KICAgIHByaXZhdGUgX3ZhbHVlczogdTY0W10gPSBbMCwgMCwgMCwgMF07CgogICAgLy8gRmxhZyB0byBpbmRpY2F0ZSBpZiB2YWx1ZXMgYXJlIGxvYWRlZCBmcm9tIHN0b3JhZ2UKICAgIHByaXZhdGUgaXNMb2FkZWQ6IGJvb2wgPSBmYWxzZTsKCiAgICAvLyBGbGFnIHRvIGluZGljYXRlIGlmIGFueSB2YWx1ZSBoYXMgYmVlbiBjaGFuZ2VkCiAgICBwcml2YXRlIGlzQ2hhbmdlZDogYm9vbCA9IGZhbHNlOwoKICAgIC8qKgogICAgICogQGNvbnN0cnVjdG9yCiAgICAgKiBAcGFyYW0ge3UxNn0gcG9pbnRlciAtIFRoZSBwcmltYXJ5IHBvaW50ZXIgaWRlbnRpZmllci4KICAgICAqIEBwYXJhbSB7VWludDhBcnJheX0gc3ViUG9pbnRlciAtIFRoZSBzdWItcG9pbnRlciBmb3IgbWVtb3J5IHNsb3QgYWRkcmVzc2luZy4KICAgICAqLwogICAgY29uc3RydWN0b3IoCiAgICAgICAgcHVibGljIHBvaW50ZXI6IHUxNiwKICAgICAgICBwdWJsaWMgc3ViUG9pbnRlcjogVWludDhBcnJheSwKICAgICkgewogICAgICAgIGFzc2VydChzdWJQb2ludGVyLmxlbmd0aCA8PSAzMCwgYFlvdSBtdXN0IHBhc3MgYSAzMCBieXRlcyBzdWItcG9pbnRlci4gKFN0b3JlZFU2NCwgZ290ICR7c3ViUG9pbnRlci5sZW5ndGh9KWApOwoKICAgICAgICB0aGlzLmJ1ZmZlclBvaW50ZXIgPSBlbmNvZGVQb2ludGVyKHBvaW50ZXIsIHN1YlBvaW50ZXIpOwogICAgfQoKICAgIC8qKgogICAgICogQG1ldGhvZCBnZXQKICAgICAqIEBkZXNjcmlwdGlvbiBSZXRyaWV2ZXMgdGhlIHU2NCB2YWx1ZSBhdCB0aGUgc3BlY2lmaWVkIG9mZnNldC4KICAgICAqIEBwYXJhbSB7dTh9IGluZGV4IC0gVGhlIGluZGV4ICgwIHRvIDMpIG9mIHRoZSB1NjQgdmFsdWUgdG8gcmV0cmlldmUuCiAgICAgKiBAcmV0dXJucyB7dTY0fSAtIFRoZSB1NjQgdmFsdWUgYXQgdGhlIHNwZWNpZmllZCBpbmRleC4KICAgICAqLwogICAgQGlubGluZQogICAgcHVibGljIGdldChpbmRleDogdTgpOiB1NjQgewogICAgICAgIGFzc2VydChpbmRleCA8IDQsICdJbmRleCBvdXQgb2YgYm91bmRzIGZvciBTdG9yZWRVNjQgKDAtMyknKTsKICAgICAgICB0aGlzLmVuc3VyZVZhbHVlcygpOwogICAgICAgIHJldHVybiB0aGlzLl92YWx1ZXNbaW5kZXhdOwogICAgfQoKICAgIC8qKgogICAgICogQG1ldGhvZCBzZXQKICAgICAqIEBkZXNjcmlwdGlvbiBTZXRzIHRoZSB1NjQgdmFsdWUgYXQgdGhlIHNwZWNpZmllZCBvZmZzZXQuCiAgICAgKiBAcGFyYW0ge3U4fSBpbmRleCAtIFRoZSBpbmRleCAoMCB0byAzKSBvZiB0aGUgdTY0IHZhbHVlIHRvIHNldC4KICAgICAqIEBwYXJhbSB7dTY0fSB2YWx1ZSAtIFRoZSB1NjQgdmFsdWUgdG8gYXNzaWduLgogICAgICovCiAgICBAaW5saW5lCiAgICBwdWJsaWMgc2V0KGluZGV4OiB1OCwgdmFsdWU6IHU2NCk6IHZvaWQgewogICAgICAgIGFzc2VydChpbmRleCA8IDQsICdJbmRleCBvdXQgb2YgYm91bmRzIGZvciBTdG9yZWRVNjQgKDAtMyknKTsKICAgICAgICB0aGlzLmVuc3VyZVZhbHVlcygpOwogICAgICAgIGlmICh0aGlzLl92YWx1ZXNbaW5kZXhdICE9IHZhbHVlKSB7CiAgICAgICAgICAgIHRoaXMuX3ZhbHVlc1tpbmRleF0gPSB2YWx1ZTsKICAgICAgICAgICAgdGhpcy5pc0NoYW5nZWQgPSB0cnVlOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIEBtZXRob2Qgc2F2ZQogICAgICogQGRlc2NyaXB0aW9uIFBlcnNpc3RzIHRoZSBjYWNoZWQgdTY0IHZhbHVlcyB0byBzdG9yYWdlIGlmIGFueSBoYXZlIGJlZW4gbW9kaWZpZWQuCiAgICAgKi8KICAgIHB1YmxpYyBzYXZlKCk6IHZvaWQgewogICAgICAgIGlmICh0aGlzLmlzQ2hhbmdlZCkgewogICAgICAgICAgICBjb25zdCBwYWNrZWQgPSB0aGlzLnBhY2tWYWx1ZXMoKTsKICAgICAgICAgICAgQmxvY2tjaGFpbi5zZXRTdG9yYWdlQXQodGhpcy5idWZmZXJQb2ludGVyLCBwYWNrZWQpOwogICAgICAgICAgICB0aGlzLmlzQ2hhbmdlZCA9IGZhbHNlOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIEBtZXRob2Qgc2V0TXVsdGlwbGUKICAgICAqIEBkZXNjcmlwdGlvbiBTZXRzIG11bHRpcGxlIHU2NCB2YWx1ZXMgYXQgb25jZS4KICAgICAqIEBwYXJhbSB7W3U2NCwgdTY0LCB1NjQsIHU2NF19IHZhbHVlcyAtIEFuIGFycmF5IG9mIGZvdXIgdTY0IHZhbHVlcyB0byBzZXQuCiAgICAgKi8KICAgIEBpbmxpbmUKICAgIHB1YmxpYyBzZXRNdWx0aXBsZSh2YWx1ZXM6IHU2NFtdKTogdm9pZCB7CiAgICAgICAgdGhpcy5lbnN1cmVWYWx1ZXMoKTsKICAgICAgICBsZXQgY2hhbmdlZCA9IGZhbHNlOwogICAgICAgIGZvciAobGV0IGk6IHU4ID0gMDsgaSA8IDQ7IGkrKykgewogICAgICAgICAgICBpZiAodGhpcy5fdmFsdWVzW2ldICE9IHZhbHVlc1tpXSkgewogICAgICAgICAgICAgICAgdGhpcy5fdmFsdWVzW2ldID0gdmFsdWVzW2ldOwogICAgICAgICAgICAgICAgY2hhbmdlZCA9IHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKGNoYW5nZWQpIHsKICAgICAgICAgICAgdGhpcy5pc0NoYW5nZWQgPSB0cnVlOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIEBtZXRob2QgZ2V0QWxsCiAgICAgKiBAZGVzY3JpcHRpb24gUmV0cmlldmVzIGFsbCBmb3VyIHU2NCB2YWx1ZXMgYXMgYSB0dXBsZS4KICAgICAqIEByZXR1cm5zIHtbdTY0LCB1NjQsIHU2NCwgdTY0XX0gLSBBIHR1cGxlIGNvbnRhaW5pbmcgYWxsIGZvdXIgdTY0IHZhbHVlcy4KICAgICAqLwogICAgQGlubGluZQogICAgcHVibGljIGdldEFsbCgpOiB1NjRbXSB7CiAgICAgICAgdGhpcy5lbnN1cmVWYWx1ZXMoKTsKICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWVzOwogICAgfQoKICAgIC8qKgogICAgICogQG1ldGhvZCB0b1N0cmluZwogICAgICogQGRlc2NyaXB0aW9uIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYWxsIGZvdXIgdTY0IHZhbHVlcy4KICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IC0gQSBzdHJpbmcgaW4gdGhlIGZvcm1hdCAiW3ZhbHVlMCwgdmFsdWUxLCB2YWx1ZTIsIHZhbHVlM10iLgogICAgICovCiAgICBAaW5saW5lCiAgICBwdWJsaWMgdG9TdHJpbmcoKTogc3RyaW5nIHsKICAgICAgICB0aGlzLmVuc3VyZVZhbHVlcygpOwogICAgICAgIHJldHVybiBgWyR7dGhpcy5fdmFsdWVzWzBdLnRvU3RyaW5nKCl9LCAke3RoaXMuX3ZhbHVlc1sxXS50b1N0cmluZygpfSwgJHt0aGlzLl92YWx1ZXNbMl0udG9TdHJpbmcoKX0sICR7dGhpcy5fdmFsdWVzWzNdLnRvU3RyaW5nKCl9XWA7CiAgICB9CgoKICAgIC8qKgogICAgICogQG1ldGhvZCByZXNldAogICAgICogQGRlc2NyaXB0aW9uIFJlc2V0cyB0aGUgY2FjaGVkIHZhbHVlcyB0byBkZWZhdWx0IGFuZCBtYXJrcyBhcyBjaGFuZ2VkLgogICAgICovCiAgICBAaW5saW5lCiAgICBwdWJsaWMgcmVzZXQoKTogdm9pZCB7CiAgICAgICAgdGhpcy5fdmFsdWVzID0gWzAsIDAsIDAsIDBdOwogICAgICAgIHRoaXMuaXNDaGFuZ2VkID0gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIEBwcml2YXRlCiAgICAgKiBAbWV0aG9kIGVuc3VyZVZhbHVlcwogICAgICogQGRlc2NyaXB0aW9uIExvYWRzIGFuZCB1bnBhY2tzIHRoZSB1MjU2IHZhbHVlIGZyb20gc3RvcmFnZSBpbnRvIGZvdXIgdTY0IGNhY2hlIHZhcmlhYmxlcy4KICAgICAqLwogICAgcHJpdmF0ZSBlbnN1cmVWYWx1ZXMoKTogdm9pZCB7CiAgICAgICAgaWYgKCF0aGlzLmlzTG9hZGVkKSB7CiAgICAgICAgICAgIGNvbnN0IHN0b3JlZFUyNTY6IFVpbnQ4QXJyYXkgPSBCbG9ja2NoYWluLmdldFN0b3JhZ2VBdCh0aGlzLmJ1ZmZlclBvaW50ZXIpOwoKICAgICAgICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEJ5dGVzUmVhZGVyKHN0b3JlZFUyNTYpOwoKICAgICAgICAgICAgdGhpcy5fdmFsdWVzWzBdID0gcmVhZGVyLnJlYWRVNjQoKTsKICAgICAgICAgICAgdGhpcy5fdmFsdWVzWzFdID0gcmVhZGVyLnJlYWRVNjQoKTsKICAgICAgICAgICAgdGhpcy5fdmFsdWVzWzJdID0gcmVhZGVyLnJlYWRVNjQoKTsKICAgICAgICAgICAgdGhpcy5fdmFsdWVzWzNdID0gcmVhZGVyLnJlYWRVNjQoKTsKCiAgICAgICAgICAgIHRoaXMuaXNMb2FkZWQgPSB0cnVlOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIEBwcml2YXRlCiAgICAgKiBAbWV0aG9kIHBhY2tWYWx1ZXMKICAgICAqIEBkZXNjcmlwdGlvbiBQYWNrcyB0aGUgZm91ciBjYWNoZWQgdTY0IHZhbHVlcyBpbnRvIGEgc2luZ2xlIHUyNTYgZm9yIHN0b3JhZ2UuCiAgICAgKiBAcmV0dXJucyB7dTI1Nn0gLSBUaGUgcGFja2VkIHUyNTYgdmFsdWUuCiAgICAgKi8KICAgIHByaXZhdGUgcGFja1ZhbHVlcygpOiBVaW50OEFycmF5IHsKICAgICAgICBjb25zdCB3cml0ZXIgPSBuZXcgQnl0ZXNXcml0ZXIoMzIpOwoKICAgICAgICB3cml0ZXIud3JpdGVVNjQodGhpcy5fdmFsdWVzWzBdKTsKICAgICAgICB3cml0ZXIud3JpdGVVNjQodGhpcy5fdmFsdWVzWzFdKTsKICAgICAgICB3cml0ZXIud3JpdGVVNjQodGhpcy5fdmFsdWVzWzJdKTsKICAgICAgICB3cml0ZXIud3JpdGVVNjQodGhpcy5fdmFsdWVzWzNdKTsKCiAgICAgICAgcmV0dXJuIHdyaXRlci5nZXRCdWZmZXIoKTsKICAgIH0KfQo=",
  "node_modules/@btc-vision/btc-runtime/runtime/types/Address.ts": "aW1wb3J0IHsgUG90ZW50aWFsIH0gZnJvbSAnLi4vbGFuZy9EZWZpbml0aW9ucyc7CmltcG9ydCB7IEFERFJFU1NfQllURV9MRU5HVEgsIGRlY29kZUhleEFycmF5LCBlbmNvZGVIZXhGcm9tQnVmZmVyIH0gZnJvbSAnLi4vdXRpbHMnOwppbXBvcnQgeyBiZWNoMzJtIGFzIF9iZWNoMzJtLCB0b1dvcmRzIH0gZnJvbSAnLi4vdXRpbHMvYjMyJzsKaW1wb3J0IHsgUmV2ZXJ0IH0gZnJvbSAnLi9SZXZlcnQnOwoKQGZpbmFsCmV4cG9ydCBjbGFzcyBBZGRyZXNzIGV4dGVuZHMgVWludDhBcnJheSB7CiAgICBwcml2YXRlIGlzRGVmaW5lZDogYm9vbGVhbiA9IGZhbHNlOwoKICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihieXRlczogdThbXSA9IFtdKSB7CiAgICAgICAgc3VwZXIoQUREUkVTU19CWVRFX0xFTkdUSCk7CgogICAgICAgIGlmICghKCFieXRlcyB8fCBieXRlcy5sZW5ndGggPT09IDApKSB7CiAgICAgICAgICAgIHRoaXMubmV3U2V0KGJ5dGVzKTsKICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBEZWFkIGFkZHJlc3MgKDI4NGFlNGFjZGIzMmE5OWJhM2ViZmE2NmE5MWRkYjQxYTdiN2ExZDJmZWY0MTUzOTk5MjJjZDhhMDQ0ODVjMDIpCiAgICAgKiBnZW5lcmF0ZWQgZnJvbSAwNDY3OGFmZGIwZmU1NTQ4MjcxOTY3ZjFhNjcxMzBiNzEwNWNkNmE4MjhlMDM5MDlhNjc5NjJlMGVhMWY2MWRlYjY0OWY2YmMzZjRjZWYzOGM0ZjM1NTA0ZTUxZWMxMTJkZTVjMzg0ZGY3YmEwYjhkNTc4YTRjNzAyYjZiZjExZDVmCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZGVhZCgpOiBBZGRyZXNzIHsKICAgICAgICByZXR1cm4gREVBRF9BRERSRVNTLmNsb25lKCk7CiAgICB9CgogICAgcHVibGljIHN0YXRpYyB6ZXJvKCk6IEFkZHJlc3MgewogICAgICAgIHJldHVybiBaRVJPX0FERFJFU1MuY2xvbmUoKTsKICAgIH0KCiAgICBwdWJsaWMgc3RhdGljIGZyb21TdHJpbmcocHViS2V5OiBzdHJpbmcpOiBBZGRyZXNzIHsKICAgICAgICBpZiAocHViS2V5LnN0YXJ0c1dpdGgoJzB4JykpIHsKICAgICAgICAgICAgcHViS2V5ID0gcHViS2V5LnNsaWNlKDIpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIG5ldyBBZGRyZXNzKGRlY29kZUhleEFycmF5KHB1YktleSkpOwogICAgfQoKICAgIHB1YmxpYyBpc1plcm8oKTogYm9vbCB7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmICh0aGlzW2ldICE9IDApIHsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBDcmVhdGUgYSBuZXcgQWRkcmVzcyB0aGF0IGlzIGEgY29weSBvZiB0aGUgY3VycmVudCBBZGRyZXNzLgogICAgICogQHJldHVybnMge0FkZHJlc3N9CiAgICAgKi8KICAgIHB1YmxpYyBjbG9uZSgpOiBBZGRyZXNzIHsKICAgICAgICBjb25zdCBjbG9uZWQgPSBuZXcgQWRkcmVzcygpOwogICAgICAgIC8vIENvcHkgdGhlIHJhdyBtZW1vcnkgZGlyZWN0bHk6CiAgICAgICAgbWVtb3J5LmNvcHkoY2xvbmVkLmRhdGFTdGFydCwgdGhpcy5kYXRhU3RhcnQsIEFERFJFU1NfQllURV9MRU5HVEgpOwoKICAgICAgICAvLyBEdXBsaWNhdGUgdGhlIGlzRGVmaW5lZCBmbGFnIGFzIHdlbGw6CiAgICAgICAgY2xvbmVkLmlzRGVmaW5lZCA9IHRoaXMuaXNEZWZpbmVkOwoKICAgICAgICByZXR1cm4gY2xvbmVkOwogICAgfQoKICAgIHB1YmxpYyBzdGF0aWMgZnJvbVVpbnQ4QXJyYXkoYnl0ZXM6IFVpbnQ4QXJyYXkpOiBBZGRyZXNzIHsKICAgICAgICBjb25zdCBjbG9uZWQgPSBuZXcgQWRkcmVzcygpOwogICAgICAgIC8vIENvcHkgdGhlIHJhdyBtZW1vcnkgZGlyZWN0bHk6CiAgICAgICAgbWVtb3J5LmNvcHkoY2xvbmVkLmRhdGFTdGFydCwgYnl0ZXMuZGF0YVN0YXJ0LCBBRERSRVNTX0JZVEVfTEVOR1RIKTsKCiAgICAgICAgcmV0dXJuIGNsb25lZDsKICAgIH0KCiAgICBwdWJsaWMgdG9IZXgoKTogc3RyaW5nIHsKICAgICAgICByZXR1cm4gZW5jb2RlSGV4RnJvbUJ1ZmZlcih0aGlzLmJ1ZmZlcik7CiAgICB9CgogICAgcHVibGljIGVtcHR5KCk6IGJvb2wgewogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBpZiAodGhpc1tpXSAhPSAwKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qKgogICAgICogU2V0IHRoZSBwdWJsaWMga2V5CiAgICAgKiBAcGFyYW0ge0FycmF5TGlrZX0gcHVibGljS2V5IFRoZSBwdWJsaWMga2V5CiAgICAgKiBAcmV0dXJucyB7dm9pZH0KICAgICAqLwogICAgcHVibGljIG5ld1NldChwdWJsaWNLZXk6IHU4W10pOiB2b2lkIHsKICAgICAgICBpZiAocHVibGljS2V5Lmxlbmd0aCAhPT0gMzIpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHB1YmxpYyBrZXkgbGVuZ3RoJyk7CiAgICAgICAgfQoKICAgICAgICBzdXBlci5zZXQocHVibGljS2V5KTsKCiAgICAgICAgdGhpcy5pc0RlZmluZWQgPSB0cnVlOwogICAgfQoKICAgIHB1YmxpYyB0b0JlY2gzMm0oKTogc3RyaW5nIHsKICAgICAgICByZXR1cm4gU3RyaW5nLlVURjguZGVjb2RlKF9iZWNoMzJtKFN0cmluZy5VVEY4LmVuY29kZSgnYmMnKSwgdG9Xb3Jkcyh0aGlzLmJ1ZmZlcikpKTsKICAgIH0KCiAgICBAb3BlcmF0b3IoJz09JykKICAgIHB1YmxpYyBlcXVhbHMoYTogQWRkcmVzcyk6IGJvb2wgewogICAgICAgIGlmIChhLmxlbmd0aCAhPSB0aGlzLmxlbmd0aCkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQoKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgaWYgKHRoaXNbaV0gIT0gYVtpXSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBAb3BlcmF0b3IoJzwnKQogICAgcHVibGljIGxlc3NUaGFuKGE6IEFkZHJlc3MpOiBib29sIHsKICAgICAgICAvLyBDb21wYXJlIHRoZSB0d28gYWRkcmVzc2VzIGJ5dGUtYnktYnl0ZSwgdHJlYXRpbmcgdGhlbSBhcyBiaWctZW5kaWFuIHVpbnQyNTYKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDMyOyBpKyspIHsKICAgICAgICAgICAgY29uc3QgdGhpc0J5dGUgPSB0aGlzW2ldOwogICAgICAgICAgICBjb25zdCBhQnl0ZSA9IGFbaV07CgogICAgICAgICAgICBpZiAodGhpc0J5dGUgPCBhQnl0ZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7IC8vIHRoaXMgaXMgbGVzcyB0aGFuIGEKICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzQnl0ZSA+IGFCeXRlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIHRoaXMgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIGEKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIEBvcGVyYXRvcignPicpCiAgICBwdWJsaWMgZ3JlYXRlclRoYW4oYTogQWRkcmVzcyk6IGJvb2wgewogICAgICAgIC8vIENvbXBhcmUgdGhlIHR3byBhZGRyZXNzZXMgYnl0ZS1ieS1ieXRlLCB0cmVhdGluZyB0aGVtIGFzIGJpZy1lbmRpYW4gdWludDI1NgogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzI7IGkrKykgewogICAgICAgICAgICBjb25zdCB0aGlzQnl0ZSA9IHRoaXNbaV07CiAgICAgICAgICAgIGNvbnN0IGFCeXRlID0gYVtpXTsKCiAgICAgICAgICAgIGlmICh0aGlzQnl0ZSA+IGFCeXRlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gdGhpcyBpcyBncmVhdGVyIHRoYW4gYQogICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXNCeXRlIDwgYUJ5dGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gdGhpcyBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgQG9wZXJhdG9yKCc8PScpCiAgICBwdWJsaWMgbGVzc1RoYW5PckVxdWFsKGE6IEFkZHJlc3MpOiBib29sIHsKICAgICAgICByZXR1cm4gdGhpcy5sZXNzVGhhbihhKSB8fCB0aGlzLmVxdWFscyhhKTsKICAgIH0KCiAgICBAb3BlcmF0b3IoJz49JykKICAgIHB1YmxpYyBncmVhdGVyVGhhbk9yRXF1YWwoYTogQWRkcmVzcyk6IGJvb2wgewogICAgICAgIHJldHVybiB0aGlzLmdyZWF0ZXJUaGFuKGEpIHx8IHRoaXMuZXF1YWxzKGEpOwogICAgfQoKICAgIEBvcGVyYXRvcignIT0nKQogICAgcHVibGljIG5vdEVxdWFscyhhOiBBZGRyZXNzKTogYm9vbCB7CiAgICAgICAgcmV0dXJuICF0aGlzLmVxdWFscyhhKTsKICAgIH0KCiAgICBwdWJsaWMgdG9TdHJpbmcoKTogc3RyaW5nIHsKICAgICAgICByZXR1cm4gdGhpcy50b0JlY2gzMm0oKTsKICAgIH0KCiAgICBAb3BlcmF0b3IoJ1tdJykKICAgIHByaXZhdGUgX19fZ2V0KGluZGV4OiBpMzIpOiB1OCB7CiAgICAgICAgaWYgKHUzMihpbmRleCkgPj0gdTMyKHRoaXMubGVuZ3RoKSkgewogICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJyk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gbG9hZDx1OD4odGhpcy5kYXRhU3RhcnQgKyA8dXNpemU+aW5kZXgpOwogICAgfQoKICAgIEBvcGVyYXRvcignW109JykKICAgIHByaXZhdGUgX19fc2V0KGluZGV4OiBpMzIsIHZhbHVlOiB1OCk6IHZvaWQgewogICAgICAgIGlmICh0aGlzLmlzRGVmaW5lZCkgewogICAgICAgICAgICB0aHJvdyBuZXcgUmV2ZXJ0KGBDYW5ub3QgbW9kaWZ5IGFkZHJlc3MgZGF0YS5gKTsKICAgICAgICB9CgogICAgICAgIGlmICh1MzIoaW5kZXgpID49IHUzMih0aGlzLmxlbmd0aCkpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpOwogICAgICAgIH0KCiAgICAgICAgc3RvcmU8dTg+KHRoaXMuZGF0YVN0YXJ0ICsgPHVzaXplPmluZGV4LCB2YWx1ZSk7CiAgICB9Cn0KCmV4cG9ydCBjb25zdCBaRVJPX0FERFJFU1M6IEFkZHJlc3MgPSBuZXcgQWRkcmVzcygpOwpleHBvcnQgY29uc3QgREVBRF9BRERSRVNTOiBBZGRyZXNzID0gbmV3IEFkZHJlc3MoWwogICAgNDAsIDc0LCAyMjgsIDE3MiwgMjE5LCA1MCwgMTY5LCAxNTUsIDE2MywgMjM1LCAyNTAsIDEwMiwgMTY5LCAyOSwgMjE5LCA2NSwgMTY3LCAxODMsIDE2MSwgMjEwLAogICAgMjU0LCAyNDQsIDIxLCA1NywgMTUzLCAzNCwgMjA1LCAxMzgsIDQsIDcyLCA5MiwgMiwKXSk7CgpleHBvcnQgZGVjbGFyZSB0eXBlIFBvdGVudGlhbEFkZHJlc3MgPSBQb3RlbnRpYWw8QWRkcmVzcz47Cg==",
  "node_modules/@btc-vision/btc-runtime/runtime/types/index.ts": "aW1wb3J0IHsgTWFwIH0gZnJvbSAnLi4vZ2VuZXJpYy9NYXAnOwppbXBvcnQgeyBCeXRlc1JlYWRlciB9IGZyb20gJy4uL2J1ZmZlci9CeXRlc1JlYWRlcic7CgpleHBvcnQgdHlwZSBQb2ludGVyU3RvcmFnZSA9IE1hcDxVaW50OEFycmF5LCBVaW50OEFycmF5PjsKZXhwb3J0IHR5cGUgQ2FsbGRhdGEgPSBOb25OdWxsYWJsZTxCeXRlc1JlYWRlcj47Cg==",
  "node_modules/@btc-vision/btc-runtime/runtime/types/Revert.ts": "ZXhwb3J0IGNsYXNzIFJldmVydCBleHRlbmRzIEVycm9yIHsKICAgIGNvbnN0cnVjdG9yKG1zZzogc3RyaW5nID0gJycpIHsKICAgICAgICBzdXBlcihgRXhlY3V0aW9uIHJldmVydGVkICR7bXNnfWApOwogICAgfQp9Cg==",
  "node_modules/@btc-vision/btc-runtime/runtime/types/SafeMath.ts": "",
  "node_modules/@btc-vision/btc-runtime/runtime/types/SafeMathI128.ts": "aW1wb3J0IHsgaTEyOCB9IGZyb20gJ0BidGMtdmlzaW9uL2FzLWJpZ251bS9hc3NlbWJseSc7CgpleHBvcnQgY2xhc3MgU2FmZU1hdGhJMTI4IHsKICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgWkVSTzogaTEyOCA9IGkxMjguZnJvbUkzMigwKTsKICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgT05FOiBpMTI4ID0gaTEyOC5mcm9tSTMyKDEpOwogICAgcHVibGljIHN0YXRpYyByZWFkb25seSBORUdfT05FOiBpMTI4ID0gaTEyOC5mcm9tSTMyKC0xKTsKCiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IE1JTjogaTEyOCA9IGkxMjguTWluOwogICAgcHVibGljIHN0YXRpYyByZWFkb25seSBNQVg6IGkxMjggPSBpMTI4Lk1heDsKCiAgICAvKioKICAgICAqIFNhZmUgYWRkaXRpb24gZm9yIGkxMjguCiAgICAgKiBUaHJvd3MgaWYgKGEgKyBiKSBvdmVyZmxvd3Mgb3IgdW5kZXJmbG93cyB0aGUgc2lnbmVkIDEyOC1iaXQgcmFuZ2UuCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgYWRkKGE6IGkxMjgsIGI6IGkxMjgpOiBpMTI4IHsKICAgICAgICBsZXQgYyA9IGkxMjguYWRkKGEsIGIpOwoKICAgICAgICAvLyBPdmVyZmxvdyBjaGVjayBmb3IgMidzIGNvbXBsZW1lbnQ6CiAgICAgICAgLy8gSWYgYSBhbmQgYiBoYXZlIHRoZSBzYW1lIHNpZ24sIGJ1dCBjIGRpZmZlcnMsIG92ZXJmbG93IG9jY3VycmVkLgogICAgICAgIC8vIFdlIGNhbiBkZXRlY3Qgc2lnbiBtaXNtYXRjaCB1c2luZyAoKGEgXiBjKSAmIChiIF4gYykpIDwgMAogICAgICAgIC8vIChpLmUuLCB0aGUgc2lnbiBiaXQgaXMgc2V0IGluIHRoYXQgZXhwcmVzc2lvbikuCiAgICAgICAgaWYgKCgoYSBeIGMpICYgKGIgXiBjKSkuaXNOZWcoKSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NhZmVNYXRoSTEyODogYWRkaXRpb24gb3ZlcmZsb3cnKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIC8qKgogICAgICogU2FmZSBzdWJ0cmFjdGlvbiBmb3IgaTEyOC4KICAgICAqIFRocm93cyBpZiAoYSAtIGIpIG92ZXJmbG93cyBvciB1bmRlcmZsb3dzIHRoZSBzaWduZWQgMTI4LWJpdCByYW5nZS4KICAgICAqLwogICAgcHVibGljIHN0YXRpYyBzdWIoYTogaTEyOCwgYjogaTEyOCk6IGkxMjggewogICAgICAgIGxldCBjID0gaTEyOC5zdWIoYSwgYik7CgogICAgICAgIC8vIFN1YnRyYWN0aW9uIGlzIChhICsgKC1iKSkuIFdlIGNhbiBkbyBhIGRpcmVjdCBjaGVjayBsaWtlOgogICAgICAgIC8vIElmIChhIF4gYikgJiAoYSBeIGMpIGhhcyBzaWduIGJpdCBzZXQgPT4gb3ZlcmZsb3cuCiAgICAgICAgaWYgKCgoYSBeIGIpICYgKGEgXiBjKSkuaXNOZWcoKSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NhZmVNYXRoSTEyODogc3VidHJhY3Rpb24gb3ZlcmZsb3cnKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIC8qcHVibGljIHN0YXRpYyBtdWwoYTogaTEyOCwgYjogaTEyOCk6IGkxMjggewogICAgICAgIC8vIFF1aWNrIGNoZWNrOiBpZiBlaXRoZXIgaXMgWkVSTywgcHJvZHVjdCBpcyBaRVJPID0+IG5vIG92ZXJmbG93CiAgICAgICAgaWYgKGEgPT0gU2FmZU1hdGhJMTI4LlpFUk8gfHwgYiA9PSBTYWZlTWF0aEkxMjguWkVSTykgewogICAgICAgICAgICByZXR1cm4gU2FmZU1hdGhJMTI4LlpFUk87CiAgICAgICAgfQoKICAgICAgICBsZXQgYyA9IGkxMjgubXVsKGEsIGIpOwoKICAgICAgICAvLyBDaGVjayBvdmVyZmxvdzogYyAvIGIgc2hvdWxkIGJlIGV4YWN0bHkgYSAoaWYgYiAhPSAwKS4KICAgICAgICAvLyBBbHNvIHdhdGNoIGZvciB0aGUgaTEyOCBlZGdlIGNhc2U6IE1JTiAqIC0xID0+IHBvc3NpYmxlIG92ZXJmbG93IGlmIG5vdCByZXByZXNlbnRhYmxlLgogICAgICAgIC8vIFdlJ2xsIHJlbHkgb24gdGhlIGRpdmlzaW9uIGNoZWNrOgogICAgICAgIGlmIChiICE9IFNhZmVNYXRoSTEyOC5aRVJPKSB7CiAgICAgICAgICAgIGxldCBkaXZDaGVjayA9IGkxMjguZGl2KGMsIGIpOwogICAgICAgICAgICBpZiAoZGl2Q2hlY2sgIT0gYSkgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTYWZlTWF0aEkxMjg6IG11bHRpcGxpY2F0aW9uIG92ZXJmbG93Jyk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiBjOwogICAgfSovCgogICAgLypwdWJsaWMgc3RhdGljIGRpdihhOiBpMTI4LCBiOiBpMTI4KTogaTEyOCB7CiAgICAgICAgaWYgKGIgPT0gU2FmZU1hdGhJMTI4LlpFUk8pIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTYWZlTWF0aEkxMjg6IGRpdmlzaW9uIGJ5IHplcm8nKTsKICAgICAgICB9CgogICAgICAgIC8vIENoZWNrIGkxMjggZWRnZSBjYXNlOiBNSU4gLyAtMSA9PiBwb3NzaWJsZSBvdmVyZmxvdyBpZiBubyBjb3JyZXNwb25kaW5nIHBvc2l0aXZlLgogICAgICAgIGlmIChhID09IFNhZmVNYXRoSTEyOC5NSU4gJiYgYiA9PSBTYWZlTWF0aEkxMjguTkVHX09ORSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NhZmVNYXRoSTEyODogZGl2aXNpb24gb3ZlcmZsb3cgKE1JTiAvIC0xKScpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGkxMjguZGl2KGEsIGIpOwogICAgfSovCgogICAgLypwdWJsaWMgc3RhdGljIG1vZChhOiBpMTI4LCBiOiBpMTI4KTogaTEyOCB7CiAgICAgICAgaWYgKGIgPT0gU2FmZU1hdGhJMTI4LlpFUk8pIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTYWZlTWF0aEkxMjg6IG1vZHVsbyBieSB6ZXJvJyk7CiAgICAgICAgfQogICAgICAgIC8vIFNpbWlsYXIgZWRnZSBjYXNlIGFzIGRpdmlzaW9uOgogICAgICAgIGlmIChhID09IFNhZmVNYXRoSTEyOC5NSU4gJiYgYiA9PSBTYWZlTWF0aEkxMjguTkVHX09ORSkgewogICAgICAgICAgICAvLyBTb21lIGltcGxlbWVudGF0aW9ucyBtaWdodCB0cmVhdCBNSU4gJSAtMSA9PSAwLAogICAgICAgICAgICAvLyBidXQgaWYgdGhlIGxpYnJhcnkgZG9lc24ndCwgeW91IG1heSBoYW5kbGUgaXQgc2ltaWxhcmx5IHRvIGRpdmlzaW9uLgogICAgICAgICAgICAvLyBXZSdsbCBhc3N1bWUgd2UgdGhyb3cgdG8gYmUgc2FmZToKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTYWZlTWF0aEkxMjg6IG1vZHVsbyBvdmVyZmxvdyAoTUlOICUgLTEpJyk7CiAgICAgICAgfQoKICAgICAgICAvLyBVc2UgaTEyOC5yZW0sIGkxMjgubW9kLCBvciB0aGUgb3BlcmF0b3IgYXMgYXBwcm9wcmlhdGUuCiAgICAgICAgcmV0dXJuIGkxMjgucmVtKGEsIGIpOwogICAgfSovCgogICAgLyoqCiAgICAgKiBJbmNyZW1lbnQgYW4gaTEyOCBieSAxIHdpdGggb3ZlcmZsb3cgY2hlY2suCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgaW5jKHZhbHVlOiBpMTI4KTogaTEyOCB7CiAgICAgICAgaWYgKHZhbHVlID09IFNhZmVNYXRoSTEyOC5NQVgpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTYWZlTWF0aEkxMjg6IGluYyBvdmVyZmxvdycpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIFNhZmVNYXRoSTEyOC5hZGQodmFsdWUsIFNhZmVNYXRoSTEyOC5PTkUpOwogICAgfQoKICAgIC8qKgogICAgICogRGVjcmVtZW50IGFuIGkxMjggYnkgMSB3aXRoIHVuZGVyZmxvdyBjaGVjay4KICAgICAqLwogICAgcHVibGljIHN0YXRpYyBkZWModmFsdWU6IGkxMjgpOiBpMTI4IHsKICAgICAgICBpZiAodmFsdWUgPT0gU2FmZU1hdGhJMTI4Lk1JTikgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NhZmVNYXRoSTEyODogZGVjIHVuZGVyZmxvdycpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIFNhZmVNYXRoSTEyOC5zdWIodmFsdWUsIFNhZmVNYXRoSTEyOC5PTkUpOwogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJuIHRoZSBhYnNvbHV0ZSB2YWx1ZSBvZiB4LCB0aHJvd2luZyBpZiB4ID09IE1JTiAoc2luY2UgfE1JTnwgbWlnaHQgbm90IGJlIHJlcHJlc2VudGFibGUpLgogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGFicyh4OiBpMTI4KTogaTEyOCB7CiAgICAgICAgaWYgKHguaXNOZWcoKSkgewogICAgICAgICAgICAvLyBJZiB4ID09IE1JTiwgLXggY2FuIG92ZXJmbG93LgogICAgICAgICAgICBpZiAoeCA9PSBTYWZlTWF0aEkxMjguTUlOKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NhZmVNYXRoSTEyODogYWJzIG92ZXJmbG93IG9uIE1JTicpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB4Lm5lZygpOwogICAgICAgIH0KICAgICAgICByZXR1cm4geDsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybiB0aGUgbmVnYXRpb24gb2YgeCwgdGhyb3dpbmcgaWYgeCA9PSBNSU4uCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgbmVnKHg6IGkxMjgpOiBpMTI4IHsKICAgICAgICBpZiAoeCA9PSBTYWZlTWF0aEkxMjguTUlOKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU2FmZU1hdGhJMTI4OiBuZWcgb3ZlcmZsb3cgb24gTUlOJyk7CiAgICAgICAgfQogICAgICAgIHJldHVybiB4Lm5lZygpOwogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJucyB0aGUgc21hbGxlciBvZiB0d28gaTEyOHMuCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgbWluKGE6IGkxMjgsIGI6IGkxMjgpOiBpMTI4IHsKICAgICAgICByZXR1cm4gaTEyOC5sdChhLCBiKSA/IGEgOiBiOwogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJucyB0aGUgbGFyZ2VyIG9mIHR3byBpMTI4cy4KICAgICAqLwogICAgcHVibGljIHN0YXRpYyBtYXgoYTogaTEyOCwgYjogaTEyOCk6IGkxMjggewogICAgICAgIHJldHVybiBpMTI4Lmd0KGEsIGIpID8gYSA6IGI7CiAgICB9Cn0K",
  "node_modules/@btc-vision/btc-runtime/runtime/utils/b32.ts": "",
  "node_modules/@btc-vision/btc-runtime/runtime/utils/box.ts": "aW1wb3J0IHsgZW5jb2RlSGV4LCBlbmNvZGVIZXhVVEY4IH0gZnJvbSAnLi9oZXgnOwoKZXhwb3J0IGZ1bmN0aW9uIG51bGxwdHI8VD4oKTogVCB7CiAgICByZXR1cm4gY2hhbmdldHlwZTxUPigwKTsKfQoKZXhwb3J0IGNsYXNzIEJveCB7CiAgICBwdWJsaWMgc3RhcnQ6IHVzaXplOwogICAgcHVibGljIGxlbjogdXNpemU7CgogICAgY29uc3RydWN0b3Ioc3RhcnQ6IHVzaXplLCBsZW46IHVzaXplKSB7CiAgICAgICAgdGhpcy5zdGFydCA9IHN0YXJ0OwogICAgICAgIHRoaXMubGVuID0gbGVuOwogICAgfQoKICAgIHN0YXRpYyBjb25jYXQoZGF0YTogQXJyYXk8Qm94Pik6IEFycmF5QnVmZmVyIHsKICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgQXJyYXlCdWZmZXIoCiAgICAgICAgICAgIGRhdGEucmVkdWNlPGkzMj4oKHI6IGkzMiwgdjogQm94LCBpOiBpMzIsIGFyeTogQXJyYXk8Qm94PikgPT4gewogICAgICAgICAgICAgICAgcmV0dXJuIHIgKyA8aTMyPnYubGVuOwogICAgICAgICAgICB9LCAwKSwKICAgICAgICApOwogICAgICAgIGRhdGEucmVkdWNlPHVzaXplPigocjogdXNpemUsIHY6IEJveCwgaTogaTMyLCBhcnk6IEFycmF5PEJveD4pID0+IHsKICAgICAgICAgICAgbWVtb3J5LmNvcHkociwgdi5zdGFydCwgdi5sZW4pOwogICAgICAgICAgICByZXR1cm4gciArIHYubGVuOwogICAgICAgIH0sIGNoYW5nZXR5cGU8dXNpemU+KHJlc3VsdCkpOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CgogICAgc3RhdGljIGZyb20oZGF0YTogQXJyYXlCdWZmZXIpOiBCb3ggewogICAgICAgIHJldHVybiBuZXcgQm94KGNoYW5nZXR5cGU8dXNpemU+KGRhdGEpLCBkYXRhLmJ5dGVMZW5ndGgpOwogICAgfQoKICAgIHN0YXRpYyBjb3B5KGRhdGE6IEFycmF5QnVmZmVyKTogQm94IHsKICAgICAgICBjb25zdCBwdHIgPSBoZWFwLmFsbG9jKGRhdGEuYnl0ZUxlbmd0aCk7CiAgICAgICAgbWVtb3J5LmNvcHkocHRyLCBjaGFuZ2V0eXBlPHVzaXplPihkYXRhKSwgPHVzaXplPmRhdGEuYnl0ZUxlbmd0aCk7CiAgICAgICAgcmV0dXJuIG5ldyBCb3gocHRyLCA8dXNpemU+ZGF0YS5ieXRlTGVuZ3RoKTsKICAgIH0KCiAgICBzdGF0aWMgZnJlZUNvcHkodjogQm94KTogdm9pZCB7CiAgICAgICAgaGVhcC5mcmVlKHYuc3RhcnQpOwogICAgfQoKICAgIHN0YXRpYyBmcm9tVHlwZWQ8VD4odjogVCk6IEJveCB7CiAgICAgICAgLy8gY29uc3QgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKHNpemVvZjxUPih2KSk7CiAgICAgICAgY29uc3QgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKG9mZnNldG9mPFQ+KCkpOwogICAgICAgIHN0b3JlPFQ+KGNoYW5nZXR5cGU8dXNpemU+KGJ1ZmZlciksIHYpOwogICAgICAgIHJldHVybiBCb3guY29weShidWZmZXIpOwogICAgfQoKICAgIHRvSGV4U3RyaW5nKCk6IHN0cmluZyB7CiAgICAgICAgcmV0dXJuIGVuY29kZUhleCh0aGlzLnN0YXJ0LCB0aGlzLmxlbik7CiAgICB9CgogICAgdG9IZXhVVEY4KCk6IEFycmF5QnVmZmVyIHsKICAgICAgICByZXR1cm4gZW5jb2RlSGV4VVRGOCh0aGlzLnN0YXJ0LCB0aGlzLmxlbik7CiAgICB9CgogICAgc2hpZnQoKTogQm94IHsKICAgICAgICBpZiAodGhpcy5sZW4gPT0gMCkgewogICAgICAgICAgICByZXR1cm4gbnVsbHB0cjxCb3g+KCk7CiAgICAgICAgfQogICAgICAgIHRoaXMuc3RhcnQgPSB0aGlzLnN0YXJ0ICsgMTsKICAgICAgICB0aGlzLmxlbiA9IHRoaXMubGVuIC0gMTsKICAgICAgICByZXR1cm4gdGhpczsKICAgIH0KCiAgICBzbGljZUZyb20oc3RhcnQ6IHVzaXplKTogQm94IHsKICAgICAgICByZXR1cm4gbmV3IEJveCh0aGlzLnN0YXJ0ICsgc3RhcnQsIHRoaXMubGVuIC0gc3RhcnQpOwogICAgfQoKICAgIHNsaWNlVG8ocHRyOiB1c2l6ZSk6IEJveCB7CiAgICAgICAgaWYgKHB0ciA+IHRoaXMuc3RhcnQgKyB0aGlzLmxlbikgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3B0ciBpcyBvdXQgb2YgYm91bmRzJyk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBuZXcgQm94KHRoaXMuc3RhcnQsIHB0ciAtIHRoaXMuc3RhcnQpOwogICAgfQoKICAgIHNocmlua0Zyb250KGRpc3RhbmNlOiB1c2l6ZSk6IEJveCB7CiAgICAgICAgdGhpcy5zdGFydCA9IHRoaXMuc3RhcnQgKyBkaXN0YW5jZTsKICAgICAgICB0aGlzLmxlbiA9IHRoaXMubGVuIC0gZGlzdGFuY2U7CiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CgogICAgZ3Jvd0Zyb250KGRpc3RhbmNlOiB1c2l6ZSk6IEJveCB7CiAgICAgICAgdGhpcy5zdGFydCA9IHRoaXMuc3RhcnQgLSBkaXN0YW5jZTsKICAgICAgICB0aGlzLmxlbiA9IHRoaXMubGVuICsgZGlzdGFuY2U7CiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CgogICAgc2hyaW5rQmFjayhkaXN0YW5jZTogdXNpemUpOiBCb3ggewogICAgICAgIHRoaXMubGVuID0gdGhpcy5sZW4gLSBkaXN0YW5jZTsKICAgICAgICByZXR1cm4gdGhpczsKICAgIH0KCiAgICBncm93QmFjayhkaXN0YW5jZTogdXNpemUpOiBCb3ggewogICAgICAgIHRoaXMubGVuID0gdGhpcy5sZW4gKyBkaXN0YW5jZTsKICAgICAgICByZXR1cm4gdGhpczsKICAgIH0KCiAgICBzZXRMZW5ndGgobGVuOiB1c2l6ZSk6IEJveCB7CiAgICAgICAgdGhpcy5sZW4gPSBsZW47CiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CgogICAgdG9BcnJheUJ1ZmZlcigpOiBBcnJheUJ1ZmZlciB7CiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IEFycmF5QnVmZmVyKDxpMzI+dGhpcy5sZW4pOwogICAgICAgIG1lbW9yeS5jb3B5KGNoYW5nZXR5cGU8dXNpemU+KHJlc3VsdCksIHRoaXMuc3RhcnQsIHRoaXMubGVuKTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgfQoKICAgIGlzRW1wdHkoKTogYm9vbGVhbiB7CiAgICAgICAgcmV0dXJuIHRoaXMubGVuID09IDA7CiAgICB9Cn0KCmV4cG9ydCBjbGFzcyBSQ0JveCBleHRlbmRzIEJveCB7CiAgICBwdWJsaWMgYnVmZmVyOiBBcnJheUJ1ZmZlcjsKCiAgICBjb25zdHJ1Y3Rvcih2OiBBcnJheUJ1ZmZlcikgewogICAgICAgIHN1cGVyKGNoYW5nZXR5cGU8dXNpemU+KHYpLCA8dXNpemU+di5ieXRlTGVuZ3RoKTsKICAgICAgICB0aGlzLmJ1ZmZlciA9IHY7CiAgICB9CgogICAgc3RhdGljIGZyb20odjogQXJyYXlCdWZmZXIpOiBSQ0JveCB7CiAgICAgICAgcmV0dXJuIG5ldyBSQ0JveCh2KTsKICAgIH0KCiAgICBzdGF0aWMgZnJvbVR5cGVkPFQ+KHY6IFQpOiBSQ0JveCB7CiAgICAgICAgLy8gY29uc3QgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKHNpemVvZjxUPih2KSk7CiAgICAgICAgY29uc3QgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKG9mZnNldG9mPFQ+KCkpOwogICAgICAgIHN0b3JlPFQ+KGNoYW5nZXR5cGU8dXNpemU+KGJ1ZmZlciksIHYpOwogICAgICAgIHJldHVybiBSQ0JveC5mcm9tKGJ1ZmZlcik7CiAgICB9Cn0K",
  "node_modules/@btc-vision/btc-runtime/runtime/utils/encodings.ts": "aW1wb3J0IHsgdTI1NiB9IGZyb20gJ0BidGMtdmlzaW9uL2FzLWJpZ251bS9hc3NlbWJseSc7CgppbXBvcnQgeyBiMzJkZWNvZGUgYXMgX2IzMmRlY29kZSwgYmVjaDMybSBhcyBfYmVjaDMybSwgZnJvbVdvcmRzLCB0b1dvcmRzIH0gZnJvbSAnLi9iMzInOwoKZXhwb3J0IGZ1bmN0aW9uIGJlY2gzMm0odjogdTI1Nik6IHN0cmluZyB7CiAgICByZXR1cm4gU3RyaW5nLlVURjguZGVjb2RlKF9iZWNoMzJtKFN0cmluZy5VVEY4LmVuY29kZSgnYmMnKSwgdG9Xb3Jkcyh0b0FycmF5QnVmZmVyKHYpKSkpOwp9CgpleHBvcnQgZnVuY3Rpb24gYjMyZGVjb2RlKHY6IHN0cmluZyk6IFVpbnQ4QXJyYXkgewogICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcihmcm9tV29yZHMoX2IzMmRlY29kZSh2KS53b3JkcykpOwp9CgpleHBvcnQgZnVuY3Rpb24gYXJyYXlCdWZmZXJUb0FycmF5KGRhdGE6IEFycmF5QnVmZmVyKTogQXJyYXk8dTg+IHsKICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBBcnJheTx1OD4oZGF0YS5ieXRlTGVuZ3RoKTsKICAgIHN0b3JlPHVzaXplPihjaGFuZ2V0eXBlPHVzaXplPihyZXN1bHQpLCBjaGFuZ2V0eXBlPHVzaXplPihkYXRhKSk7CiAgICBzdG9yZTx1c2l6ZT4oY2hhbmdldHlwZTx1c2l6ZT4ocmVzdWx0KSArIHNpemVvZjx1c2l6ZT4oKSwgY2hhbmdldHlwZTx1c2l6ZT4oZGF0YSkpOwogICAgcmV0dXJuIHJlc3VsdDsKfQoKZXhwb3J0IGZ1bmN0aW9uIHRvQXJyYXlCdWZmZXI8VCBleHRlbmRzIHUyNTY+KGRhdGE6IFQpOiBBcnJheUJ1ZmZlciB7CiAgICBjb25zdCBieXRlcyA9IGRhdGEudG9CeXRlcygpOwogICAgcmV0dXJuIGNoYW5nZXR5cGU8VWludDhBcnJheT4oYnl0ZXMpLmJ1ZmZlcjsKfQoKZXhwb3J0IGZ1bmN0aW9uIHByaW1pdGl2ZVRvQnVmZmVyPFQ+KHZhbHVlOiBUKTogQXJyYXlCdWZmZXIgewogICAgY29uc3QgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKHNpemVvZjxUPigpKTsKICAgIHN0b3JlPFQ+KGNoYW5nZXR5cGU8dXNpemU+KGJ1ZmZlciksIHZhbHVlKTsKICAgIHJldHVybiBidWZmZXI7Cn0KCmV4cG9ydCBmdW5jdGlvbiBmcm9tQXJyYXlCdWZmZXIoZGF0YTogQXJyYXlCdWZmZXIpOiBVaW50OEFycmF5IHsKICAgIGlmIChkYXRhLmJ5dGVMZW5ndGggPT09IDApIHJldHVybiBuZXcgVWludDhBcnJheSgwKTsKICAgIHJldHVybiBVaW50OEFycmF5LndyYXAoZGF0YSk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBjb25jYXQoYTogQXJyYXlCdWZmZXIsIGI6IEFycmF5QnVmZmVyKTogQXJyYXlCdWZmZXIgewogICAgY29uc3QgcmVzdWx0ID0gbmV3IEFycmF5QnVmZmVyKGEuYnl0ZUxlbmd0aCArIGIuYnl0ZUxlbmd0aCk7CiAgICBtZW1vcnkuY29weShjaGFuZ2V0eXBlPHVzaXplPihyZXN1bHQpLCBjaGFuZ2V0eXBlPHVzaXplPihhKSwgPHVzaXplPmEuYnl0ZUxlbmd0aCk7CiAgICBtZW1vcnkuY29weSgKICAgICAgICBjaGFuZ2V0eXBlPHVzaXplPihyZXN1bHQpICsgPHVzaXplPmEuYnl0ZUxlbmd0aCwKICAgICAgICBjaGFuZ2V0eXBlPHVzaXplPihiKSwKICAgICAgICA8dXNpemU+Yi5ieXRlTGVuZ3RoLAogICAgKTsKICAgIHJldHVybiByZXN1bHQ7Cn0K",
  "node_modules/@btc-vision/btc-runtime/runtime/utils/hex.ts": "Y29uc3QgaGV4TG9va3VwVGFibGU6IFN0YXRpY0FycmF5PHU4PiA9IFsKICAgIDQ4LCA0OCwgNDgsIDQ5LCA0OCwgNTAsIDQ4LCA1MSwgNDgsIDUyLCA0OCwgNTMsIDQ4LCA1NCwgNDgsIDU1LCA0OCwgNTYsIDQ4LCA1NywgNDgsIDk3LCA0OCwgOTgsCiAgICA0OCwgOTksIDQ4LCAxMDAsIDQ4LCAxMDEsIDQ4LCAxMDIsIDQ5LCA0OCwgNDksIDQ5LCA0OSwgNTAsIDQ5LCA1MSwgNDksIDUyLCA0OSwgNTMsIDQ5LCA1NCwgNDksCiAgICA1NSwgNDksIDU2LCA0OSwgNTcsIDQ5LCA5NywgNDksIDk4LCA0OSwgOTksIDQ5LCAxMDAsIDQ5LCAxMDEsIDQ5LCAxMDIsIDUwLCA0OCwgNTAsIDQ5LCA1MCwgNTAsCiAgICA1MCwgNTEsIDUwLCA1MiwgNTAsIDUzLCA1MCwgNTQsIDUwLCA1NSwgNTAsIDU2LCA1MCwgNTcsIDUwLCA5NywgNTAsIDk4LCA1MCwgOTksIDUwLCAxMDAsIDUwLAogICAgMTAxLCA1MCwgMTAyLCA1MSwgNDgsIDUxLCA0OSwgNTEsIDUwLCA1MSwgNTEsIDUxLCA1MiwgNTEsIDUzLCA1MSwgNTQsIDUxLCA1NSwgNTEsIDU2LCA1MSwgNTcsCiAgICA1MSwgOTcsIDUxLCA5OCwgNTEsIDk5LCA1MSwgMTAwLCA1MSwgMTAxLCA1MSwgMTAyLCA1MiwgNDgsIDUyLCA0OSwgNTIsIDUwLCA1MiwgNTEsIDUyLCA1MiwgNTIsCiAgICA1MywgNTIsIDU0LCA1MiwgNTUsIDUyLCA1NiwgNTIsIDU3LCA1MiwgOTcsIDUyLCA5OCwgNTIsIDk5LCA1MiwgMTAwLCA1MiwgMTAxLCA1MiwgMTAyLCA1MywgNDgsCiAgICA1MywgNDksIDUzLCA1MCwgNTMsIDUxLCA1MywgNTIsIDUzLCA1MywgNTMsIDU0LCA1MywgNTUsIDUzLCA1NiwgNTMsIDU3LCA1MywgOTcsIDUzLCA5OCwgNTMsIDk5LAogICAgNTMsIDEwMCwgNTMsIDEwMSwgNTMsIDEwMiwgNTQsIDQ4LCA1NCwgNDksIDU0LCA1MCwgNTQsIDUxLCA1NCwgNTIsIDU0LCA1MywgNTQsIDU0LCA1NCwgNTUsIDU0LAogICAgNTYsIDU0LCA1NywgNTQsIDk3LCA1NCwgOTgsIDU0LCA5OSwgNTQsIDEwMCwgNTQsIDEwMSwgNTQsIDEwMiwgNTUsIDQ4LCA1NSwgNDksIDU1LCA1MCwgNTUsIDUxLAogICAgNTUsIDUyLCA1NSwgNTMsIDU1LCA1NCwgNTUsIDU1LCA1NSwgNTYsIDU1LCA1NywgNTUsIDk3LCA1NSwgOTgsIDU1LCA5OSwgNTUsIDEwMCwgNTUsIDEwMSwgNTUsCiAgICAxMDIsIDU2LCA0OCwgNTYsIDQ5LCA1NiwgNTAsIDU2LCA1MSwgNTYsIDUyLCA1NiwgNTMsIDU2LCA1NCwgNTYsIDU1LCA1NiwgNTYsIDU2LCA1NywgNTYsIDk3LCA1NiwKICAgIDk4LCA1NiwgOTksIDU2LCAxMDAsIDU2LCAxMDEsIDU2LCAxMDIsIDU3LCA0OCwgNTcsIDQ5LCA1NywgNTAsIDU3LCA1MSwgNTcsIDUyLCA1NywgNTMsIDU3LCA1NCwKICAgIDU3LCA1NSwgNTcsIDU2LCA1NywgNTcsIDU3LCA5NywgNTcsIDk4LCA1NywgOTksIDU3LCAxMDAsIDU3LCAxMDEsIDU3LCAxMDIsIDk3LCA0OCwgOTcsIDQ5LCA5NywKICAgIDUwLCA5NywgNTEsIDk3LCA1MiwgOTcsIDUzLCA5NywgNTQsIDk3LCA1NSwgOTcsIDU2LCA5NywgNTcsIDk3LCA5NywgOTcsIDk4LCA5NywgOTksIDk3LCAxMDAsIDk3LAogICAgMTAxLCA5NywgMTAyLCA5OCwgNDgsIDk4LCA0OSwgOTgsIDUwLCA5OCwgNTEsIDk4LCA1MiwgOTgsIDUzLCA5OCwgNTQsIDk4LCA1NSwgOTgsIDU2LCA5OCwgNTcsCiAgICA5OCwgOTcsIDk4LCA5OCwgOTgsIDk5LCA5OCwgMTAwLCA5OCwgMTAxLCA5OCwgMTAyLCA5OSwgNDgsIDk5LCA0OSwgOTksIDUwLCA5OSwgNTEsIDk5LCA1MiwgOTksCiAgICA1MywgOTksIDU0LCA5OSwgNTUsIDk5LCA1NiwgOTksIDU3LCA5OSwgOTcsIDk5LCA5OCwgOTksIDk5LCA5OSwgMTAwLCA5OSwgMTAxLCA5OSwgMTAyLCAxMDAsIDQ4LAogICAgMTAwLCA0OSwgMTAwLCA1MCwgMTAwLCA1MSwgMTAwLCA1MiwgMTAwLCA1MywgMTAwLCA1NCwgMTAwLCA1NSwgMTAwLCA1NiwgMTAwLCA1NywgMTAwLCA5NywgMTAwLAogICAgOTgsIDEwMCwgOTksIDEwMCwgMTAwLCAxMDAsIDEwMSwgMTAwLCAxMDIsIDEwMSwgNDgsIDEwMSwgNDksIDEwMSwgNTAsIDEwMSwgNTEsIDEwMSwgNTIsIDEwMSwgNTMsCiAgICAxMDEsIDU0LCAxMDEsIDU1LCAxMDEsIDU2LCAxMDEsIDU3LCAxMDEsIDk3LCAxMDEsIDk4LCAxMDEsIDk5LCAxMDEsIDEwMCwgMTAxLCAxMDEsIDEwMSwgMTAyLAogICAgMTAyLCA0OCwgMTAyLCA0OSwgMTAyLCA1MCwgMTAyLCA1MSwgMTAyLCA1MiwgMTAyLCA1MywgMTAyLCA1NCwgMTAyLCA1NSwgMTAyLCA1NiwgMTAyLCA1NywgMTAyLAogICAgOTcsIDEwMiwgOTgsIDEwMiwgOTksIDEwMiwgMTAwLCAxMDIsIDEwMSwgMTAyLCAxMDIsCl07CgpleHBvcnQgZnVuY3Rpb24gZW5jb2RlSGV4VVRGOChzdGFydDogdXNpemUsIGxlbjogdXNpemUpOiBBcnJheUJ1ZmZlciB7CiAgICBjb25zdCByZXN1bHQgPSBuZXcgQXJyYXlCdWZmZXIoMiArIDxpMzI+bGVuICogMik7CiAgICBzdG9yZTx1MTY+KGNoYW5nZXR5cGU8dXNpemU+KHJlc3VsdCksIDx1MTY+MHg3ODMwKTsKICAgIGZvciAobGV0IGk6IHVzaXplID0gMDsgaSA8IGxlbjsgaSsrKSB7CiAgICAgICAgc3RvcmU8dTE2PigKICAgICAgICAgICAgMiArIGNoYW5nZXR5cGU8dXNpemU+KHJlc3VsdCkgKyBpICogMiwKICAgICAgICAgICAgbG9hZDx1MTY+KGNoYW5nZXR5cGU8dXNpemU+KGhleExvb2t1cFRhYmxlKSArIDIgKiBsb2FkPHU4PihzdGFydCArIGkpKSwKICAgICAgICApOwogICAgfQogICAgcmV0dXJuIHJlc3VsdDsKfQoKZXhwb3J0IGZ1bmN0aW9uIGVuY29kZUhleChzdGFydDogdXNpemUsIGxlbjogdXNpemUpOiBzdHJpbmcgewogICAgcmV0dXJuIFN0cmluZy5VVEY4LmRlY29kZShlbmNvZGVIZXhVVEY4KHN0YXJ0LCBsZW4pKTsKfQoKZXhwb3J0IGZ1bmN0aW9uIGVuY29kZUhleEZyb21CdWZmZXIoZGF0YTogQXJyYXlCdWZmZXIpOiBzdHJpbmcgewogICAgcmV0dXJuIGVuY29kZUhleChjaGFuZ2V0eXBlPHVzaXplPihkYXRhKSwgZGF0YS5ieXRlTGVuZ3RoKTsKfQoKZXhwb3J0IGZ1bmN0aW9uIGRlY29kZUhleChoZXg6IHN0cmluZyk6IEFycmF5QnVmZmVyIHsKICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBBcnJheUJ1ZmZlcihoZXgubGVuZ3RoIC8gMik7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGhleC5sZW5ndGg7IGkgKz0gMikgewogICAgICAgIHN0b3JlPHU4PihjaGFuZ2V0eXBlPHVzaXplPihyZXN1bHQpICsgaSAvIDIsIDx1OD5wYXJzZUludChoZXguc3Vic3RyaW5nKGksIGkgKyAyKSwgMTYpKTsKICAgIH0KICAgIHJldHVybiByZXN1bHQ7Cn0KCmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVIZXhBcnJheShoZXg6IHN0cmluZyk6IHU4W10gewogICAgY29uc3QgcmVzdWx0ID0gbmV3IEFycmF5PHU4PihoZXgubGVuZ3RoIC8gMik7CgogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBoZXgubGVuZ3RoOyBpICs9IDIpIHsKICAgICAgICByZXN1bHRbaSAvIDJdID0gPHU4PnBhcnNlSW50KGhleC5zdWJzdHJpbmcoaSwgaSArIDIpLCAxNik7CiAgICB9CgogICAgcmV0dXJuIHJlc3VsdDsKfQo=",
  "node_modules/@btc-vision/btc-runtime/runtime/utils/index.ts": "ZXhwb3J0ICogZnJvbSAnLi9ib3gnOwpleHBvcnQgKiBmcm9tICcuL2VuY29kaW5ncyc7CmV4cG9ydCAqIGZyb20gJy4vaGV4JzsKZXhwb3J0ICogZnJvbSAnLi9sZW5ndGhzJzsK",
  "node_modules/@btc-vision/btc-runtime/runtime/utils/lengths.ts": "ZXhwb3J0IGNvbnN0IEFERFJFU1NfQllURV9MRU5HVEg6IGkzMiA9IDMyOwpleHBvcnQgY29uc3QgU0VMRUNUT1JfQllURV9MRU5HVEg6IGkzMiA9IDQ7CgpleHBvcnQgY29uc3QgVTI1Nl9CWVRFX0xFTkdUSDogaTMyID0gMzI7CmV4cG9ydCBjb25zdCBVMTI4X0JZVEVfTEVOR1RIOiBpMzIgPSAxNjsKZXhwb3J0IGNvbnN0IFU2NF9CWVRFX0xFTkdUSDogaTMyID0gODsKZXhwb3J0IGNvbnN0IFUzMl9CWVRFX0xFTkdUSDogaTMyID0gNDsKZXhwb3J0IGNvbnN0IFUxNl9CWVRFX0xFTkdUSDogaTMyID0gMjsKZXhwb3J0IGNvbnN0IFU4X0JZVEVfTEVOR1RIOiBpMzIgPSAxOwoKZXhwb3J0IGNvbnN0IEkxMjhfQllURV9MRU5HVEg6IGkzMiA9IDE2OwpleHBvcnQgY29uc3QgSTY0X0JZVEVfTEVOR1RIOiBpMzIgPSA4OwpleHBvcnQgY29uc3QgSTMyX0JZVEVfTEVOR1RIOiBpMzIgPSA0OwpleHBvcnQgY29uc3QgSTE2X0JZVEVfTEVOR1RIOiBpMzIgPSAyOwpleHBvcnQgY29uc3QgSThfQllURV9MRU5HVEg6IGkzMiA9IDE7CgpleHBvcnQgY29uc3QgQk9PTEVBTl9CWVRFX0xFTkdUSDogaTMyID0gMTsK"
}